//! Method, error and parameter types for the CodeSecurity endpoint.
#![allow(
    clippy::all
)]
/* 
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * OpenAPI spec version: 1.1.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::adapters::{AdapterError, Client, GitHubRequest, GitHubResponseExt};
use crate::models::*;

use super::PerPage;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct CodeSecurity<'api, C: Client> where AdapterError: From<<C as Client>::Err> {
    client: &'api C
}

pub fn new<C: Client>(client: &C) -> CodeSecurity<C> where AdapterError: From<<C as Client>::Err> {
    CodeSecurity { client }
}

/// Errors for the [Attach a configuration to repositories](CodeSecurity::attach_configuration_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityAttachConfigurationError {
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityAttachConfigurationError> for AdapterError {
    fn from(err: CodeSecurityAttachConfigurationError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityAttachConfigurationError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Create a code security configuration](CodeSecurity::create_configuration_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityCreateConfigurationError {
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityCreateConfigurationError> for AdapterError {
    fn from(err: CodeSecurityCreateConfigurationError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityCreateConfigurationError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Delete a code security configuration](CodeSecurity::delete_configuration_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityDeleteConfigurationError {
    #[error("Bad Request")]
    Status400(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Conflict")]
    Status409(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityDeleteConfigurationError> for AdapterError {
    fn from(err: CodeSecurityDeleteConfigurationError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityDeleteConfigurationError::Status400(_) => (String::from("Bad Request"), 400),
            CodeSecurityDeleteConfigurationError::Status403(_) => (String::from("Forbidden"), 403),
            CodeSecurityDeleteConfigurationError::Status404(_) => (String::from("Resource not found"), 404),
            CodeSecurityDeleteConfigurationError::Status409(_) => (String::from("Conflict"), 409),
            CodeSecurityDeleteConfigurationError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Detach configurations from repositories](CodeSecurity::detach_configuration_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityDetachConfigurationError {
    #[error("Bad Request")]
    Status400(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Conflict")]
    Status409(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityDetachConfigurationError> for AdapterError {
    fn from(err: CodeSecurityDetachConfigurationError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityDetachConfigurationError::Status400(_) => (String::from("Bad Request"), 400),
            CodeSecurityDetachConfigurationError::Status403(_) => (String::from("Forbidden"), 403),
            CodeSecurityDetachConfigurationError::Status404(_) => (String::from("Resource not found"), 404),
            CodeSecurityDetachConfigurationError::Status409(_) => (String::from("Conflict"), 409),
            CodeSecurityDetachConfigurationError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a code security configuration](CodeSecurity::get_configuration_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityGetConfigurationError {
    #[error("Not modified")]
    Status304,
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityGetConfigurationError> for AdapterError {
    fn from(err: CodeSecurityGetConfigurationError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityGetConfigurationError::Status304 => (String::from("Not modified"), 304),
            CodeSecurityGetConfigurationError::Status403(_) => (String::from("Forbidden"), 403),
            CodeSecurityGetConfigurationError::Status404(_) => (String::from("Resource not found"), 404),
            CodeSecurityGetConfigurationError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get the code security configuration associated with a repository](CodeSecurity::get_configuration_for_repository_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityGetConfigurationForRepositoryError {
    #[error("A header with no content is returned.")]
    Status204,
    #[error("Not modified")]
    Status304,
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityGetConfigurationForRepositoryError> for AdapterError {
    fn from(err: CodeSecurityGetConfigurationForRepositoryError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityGetConfigurationForRepositoryError::Status204 => (String::from("A header with no content is returned."), 204),
            CodeSecurityGetConfigurationForRepositoryError::Status304 => (String::from("Not modified"), 304),
            CodeSecurityGetConfigurationForRepositoryError::Status403(_) => (String::from("Forbidden"), 403),
            CodeSecurityGetConfigurationForRepositoryError::Status404(_) => (String::from("Resource not found"), 404),
            CodeSecurityGetConfigurationForRepositoryError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get code security configurations for an organization](CodeSecurity::get_configurations_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityGetConfigurationsForOrgError {
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityGetConfigurationsForOrgError> for AdapterError {
    fn from(err: CodeSecurityGetConfigurationsForOrgError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityGetConfigurationsForOrgError::Status403(_) => (String::from("Forbidden"), 403),
            CodeSecurityGetConfigurationsForOrgError::Status404(_) => (String::from("Resource not found"), 404),
            CodeSecurityGetConfigurationsForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get default code security configurations](CodeSecurity::get_default_configurations_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityGetDefaultConfigurationsError {
    #[error("Not modified")]
    Status304,
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityGetDefaultConfigurationsError> for AdapterError {
    fn from(err: CodeSecurityGetDefaultConfigurationsError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityGetDefaultConfigurationsError::Status304 => (String::from("Not modified"), 304),
            CodeSecurityGetDefaultConfigurationsError::Status403(_) => (String::from("Forbidden"), 403),
            CodeSecurityGetDefaultConfigurationsError::Status404(_) => (String::from("Resource not found"), 404),
            CodeSecurityGetDefaultConfigurationsError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get repositories associated with a code security configuration](CodeSecurity::get_repositories_for_configuration_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityGetRepositoriesForConfigurationError {
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityGetRepositoriesForConfigurationError> for AdapterError {
    fn from(err: CodeSecurityGetRepositoriesForConfigurationError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityGetRepositoriesForConfigurationError::Status403(_) => (String::from("Forbidden"), 403),
            CodeSecurityGetRepositoriesForConfigurationError::Status404(_) => (String::from("Resource not found"), 404),
            CodeSecurityGetRepositoriesForConfigurationError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Set a code security configuration as a default for an organization](CodeSecurity::set_configuration_as_default_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecuritySetConfigurationAsDefaultError {
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecuritySetConfigurationAsDefaultError> for AdapterError {
    fn from(err: CodeSecuritySetConfigurationAsDefaultError) -> Self {
        let (description, status_code) = match err {
            CodeSecuritySetConfigurationAsDefaultError::Status403(_) => (String::from("Forbidden"), 403),
            CodeSecuritySetConfigurationAsDefaultError::Status404(_) => (String::from("Resource not found"), 404),
            CodeSecuritySetConfigurationAsDefaultError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Update a code security configuration](CodeSecurity::update_configuration_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeSecurityUpdateConfigurationError {
    #[error("Response when no new updates are made")]
    Status204,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeSecurityUpdateConfigurationError> for AdapterError {
    fn from(err: CodeSecurityUpdateConfigurationError) -> Self {
        let (description, status_code) = match err {
            CodeSecurityUpdateConfigurationError::Status204 => (String::from("Response when no new updates are made"), 204),
            CodeSecurityUpdateConfigurationError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}


/// Query parameters for the [Get code security configurations for an organization](CodeSecurity::get_configurations_for_org_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CodeSecurityGetConfigurationsForOrgParams<'req> {
    /// The target type of the code security configuration
    target_type: Option<&'req str>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    before: Option<&'req str>, 
    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    after: Option<&'req str>
}

impl<'req> CodeSecurityGetConfigurationsForOrgParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The target type of the code security configuration
    pub fn target_type(self, target_type: &'req str) -> Self {
        Self {
            target_type: Some(target_type),
            per_page: self.per_page, 
            before: self.before, 
            after: self.after, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            target_type: self.target_type, 
            per_page: Some(per_page),
            before: self.before, 
            after: self.after, 
        }
    }

    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn before(self, before: &'req str) -> Self {
        Self {
            target_type: self.target_type, 
            per_page: self.per_page, 
            before: Some(before),
            after: self.after, 
        }
    }

    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn after(self, after: &'req str) -> Self {
        Self {
            target_type: self.target_type, 
            per_page: self.per_page, 
            before: self.before, 
            after: Some(after),
        }
    }
}

/// Query parameters for the [Get repositories associated with a code security configuration](CodeSecurity::get_repositories_for_configuration_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CodeSecurityGetRepositoriesForConfigurationParams<'req> {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    before: Option<&'req str>, 
    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    after: Option<&'req str>, 
    /// A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.  Can be: `all`, `attached`, `attaching`, `detached`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
    status: Option<&'req str>
}

impl<'req> CodeSecurityGetRepositoriesForConfigurationParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            before: self.before, 
            after: self.after, 
            status: self.status, 
        }
    }

    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn before(self, before: &'req str) -> Self {
        Self {
            per_page: self.per_page, 
            before: Some(before),
            after: self.after, 
            status: self.status, 
        }
    }

    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn after(self, after: &'req str) -> Self {
        Self {
            per_page: self.per_page, 
            before: self.before, 
            after: Some(after),
            status: self.status, 
        }
    }

    /// A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.  Can be: `all`, `attached`, `attaching`, `detached`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
    pub fn status(self, status: &'req str) -> Self {
        Self {
            per_page: self.per_page, 
            before: self.before, 
            after: self.after, 
            status: Some(status),
        }
    }
}


impl<'api, C: Client> CodeSecurity<'api, C> where AdapterError: From<<C as Client>::Err> {
    /// ---
    ///
    /// # Attach a configuration to repositories
    ///
    /// Attach a code security configuration to a set of repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.
    /// 
    /// If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for attach_configuration](https://docs.github.com/rest/code-security/configurations#attach-a-configuration-to-repositories)
    ///
    /// ---
    pub async fn attach_configuration_async(&self, org: &str, configuration_id: i32, body: PostCodeSecurityAttachConfiguration) -> Result<HashMap<String, Value>, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}/attach", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCodeSecurityAttachConfiguration>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(CodeSecurityAttachConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Attach a configuration to repositories
    ///
    /// Attach a code security configuration to a set of repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.
    /// 
    /// If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for attach_configuration](https://docs.github.com/rest/code-security/configurations#attach-a-configuration-to-repositories)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn attach_configuration(&self, org: &str, configuration_id: i32, body: PostCodeSecurityAttachConfiguration) -> Result<HashMap<String, Value>, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}/attach", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCodeSecurityAttachConfiguration>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(CodeSecurityAttachConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Create a code security configuration
    ///
    /// Creates a code security configuration in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_configuration](https://docs.github.com/rest/code-security/configurations#create-a-code-security-configuration)
    ///
    /// ---
    pub async fn create_configuration_async(&self, org: &str, body: PostCodeSecurityCreateConfiguration) -> Result<CodeSecurityConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCodeSecurityCreateConfiguration>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(CodeSecurityCreateConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Create a code security configuration
    ///
    /// Creates a code security configuration in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_configuration](https://docs.github.com/rest/code-security/configurations#create-a-code-security-configuration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_configuration(&self, org: &str, body: PostCodeSecurityCreateConfiguration) -> Result<CodeSecurityConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCodeSecurityCreateConfiguration>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(CodeSecurityCreateConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete a code security configuration
    ///
    /// Deletes the desired code security configuration from an organization.
    /// Repositories attached to the configuration will retain their settings but will no longer be associated with
    /// the configuration.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_configuration](https://docs.github.com/rest/code-security/configurations#delete-a-code-security-configuration)
    ///
    /// ---
    pub async fn delete_configuration_async(&self, org: &str, configuration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(())
        } else {
            match github_response.status_code() {
                400 => Err(CodeSecurityDeleteConfigurationError::Status400(github_response.to_json_async().await?).into()),
                403 => Err(CodeSecurityDeleteConfigurationError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeSecurityDeleteConfigurationError::Status404(github_response.to_json_async().await?).into()),
                409 => Err(CodeSecurityDeleteConfigurationError::Status409(github_response.to_json_async().await?).into()),
                code => Err(CodeSecurityDeleteConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete a code security configuration
    ///
    /// Deletes the desired code security configuration from an organization.
    /// Repositories attached to the configuration will retain their settings but will no longer be associated with
    /// the configuration.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_configuration](https://docs.github.com/rest/code-security/configurations#delete-a-code-security-configuration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_configuration(&self, org: &str, configuration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(())
        } else {
            match github_response.status_code() {
                400 => Err(CodeSecurityDeleteConfigurationError::Status400(github_response.to_json()?).into()),
                403 => Err(CodeSecurityDeleteConfigurationError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeSecurityDeleteConfigurationError::Status404(github_response.to_json()?).into()),
                409 => Err(CodeSecurityDeleteConfigurationError::Status409(github_response.to_json()?).into()),
                code => Err(CodeSecurityDeleteConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Detach configurations from repositories
    ///
    /// Detach code security configuration(s) from a set of repositories.
    /// Repositories will retain their settings but will no longer be associated with the configuration.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for detach_configuration](https://docs.github.com/rest/code-security/configurations#detach-configurations-from-repositories)
    ///
    /// ---
    pub async fn detach_configuration_async(&self, org: &str, body: DeleteCodeSecurityDetachConfiguration) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/detach", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<DeleteCodeSecurityDetachConfiguration>(body)?),
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(())
        } else {
            match github_response.status_code() {
                400 => Err(CodeSecurityDetachConfigurationError::Status400(github_response.to_json_async().await?).into()),
                403 => Err(CodeSecurityDetachConfigurationError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeSecurityDetachConfigurationError::Status404(github_response.to_json_async().await?).into()),
                409 => Err(CodeSecurityDetachConfigurationError::Status409(github_response.to_json_async().await?).into()),
                code => Err(CodeSecurityDetachConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Detach configurations from repositories
    ///
    /// Detach code security configuration(s) from a set of repositories.
    /// Repositories will retain their settings but will no longer be associated with the configuration.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for detach_configuration](https://docs.github.com/rest/code-security/configurations#detach-configurations-from-repositories)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn detach_configuration(&self, org: &str, body: DeleteCodeSecurityDetachConfiguration) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/detach", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<DeleteCodeSecurityDetachConfiguration>(body)?),
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(())
        } else {
            match github_response.status_code() {
                400 => Err(CodeSecurityDetachConfigurationError::Status400(github_response.to_json()?).into()),
                403 => Err(CodeSecurityDetachConfigurationError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeSecurityDetachConfigurationError::Status404(github_response.to_json()?).into()),
                409 => Err(CodeSecurityDetachConfigurationError::Status409(github_response.to_json()?).into()),
                code => Err(CodeSecurityDetachConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a code security configuration
    ///
    /// Gets a code security configuration available in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_configuration](https://docs.github.com/rest/code-security/configurations#get-a-code-security-configuration)
    ///
    /// ---
    pub async fn get_configuration_async(&self, org: &str, configuration_id: i32) -> Result<CodeSecurityConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                304 => Err(CodeSecurityGetConfigurationError::Status304.into()),
                403 => Err(CodeSecurityGetConfigurationError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeSecurityGetConfigurationError::Status404(github_response.to_json_async().await?).into()),
                code => Err(CodeSecurityGetConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a code security configuration
    ///
    /// Gets a code security configuration available in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_configuration](https://docs.github.com/rest/code-security/configurations#get-a-code-security-configuration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_configuration(&self, org: &str, configuration_id: i32) -> Result<CodeSecurityConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                304 => Err(CodeSecurityGetConfigurationError::Status304.into()),
                403 => Err(CodeSecurityGetConfigurationError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeSecurityGetConfigurationError::Status404(github_response.to_json()?).into()),
                code => Err(CodeSecurityGetConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get the code security configuration associated with a repository
    ///
    /// Get the code security configuration that manages a repository's code security settings.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_configuration_for_repository](https://docs.github.com/rest/code-security/configurations#get-the-code-security-configuration-associated-with-a-repository)
    ///
    /// ---
    pub async fn get_configuration_for_repository_async(&self, owner: &str, repo: &str) -> Result<CodeSecurityConfigurationForRepository, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-security-configuration", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                204 => Err(CodeSecurityGetConfigurationForRepositoryError::Status204.into()),
                304 => Err(CodeSecurityGetConfigurationForRepositoryError::Status304.into()),
                403 => Err(CodeSecurityGetConfigurationForRepositoryError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeSecurityGetConfigurationForRepositoryError::Status404(github_response.to_json_async().await?).into()),
                code => Err(CodeSecurityGetConfigurationForRepositoryError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get the code security configuration associated with a repository
    ///
    /// Get the code security configuration that manages a repository's code security settings.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_configuration_for_repository](https://docs.github.com/rest/code-security/configurations#get-the-code-security-configuration-associated-with-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_configuration_for_repository(&self, owner: &str, repo: &str) -> Result<CodeSecurityConfigurationForRepository, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-security-configuration", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                204 => Err(CodeSecurityGetConfigurationForRepositoryError::Status204.into()),
                304 => Err(CodeSecurityGetConfigurationForRepositoryError::Status304.into()),
                403 => Err(CodeSecurityGetConfigurationForRepositoryError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeSecurityGetConfigurationForRepositoryError::Status404(github_response.to_json()?).into()),
                code => Err(CodeSecurityGetConfigurationForRepositoryError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get code security configurations for an organization
    ///
    /// Lists all code security configurations available in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_configurations_for_org](https://docs.github.com/rest/code-security/configurations#get-code-security-configurations-for-an-organization)
    ///
    /// ---
    pub async fn get_configurations_for_org_async(&self, org: &str, query_params: Option<impl Into<CodeSecurityGetConfigurationsForOrgParams<'api>>>) -> Result<Vec<CodeSecurityConfiguration>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/code-security/configurations", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeSecurityGetConfigurationsForOrgError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeSecurityGetConfigurationsForOrgError::Status404(github_response.to_json_async().await?).into()),
                code => Err(CodeSecurityGetConfigurationsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get code security configurations for an organization
    ///
    /// Lists all code security configurations available in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_configurations_for_org](https://docs.github.com/rest/code-security/configurations#get-code-security-configurations-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_configurations_for_org(&self, org: &str, query_params: Option<impl Into<CodeSecurityGetConfigurationsForOrgParams<'api>>>) -> Result<Vec<CodeSecurityConfiguration>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/code-security/configurations", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CodeSecurityGetConfigurationsForOrgParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeSecurityGetConfigurationsForOrgError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeSecurityGetConfigurationsForOrgError::Status404(github_response.to_json()?).into()),
                code => Err(CodeSecurityGetConfigurationsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get default code security configurations
    ///
    /// Lists the default code security configurations for an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_default_configurations](https://docs.github.com/rest/code-security/configurations#get-default-code-security-configurations)
    ///
    /// ---
    pub async fn get_default_configurations_async(&self, org: &str) -> Result<CodeSecurityDefaultConfigurations, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/defaults", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                304 => Err(CodeSecurityGetDefaultConfigurationsError::Status304.into()),
                403 => Err(CodeSecurityGetDefaultConfigurationsError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeSecurityGetDefaultConfigurationsError::Status404(github_response.to_json_async().await?).into()),
                code => Err(CodeSecurityGetDefaultConfigurationsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get default code security configurations
    ///
    /// Lists the default code security configurations for an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_default_configurations](https://docs.github.com/rest/code-security/configurations#get-default-code-security-configurations)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_default_configurations(&self, org: &str) -> Result<CodeSecurityDefaultConfigurations, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/defaults", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                304 => Err(CodeSecurityGetDefaultConfigurationsError::Status304.into()),
                403 => Err(CodeSecurityGetDefaultConfigurationsError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeSecurityGetDefaultConfigurationsError::Status404(github_response.to_json()?).into()),
                code => Err(CodeSecurityGetDefaultConfigurationsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get repositories associated with a code security configuration
    ///
    /// Lists the repositories associated with a code security configuration in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_repositories_for_configuration](https://docs.github.com/rest/code-security/configurations#get-repositories-associated-with-a-code-security-configuration)
    ///
    /// ---
    pub async fn get_repositories_for_configuration_async(&self, org: &str, configuration_id: i32, query_params: Option<impl Into<CodeSecurityGetRepositoriesForConfigurationParams<'api>>>) -> Result<Vec<CodeSecurityConfigurationRepositories>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/code-security/configurations/{}/repositories", super::GITHUB_BASE_API_URL, org, configuration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeSecurityGetRepositoriesForConfigurationError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeSecurityGetRepositoriesForConfigurationError::Status404(github_response.to_json_async().await?).into()),
                code => Err(CodeSecurityGetRepositoriesForConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get repositories associated with a code security configuration
    ///
    /// Lists the repositories associated with a code security configuration in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_repositories_for_configuration](https://docs.github.com/rest/code-security/configurations#get-repositories-associated-with-a-code-security-configuration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_repositories_for_configuration(&self, org: &str, configuration_id: i32, query_params: Option<impl Into<CodeSecurityGetRepositoriesForConfigurationParams<'api>>>) -> Result<Vec<CodeSecurityConfigurationRepositories>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/code-security/configurations/{}/repositories", super::GITHUB_BASE_API_URL, org, configuration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CodeSecurityGetRepositoriesForConfigurationParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeSecurityGetRepositoriesForConfigurationError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeSecurityGetRepositoriesForConfigurationError::Status404(github_response.to_json()?).into()),
                code => Err(CodeSecurityGetRepositoriesForConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Set a code security configuration as a default for an organization
    ///
    /// Sets a code security configuration as a default to be applied to new repositories in your organization.
    /// 
    /// This configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_configuration_as_default](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization)
    ///
    /// ---
    pub async fn set_configuration_as_default_async(&self, org: &str, configuration_id: i32, body: PutCodeSecuritySetConfigurationAsDefault) -> Result<PutCodeSecuritySetConfigurationAsDefaultResponse200, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}/defaults", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PutCodeSecuritySetConfigurationAsDefault>(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeSecuritySetConfigurationAsDefaultError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeSecuritySetConfigurationAsDefaultError::Status404(github_response.to_json_async().await?).into()),
                code => Err(CodeSecuritySetConfigurationAsDefaultError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Set a code security configuration as a default for an organization
    ///
    /// Sets a code security configuration as a default to be applied to new repositories in your organization.
    /// 
    /// This configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_configuration_as_default](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_configuration_as_default(&self, org: &str, configuration_id: i32, body: PutCodeSecuritySetConfigurationAsDefault) -> Result<PutCodeSecuritySetConfigurationAsDefaultResponse200, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}/defaults", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PutCodeSecuritySetConfigurationAsDefault>(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeSecuritySetConfigurationAsDefaultError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeSecuritySetConfigurationAsDefaultError::Status404(github_response.to_json()?).into()),
                code => Err(CodeSecuritySetConfigurationAsDefaultError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update a code security configuration
    ///
    /// Updates a code security configuration in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for update_configuration](https://docs.github.com/rest/code-security/configurations#update-a-code-security-configuration)
    ///
    /// ---
    pub async fn update_configuration_async(&self, org: &str, configuration_id: i32, body: PatchCodeSecurityUpdateConfiguration) -> Result<CodeSecurityConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchCodeSecurityUpdateConfiguration>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                204 => Err(CodeSecurityUpdateConfigurationError::Status204.into()),
                code => Err(CodeSecurityUpdateConfigurationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update a code security configuration
    ///
    /// Updates a code security configuration in an organization.
    /// 
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for update_configuration](https://docs.github.com/rest/code-security/configurations#update-a-code-security-configuration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn update_configuration(&self, org: &str, configuration_id: i32, body: PatchCodeSecurityUpdateConfiguration) -> Result<CodeSecurityConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/code-security/configurations/{}", super::GITHUB_BASE_API_URL, org, configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchCodeSecurityUpdateConfiguration>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                204 => Err(CodeSecurityUpdateConfigurationError::Status204.into()),
                code => Err(CodeSecurityUpdateConfigurationError::Generic { code }.into()),
            }
        }
    }

}
