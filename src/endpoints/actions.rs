//! Method, error and parameter types for the Actions endpoint.
#![allow(
    clippy::all
)]
/* 
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * OpenAPI spec version: 1.1.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::adapters::{AdapterError, Client, FromJson, GitHubRequest, GitHubRequestBuilder, GitHubResponseExt};
use crate::models::*;

use super::PerPage;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct Actions<'api, C: Client<Req = crate::adapters::Req>> {
    client: &'api C
}

pub fn new<C: Client<Req = crate::adapters::Req>>(client: &C) -> Actions<C> {
    Actions { client }
}

/// Errors for the [Add custom labels to a self-hosted runner for an organization](Actions::add_custom_labels_to_self_hosted_runner_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsAddCustomLabelsToSelfHostedRunnerForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationErrorSimple),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Add custom labels to a self-hosted runner for a repository](Actions::add_custom_labels_to_self_hosted_runner_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsAddCustomLabelsToSelfHostedRunnerForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationErrorSimple),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Add selected repository to an organization secret](Actions::add_selected_repo_to_org_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsAddSelectedRepoToOrgSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Conflict when visibility type is not set to selected")]
    Status409,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Add selected repository to an organization variable](Actions::add_selected_repo_to_org_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsAddSelectedRepoToOrgVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response when the visibility of the variable is not set to `selected`")]
    Status409,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Approve a workflow run for a fork pull request](Actions::approve_workflow_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsApproveWorkflowRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Cancel a workflow run](Actions::cancel_workflow_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCancelWorkflowRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Conflict")]
    Status409(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create an environment variable](Actions::create_environment_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateEnvironmentVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create or update an environment secret](Actions::create_or_update_environment_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateOrUpdateEnvironmentSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response when updating a secret")]
    Status204,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create or update an organization secret](Actions::create_or_update_org_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateOrUpdateOrgSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response when updating a secret")]
    Status204,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create or update a repository secret](Actions::create_or_update_repo_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateOrUpdateRepoSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response when updating a secret")]
    Status204,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create an organization variable](Actions::create_org_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateOrgVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create a registration token for an organization](Actions::create_registration_token_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateRegistrationTokenForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create a registration token for a repository](Actions::create_registration_token_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateRegistrationTokenForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create a remove token for an organization](Actions::create_remove_token_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateRemoveTokenForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create a remove token for a repository](Actions::create_remove_token_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateRemoveTokenForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create a repository variable](Actions::create_repo_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateRepoVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create a workflow dispatch event](Actions::create_workflow_dispatch_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsCreateWorkflowDispatchError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete a GitHub Actions cache for a repository (using a cache ID)](Actions::delete_actions_cache_by_id_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteActionsCacheByIdError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete GitHub Actions caches for a repository (using a cache key)](Actions::delete_actions_cache_by_key_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteActionsCacheByKeyError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete an artifact](Actions::delete_artifact_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteArtifactError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete an environment secret](Actions::delete_environment_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteEnvironmentSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete an environment variable](Actions::delete_environment_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteEnvironmentVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete an organization secret](Actions::delete_org_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteOrgSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete an organization variable](Actions::delete_org_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteOrgVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete a repository secret](Actions::delete_repo_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteRepoSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete a repository variable](Actions::delete_repo_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteRepoVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete a self-hosted runner from an organization](Actions::delete_self_hosted_runner_from_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteSelfHostedRunnerFromOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete a self-hosted runner from a repository](Actions::delete_self_hosted_runner_from_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteSelfHostedRunnerFromRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete a workflow run](Actions::delete_workflow_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteWorkflowRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Delete workflow run logs](Actions::delete_workflow_run_logs_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDeleteWorkflowRunLogsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Disable a selected repository for GitHub Actions in an organization](Actions::disable_selected_repository_github_actions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDisableSelectedRepositoryGithubActionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Disable a workflow](Actions::disable_workflow_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDisableWorkflowError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Download an artifact](Actions::download_artifact_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDownloadArtifactError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response")]
    Status302,
    #[error("Gone")]
    Status410(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Download job logs for a workflow run](Actions::download_job_logs_for_workflow_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDownloadJobLogsForWorkflowRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response")]
    Status302,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Download workflow run attempt logs](Actions::download_workflow_run_attempt_logs_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDownloadWorkflowRunAttemptLogsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response")]
    Status302,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Download workflow run logs](Actions::download_workflow_run_logs_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsDownloadWorkflowRunLogsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response")]
    Status302,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Enable a selected repository for GitHub Actions in an organization](Actions::enable_selected_repository_github_actions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsEnableSelectedRepositoryGithubActionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Enable a workflow](Actions::enable_workflow_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsEnableWorkflowError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Force cancel a workflow run](Actions::force_cancel_workflow_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsForceCancelWorkflowRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Conflict")]
    Status409(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create configuration for a just-in-time runner for an organization](Actions::generate_runner_jitconfig_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGenerateRunnerJitconfigForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationErrorSimple),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Create configuration for a just-in-time runner for a repository](Actions::generate_runner_jitconfig_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGenerateRunnerJitconfigForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationErrorSimple),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List GitHub Actions caches for a repository](Actions::get_actions_cache_list_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetActionsCacheListError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get GitHub Actions cache usage for a repository](Actions::get_actions_cache_usage_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetActionsCacheUsageError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List repositories with GitHub Actions cache usage for an organization](Actions::get_actions_cache_usage_by_repo_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetActionsCacheUsageByRepoForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get GitHub Actions cache usage for an organization](Actions::get_actions_cache_usage_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetActionsCacheUsageForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get allowed actions and reusable workflows for an organization](Actions::get_allowed_actions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetAllowedActionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get allowed actions and reusable workflows for a repository](Actions::get_allowed_actions_repository_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetAllowedActionsRepositoryError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get an artifact](Actions::get_artifact_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetArtifactError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get the customization template for an OIDC subject claim for a repository](Actions::get_custom_oidc_sub_claim_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetCustomOidcSubClaimForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Bad Request")]
    Status400(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get an environment public key](Actions::get_environment_public_key_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetEnvironmentPublicKeyError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get an environment secret](Actions::get_environment_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetEnvironmentSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get an environment variable](Actions::get_environment_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetEnvironmentVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get default workflow permissions for an organization](Actions::get_github_actions_default_workflow_permissions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get default workflow permissions for a repository](Actions::get_github_actions_default_workflow_permissions_repository_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get GitHub Actions permissions for an organization](Actions::get_github_actions_permissions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetGithubActionsPermissionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get GitHub Actions permissions for a repository](Actions::get_github_actions_permissions_repository_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetGithubActionsPermissionsRepositoryError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get a job for a workflow run](Actions::get_job_for_workflow_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetJobForWorkflowRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get an organization public key](Actions::get_org_public_key_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetOrgPublicKeyError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get an organization secret](Actions::get_org_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetOrgSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get an organization variable](Actions::get_org_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetOrgVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get pending deployments for a workflow run](Actions::get_pending_deployments_for_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetPendingDeploymentsForRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get a repository public key](Actions::get_repo_public_key_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetRepoPublicKeyError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get a repository secret](Actions::get_repo_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetRepoSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get a repository variable](Actions::get_repo_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetRepoVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get the review history for a workflow run](Actions::get_reviews_for_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetReviewsForRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get a self-hosted runner for an organization](Actions::get_self_hosted_runner_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetSelfHostedRunnerForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get a self-hosted runner for a repository](Actions::get_self_hosted_runner_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetSelfHostedRunnerForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get a workflow](Actions::get_workflow_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetWorkflowError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get the level of access for workflows outside of the repository](Actions::get_workflow_access_to_repository_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetWorkflowAccessToRepositoryError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get a workflow run](Actions::get_workflow_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetWorkflowRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get a workflow run attempt](Actions::get_workflow_run_attempt_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetWorkflowRunAttemptError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get workflow run usage](Actions::get_workflow_run_usage_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetWorkflowRunUsageError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get workflow usage](Actions::get_workflow_usage_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsGetWorkflowUsageError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List artifacts for a repository](Actions::list_artifacts_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListArtifactsForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List environment secrets](Actions::list_environment_secrets_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListEnvironmentSecretsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List environment variables](Actions::list_environment_variables_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListEnvironmentVariablesError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List jobs for a workflow run](Actions::list_jobs_for_workflow_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListJobsForWorkflowRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List jobs for a workflow run attempt](Actions::list_jobs_for_workflow_run_attempt_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListJobsForWorkflowRunAttemptError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List labels for a self-hosted runner for an organization](Actions::list_labels_for_self_hosted_runner_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListLabelsForSelfHostedRunnerForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List labels for a self-hosted runner for a repository](Actions::list_labels_for_self_hosted_runner_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListLabelsForSelfHostedRunnerForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List organization secrets](Actions::list_org_secrets_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListOrgSecretsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List organization variables](Actions::list_org_variables_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListOrgVariablesError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List repository organization secrets](Actions::list_repo_organization_secrets_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListRepoOrganizationSecretsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List repository organization variables](Actions::list_repo_organization_variables_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListRepoOrganizationVariablesError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List repository secrets](Actions::list_repo_secrets_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListRepoSecretsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List repository variables](Actions::list_repo_variables_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListRepoVariablesError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List repository workflows](Actions::list_repo_workflows_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListRepoWorkflowsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List runner applications for an organization](Actions::list_runner_applications_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListRunnerApplicationsForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List runner applications for a repository](Actions::list_runner_applications_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListRunnerApplicationsForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List selected repositories for an organization secret](Actions::list_selected_repos_for_org_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListSelectedReposForOrgSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List selected repositories for an organization variable](Actions::list_selected_repos_for_org_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListSelectedReposForOrgVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response when the visibility of the variable is not set to `selected`")]
    Status409,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List selected repositories enabled for GitHub Actions in an organization](Actions::list_selected_repositories_enabled_github_actions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List self-hosted runners for an organization](Actions::list_self_hosted_runners_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListSelfHostedRunnersForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List self-hosted runners for a repository](Actions::list_self_hosted_runners_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListSelfHostedRunnersForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List workflow run artifacts](Actions::list_workflow_run_artifacts_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListWorkflowRunArtifactsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List workflow runs for a workflow](Actions::list_workflow_runs_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListWorkflowRunsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [List workflow runs for a repository](Actions::list_workflow_runs_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsListWorkflowRunsForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Re-run a job from a workflow run](Actions::re_run_job_for_workflow_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsReRunJobForWorkflowRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Re-run a workflow](Actions::re_run_workflow_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsReRunWorkflowError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Re-run failed jobs from a workflow run](Actions::re_run_workflow_failed_jobs_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsReRunWorkflowFailedJobsError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Remove all custom labels from a self-hosted runner for an organization](Actions::remove_all_custom_labels_from_self_hosted_runner_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Remove all custom labels from a self-hosted runner for a repository](Actions::remove_all_custom_labels_from_self_hosted_runner_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Remove a custom label from a self-hosted runner for an organization](Actions::remove_custom_label_from_self_hosted_runner_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationErrorSimple),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Remove a custom label from a self-hosted runner for a repository](Actions::remove_custom_label_from_self_hosted_runner_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationErrorSimple),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Remove selected repository from an organization secret](Actions::remove_selected_repo_from_org_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsRemoveSelectedRepoFromOrgSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Conflict when visibility type not set to selected")]
    Status409,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Remove selected repository from an organization variable](Actions::remove_selected_repo_from_org_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsRemoveSelectedRepoFromOrgVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response when the visibility of the variable is not set to `selected`")]
    Status409,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Review custom deployment protection rules for a workflow run](Actions::review_custom_gates_for_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsReviewCustomGatesForRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Review pending deployments for a workflow run](Actions::review_pending_deployments_for_run_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsReviewPendingDeploymentsForRunError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set allowed actions and reusable workflows for an organization](Actions::set_allowed_actions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetAllowedActionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set allowed actions and reusable workflows for a repository](Actions::set_allowed_actions_repository_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetAllowedActionsRepositoryError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set custom labels for a self-hosted runner for an organization](Actions::set_custom_labels_for_self_hosted_runner_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetCustomLabelsForSelfHostedRunnerForOrgError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationErrorSimple),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set custom labels for a self-hosted runner for a repository](Actions::set_custom_labels_for_self_hosted_runner_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetCustomLabelsForSelfHostedRunnerForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationErrorSimple),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set the customization template for an OIDC subject claim for a repository](Actions::set_custom_oidc_sub_claim_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetCustomOidcSubClaimForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Bad Request")]
    Status400(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationErrorSimple),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set default workflow permissions for an organization](Actions::set_github_actions_default_workflow_permissions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set default workflow permissions for a repository](Actions::set_github_actions_default_workflow_permissions_repository_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Conflict response when changing a setting is prevented by the owning organization")]
    Status409,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set GitHub Actions permissions for an organization](Actions::set_github_actions_permissions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetGithubActionsPermissionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set GitHub Actions permissions for a repository](Actions::set_github_actions_permissions_repository_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetGithubActionsPermissionsRepositoryError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set selected repositories for an organization secret](Actions::set_selected_repos_for_org_secret_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetSelectedReposForOrgSecretError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set selected repositories for an organization variable](Actions::set_selected_repos_for_org_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetSelectedReposForOrgVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Response when the visibility of the variable is not set to `selected`")]
    Status409,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set selected repositories enabled for GitHub Actions in an organization](Actions::set_selected_repositories_enabled_github_actions_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Set the level of access for workflows outside of the repository](Actions::set_workflow_access_to_repository_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsSetWorkflowAccessToRepositoryError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Update an environment variable](Actions::update_environment_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsUpdateEnvironmentVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Update an organization variable](Actions::update_org_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsUpdateOrgVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Update a repository variable](Actions::update_repo_variable_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum ActionsUpdateRepoVariableError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Status code: {}", code)]
    Generic { code: u16 },
}


/// Query parameters for the [Delete GitHub Actions caches for a repository (using a cache key)](Actions::delete_actions_cache_by_key_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsDeleteActionsCacheByKeyParams<'req> {
    /// A key for identifying the cache.
    key: &'req str, 
    /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    git_ref: Option<&'req str>
}

impl<'req> ActionsDeleteActionsCacheByKeyParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// A key for identifying the cache.
    pub fn key(self, key: &'req str) -> Self {
        Self {
            key: key,
            git_ref: self.git_ref, 
        }
    }

    /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    pub fn git_ref(self, git_ref: &'req str) -> Self {
        Self {
            key: self.key, 
            git_ref: Some(git_ref),
        }
    }
}

/// Query parameters for the [List GitHub Actions caches for a repository](Actions::get_actions_cache_list_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsGetActionsCacheListParams<'req> {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    git_ref: Option<&'req str>, 
    /// An explicit key or prefix for identifying the cache
    key: Option<&'req str>, 
    /// The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
    sort: Option<&'req str>, 
    /// The direction to sort the results by.
    direction: Option<&'req str>
}

impl<'req> ActionsGetActionsCacheListParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
            git_ref: self.git_ref, 
            key: self.key, 
            sort: self.sort, 
            direction: self.direction, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
            git_ref: self.git_ref, 
            key: self.key, 
            sort: self.sort, 
            direction: self.direction, 
        }
    }

    /// The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    pub fn git_ref(self, git_ref: &'req str) -> Self {
        Self {
            per_page: self.per_page, 
            page: self.page, 
            git_ref: Some(git_ref),
            key: self.key, 
            sort: self.sort, 
            direction: self.direction, 
        }
    }

    /// An explicit key or prefix for identifying the cache
    pub fn key(self, key: &'req str) -> Self {
        Self {
            per_page: self.per_page, 
            page: self.page, 
            git_ref: self.git_ref, 
            key: Some(key),
            sort: self.sort, 
            direction: self.direction, 
        }
    }

    /// The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
    pub fn sort(self, sort: &'req str) -> Self {
        Self {
            per_page: self.per_page, 
            page: self.page, 
            git_ref: self.git_ref, 
            key: self.key, 
            sort: Some(sort),
            direction: self.direction, 
        }
    }

    /// The direction to sort the results by.
    pub fn direction(self, direction: &'req str) -> Self {
        Self {
            per_page: self.per_page, 
            page: self.page, 
            git_ref: self.git_ref, 
            key: self.key, 
            sort: self.sort, 
            direction: Some(direction),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsGetActionsCacheListParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List repositories with GitHub Actions cache usage for an organization](Actions::get_actions_cache_usage_by_repo_for_org_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsGetActionsCacheUsageByRepoForOrgParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsGetActionsCacheUsageByRepoForOrgParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsGetActionsCacheUsageByRepoForOrgParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [Get a workflow run](Actions::get_workflow_run_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsGetWorkflowRunParams {
    /// If `true` pull requests are omitted from the response (empty array).
    exclude_pull_requests: Option<bool>
}

impl ActionsGetWorkflowRunParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// If `true` pull requests are omitted from the response (empty array).
    pub fn exclude_pull_requests(self, exclude_pull_requests: bool) -> Self {
        Self {
            exclude_pull_requests: Some(exclude_pull_requests),
        }
    }
}

/// Query parameters for the [Get a workflow run attempt](Actions::get_workflow_run_attempt_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsGetWorkflowRunAttemptParams {
    /// If `true` pull requests are omitted from the response (empty array).
    exclude_pull_requests: Option<bool>
}

impl ActionsGetWorkflowRunAttemptParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// If `true` pull requests are omitted from the response (empty array).
    pub fn exclude_pull_requests(self, exclude_pull_requests: bool) -> Self {
        Self {
            exclude_pull_requests: Some(exclude_pull_requests),
        }
    }
}

/// Query parameters for the [List artifacts for a repository](Actions::list_artifacts_for_repo_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListArtifactsForRepoParams<'req> {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The name field of an artifact. When specified, only artifacts with this name will be returned.
    name: Option<&'req str>
}

impl<'req> ActionsListArtifactsForRepoParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
            name: self.name, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
            name: self.name, 
        }
    }

    /// The name field of an artifact. When specified, only artifacts with this name will be returned.
    pub fn name(self, name: &'req str) -> Self {
        Self {
            per_page: self.per_page, 
            page: self.page, 
            name: Some(name),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListArtifactsForRepoParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List environment secrets](Actions::list_environment_secrets_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListEnvironmentSecretsParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListEnvironmentSecretsParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListEnvironmentSecretsParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List environment variables](Actions::list_environment_variables_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListEnvironmentVariablesParams {
    /// The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListEnvironmentVariablesParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListEnvironmentVariablesParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List jobs for a workflow run](Actions::list_jobs_for_workflow_run_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListJobsForWorkflowRunParams<'req> {
    /// Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
    filter: Option<&'req str>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl<'req> ActionsListJobsForWorkflowRunParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
    pub fn filter(self, filter: &'req str) -> Self {
        Self {
            filter: Some(filter),
            per_page: self.per_page, 
            page: self.page, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            filter: self.filter, 
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            filter: self.filter, 
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListJobsForWorkflowRunParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List jobs for a workflow run attempt](Actions::list_jobs_for_workflow_run_attempt_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListJobsForWorkflowRunAttemptParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListJobsForWorkflowRunAttemptParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListJobsForWorkflowRunAttemptParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List organization secrets](Actions::list_org_secrets_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListOrgSecretsParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListOrgSecretsParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListOrgSecretsParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List organization variables](Actions::list_org_variables_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListOrgVariablesParams {
    /// The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListOrgVariablesParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListOrgVariablesParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List repository organization secrets](Actions::list_repo_organization_secrets_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListRepoOrganizationSecretsParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListRepoOrganizationSecretsParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListRepoOrganizationSecretsParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List repository organization variables](Actions::list_repo_organization_variables_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListRepoOrganizationVariablesParams {
    /// The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListRepoOrganizationVariablesParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListRepoOrganizationVariablesParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List repository secrets](Actions::list_repo_secrets_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListRepoSecretsParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListRepoSecretsParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListRepoSecretsParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List repository variables](Actions::list_repo_variables_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListRepoVariablesParams {
    /// The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListRepoVariablesParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListRepoVariablesParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List repository workflows](Actions::list_repo_workflows_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListRepoWorkflowsParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListRepoWorkflowsParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListRepoWorkflowsParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List selected repositories for an organization secret](Actions::list_selected_repos_for_org_secret_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListSelectedReposForOrgSecretParams {
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>
}

impl ActionsListSelectedReposForOrgSecretParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            page: Some(page),
            per_page: self.per_page, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            page: self.page, 
            per_page: Some(per_page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListSelectedReposForOrgSecretParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List selected repositories for an organization variable](Actions::list_selected_repos_for_org_variable_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListSelectedReposForOrgVariableParams {
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>
}

impl ActionsListSelectedReposForOrgVariableParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            page: Some(page),
            per_page: self.per_page, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            page: self.page, 
            per_page: Some(per_page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListSelectedReposForOrgVariableParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List selected repositories enabled for GitHub Actions in an organization](Actions::list_selected_repositories_enabled_github_actions_organization_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List self-hosted runners for an organization](Actions::list_self_hosted_runners_for_org_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListSelfHostedRunnersForOrgParams<'req> {
    /// The name of a self-hosted runner.
    name: Option<&'req str>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl<'req> ActionsListSelfHostedRunnersForOrgParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The name of a self-hosted runner.
    pub fn name(self, name: &'req str) -> Self {
        Self {
            name: Some(name),
            per_page: self.per_page, 
            page: self.page, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            name: self.name, 
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            name: self.name, 
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListSelfHostedRunnersForOrgParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List self-hosted runners for a repository](Actions::list_self_hosted_runners_for_repo_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListSelfHostedRunnersForRepoParams<'req> {
    /// The name of a self-hosted runner.
    name: Option<&'req str>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl<'req> ActionsListSelfHostedRunnersForRepoParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The name of a self-hosted runner.
    pub fn name(self, name: &'req str) -> Self {
        Self {
            name: Some(name),
            per_page: self.per_page, 
            page: self.page, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            name: self.name, 
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            name: self.name, 
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListSelfHostedRunnersForRepoParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List workflow run artifacts](Actions::list_workflow_run_artifacts_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListWorkflowRunArtifactsParams<'req> {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The name field of an artifact. When specified, only artifacts with this name will be returned.
    name: Option<&'req str>
}

impl<'req> ActionsListWorkflowRunArtifactsParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
            name: self.name, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
            name: self.name, 
        }
    }

    /// The name field of an artifact. When specified, only artifacts with this name will be returned.
    pub fn name(self, name: &'req str) -> Self {
        Self {
            per_page: self.per_page, 
            page: self.page, 
            name: Some(name),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListWorkflowRunArtifactsParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List workflow runs for a workflow](Actions::list_workflow_runs_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListWorkflowRunsParams<'req> {
    /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
    actor: Option<&'req str>, 
    /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
    branch: Option<&'req str>, 
    /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
    event: Option<&'req str>, 
    /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
    status: Option<&'req str>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
    created: Option<chrono::DateTime<chrono::Utc>>, 
    /// If `true` pull requests are omitted from the response (empty array).
    exclude_pull_requests: Option<bool>, 
    /// Returns workflow runs with the `check_suite_id` that you specify.
    check_suite_id: Option<i32>, 
    /// Only returns workflow runs that are associated with the specified `head_sha`.
    head_sha: Option<&'req str>
}

impl<'req> ActionsListWorkflowRunsParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
    pub fn actor(self, actor: &'req str) -> Self {
        Self {
            actor: Some(actor),
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
    pub fn branch(self, branch: &'req str) -> Self {
        Self {
            actor: self.actor, 
            branch: Some(branch),
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
    pub fn event(self, event: &'req str) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: Some(event),
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
    pub fn status(self, status: &'req str) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: Some(status),
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: Some(per_page),
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: Some(page),
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
    pub fn created(self, created: chrono::DateTime<chrono::Utc>) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: Some(created),
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// If `true` pull requests are omitted from the response (empty array).
    pub fn exclude_pull_requests(self, exclude_pull_requests: bool) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: Some(exclude_pull_requests),
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow runs with the `check_suite_id` that you specify.
    pub fn check_suite_id(self, check_suite_id: i32) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: Some(check_suite_id),
            head_sha: self.head_sha, 
        }
    }

    /// Only returns workflow runs that are associated with the specified `head_sha`.
    pub fn head_sha(self, head_sha: &'req str) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: Some(head_sha),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListWorkflowRunsParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List workflow runs for a repository](Actions::list_workflow_runs_for_repo_async()) endpoint.
#[derive(Default, Serialize)]
pub struct ActionsListWorkflowRunsForRepoParams<'req> {
    /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
    actor: Option<&'req str>, 
    /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
    branch: Option<&'req str>, 
    /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
    event: Option<&'req str>, 
    /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
    status: Option<&'req str>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
    created: Option<chrono::DateTime<chrono::Utc>>, 
    /// If `true` pull requests are omitted from the response (empty array).
    exclude_pull_requests: Option<bool>, 
    /// Returns workflow runs with the `check_suite_id` that you specify.
    check_suite_id: Option<i32>, 
    /// Only returns workflow runs that are associated with the specified `head_sha`.
    head_sha: Option<&'req str>
}

impl<'req> ActionsListWorkflowRunsForRepoParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
    pub fn actor(self, actor: &'req str) -> Self {
        Self {
            actor: Some(actor),
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
    pub fn branch(self, branch: &'req str) -> Self {
        Self {
            actor: self.actor, 
            branch: Some(branch),
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
    pub fn event(self, event: &'req str) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: Some(event),
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
    pub fn status(self, status: &'req str) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: Some(status),
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: Some(per_page),
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: Some(page),
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
    pub fn created(self, created: chrono::DateTime<chrono::Utc>) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: Some(created),
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// If `true` pull requests are omitted from the response (empty array).
    pub fn exclude_pull_requests(self, exclude_pull_requests: bool) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: Some(exclude_pull_requests),
            check_suite_id: self.check_suite_id, 
            head_sha: self.head_sha, 
        }
    }

    /// Returns workflow runs with the `check_suite_id` that you specify.
    pub fn check_suite_id(self, check_suite_id: i32) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: Some(check_suite_id),
            head_sha: self.head_sha, 
        }
    }

    /// Only returns workflow runs that are associated with the specified `head_sha`.
    pub fn head_sha(self, head_sha: &'req str) -> Self {
        Self {
            actor: self.actor, 
            branch: self.branch, 
            event: self.event, 
            status: self.status, 
            per_page: self.per_page, 
            page: self.page, 
            created: self.created, 
            exclude_pull_requests: self.exclude_pull_requests, 
            check_suite_id: self.check_suite_id, 
            head_sha: Some(head_sha),
        }
    }
}

impl<'enc> From<&'enc PerPage> for ActionsListWorkflowRunsForRepoParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}

impl<'api, C: Client<Req = crate::adapters::Req>> Actions<'api, C> {
    /// ---
    ///
    /// # Add custom labels to a self-hosted runner for an organization
    ///
    /// Adds custom labels to a self-hosted runner configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for add_custom_labels_to_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    pub async fn add_custom_labels_to_self_hosted_runner_for_org_async(&self, org: &str, runner_id: i32, body: PostActionsAddCustomLabelsToSelfHostedRunnerForOrg) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsAddCustomLabelsToSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsAddCustomLabelsToSelfHostedRunnerForOrg::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsAddCustomLabelsToSelfHostedRunnerForOrgError::Status404(github_response.to_json_async().await?)),
                422 => Err(ActionsAddCustomLabelsToSelfHostedRunnerForOrgError::Status422(github_response.to_json_async().await?)),
                code => Err(ActionsAddCustomLabelsToSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Add custom labels to a self-hosted runner for an organization
    ///
    /// Adds custom labels to a self-hosted runner configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for add_custom_labels_to_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn add_custom_labels_to_self_hosted_runner_for_org(&self, org: &str, runner_id: i32, body: PostActionsAddCustomLabelsToSelfHostedRunnerForOrg) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsAddCustomLabelsToSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsAddCustomLabelsToSelfHostedRunnerForOrg::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsAddCustomLabelsToSelfHostedRunnerForOrgError::Status404(github_response.to_json()?)),
                422 => Err(ActionsAddCustomLabelsToSelfHostedRunnerForOrgError::Status422(github_response.to_json()?)),
                code => Err(ActionsAddCustomLabelsToSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Add custom labels to a self-hosted runner for a repository
    ///
    /// Adds custom labels to a self-hosted runner configured in a repository.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for add_custom_labels_to_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    pub async fn add_custom_labels_to_self_hosted_runner_for_repo_async(&self, owner: &str, repo: &str, runner_id: i32, body: PostActionsAddCustomLabelsToSelfHostedRunnerForRepo) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsAddCustomLabelsToSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsAddCustomLabelsToSelfHostedRunnerForRepo::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsAddCustomLabelsToSelfHostedRunnerForRepoError::Status404(github_response.to_json_async().await?)),
                422 => Err(ActionsAddCustomLabelsToSelfHostedRunnerForRepoError::Status422(github_response.to_json_async().await?)),
                code => Err(ActionsAddCustomLabelsToSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Add custom labels to a self-hosted runner for a repository
    ///
    /// Adds custom labels to a self-hosted runner configured in a repository.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for add_custom_labels_to_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn add_custom_labels_to_self_hosted_runner_for_repo(&self, owner: &str, repo: &str, runner_id: i32, body: PostActionsAddCustomLabelsToSelfHostedRunnerForRepo) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsAddCustomLabelsToSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsAddCustomLabelsToSelfHostedRunnerForRepo::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsAddCustomLabelsToSelfHostedRunnerForRepoError::Status404(github_response.to_json()?)),
                422 => Err(ActionsAddCustomLabelsToSelfHostedRunnerForRepoError::Status422(github_response.to_json()?)),
                code => Err(ActionsAddCustomLabelsToSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization secret when the `visibility` for
    /// repository access is set to `selected`. For more information about setting the visibility, see [Create or
    /// update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for add_selected_repo_to_org_secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret)
    ///
    /// ---
    pub async fn add_selected_repo_to_org_secret_async(&self, org: &str, secret_name: &str, repository_id: i32) -> Result<(), ActionsAddSelectedRepoToOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}/repositories/{}", super::GITHUB_BASE_API_URL, org, secret_name, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsAddSelectedRepoToOrgSecretError::Status409),
                code => Err(ActionsAddSelectedRepoToOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization secret when the `visibility` for
    /// repository access is set to `selected`. For more information about setting the visibility, see [Create or
    /// update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for add_selected_repo_to_org_secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn add_selected_repo_to_org_secret(&self, org: &str, secret_name: &str, repository_id: i32) -> Result<(), ActionsAddSelectedRepoToOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}/repositories/{}", super::GITHUB_BASE_API_URL, org, secret_name, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsAddSelectedRepoToOrgSecretError::Status409),
                code => Err(ActionsAddSelectedRepoToOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Add selected repository to an organization variable
    ///
    /// Adds a repository to an organization variable that is available to selected repositories.
    /// Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for add_selected_repo_to_org_variable](https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable)
    ///
    /// ---
    pub async fn add_selected_repo_to_org_variable_async(&self, org: &str, name: &str, repository_id: i32) -> Result<(), ActionsAddSelectedRepoToOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}/repositories/{}", super::GITHUB_BASE_API_URL, org, name, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsAddSelectedRepoToOrgVariableError::Status409),
                code => Err(ActionsAddSelectedRepoToOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Add selected repository to an organization variable
    ///
    /// Adds a repository to an organization variable that is available to selected repositories.
    /// Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for add_selected_repo_to_org_variable](https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn add_selected_repo_to_org_variable(&self, org: &str, name: &str, repository_id: i32) -> Result<(), ActionsAddSelectedRepoToOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}/repositories/{}", super::GITHUB_BASE_API_URL, org, name, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsAddSelectedRepoToOrgVariableError::Status409),
                code => Err(ActionsAddSelectedRepoToOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Approve a workflow run for a fork pull request
    ///
    /// Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for approve_workflow_run](https://docs.github.com/rest/actions/workflow-runs#approve-a-workflow-run-for-a-fork-pull-request)
    ///
    /// ---
    pub async fn approve_workflow_run_async(&self, owner: &str, repo: &str, run_id: i32) -> Result<EmptyObject, ActionsApproveWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/approve", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsApproveWorkflowRunError::Status404(github_response.to_json_async().await?)),
                403 => Err(ActionsApproveWorkflowRunError::Status403(github_response.to_json_async().await?)),
                code => Err(ActionsApproveWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Approve a workflow run for a fork pull request
    ///
    /// Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for approve_workflow_run](https://docs.github.com/rest/actions/workflow-runs#approve-a-workflow-run-for-a-fork-pull-request)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn approve_workflow_run(&self, owner: &str, repo: &str, run_id: i32) -> Result<EmptyObject, ActionsApproveWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/approve", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsApproveWorkflowRunError::Status404(github_response.to_json()?)),
                403 => Err(ActionsApproveWorkflowRunError::Status403(github_response.to_json()?)),
                code => Err(ActionsApproveWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Cancel a workflow run
    ///
    /// Cancels a workflow run using its `id`.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for cancel_workflow_run](https://docs.github.com/rest/actions/workflow-runs#cancel-a-workflow-run)
    ///
    /// ---
    pub async fn cancel_workflow_run_async(&self, owner: &str, repo: &str, run_id: i32) -> Result<EmptyObject, ActionsCancelWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/cancel", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsCancelWorkflowRunError::Status409(github_response.to_json_async().await?)),
                code => Err(ActionsCancelWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Cancel a workflow run
    ///
    /// Cancels a workflow run using its `id`.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for cancel_workflow_run](https://docs.github.com/rest/actions/workflow-runs#cancel-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn cancel_workflow_run(&self, owner: &str, repo: &str, run_id: i32) -> Result<EmptyObject, ActionsCancelWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/cancel", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsCancelWorkflowRunError::Status409(github_response.to_json()?)),
                code => Err(ActionsCancelWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create an environment variable
    ///
    /// Create an environment variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_environment_variable](https://docs.github.com/rest/actions/variables#create-an-environment-variable)
    ///
    /// ---
    pub async fn create_environment_variable_async(&self, owner: &str, repo: &str, environment_name: &str, body: PostActionsCreateEnvironmentVariable) -> Result<EmptyObject, ActionsCreateEnvironmentVariableError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/variables", super::GITHUB_BASE_API_URL, owner, repo, environment_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsCreateEnvironmentVariable::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateEnvironmentVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create an environment variable
    ///
    /// Create an environment variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_environment_variable](https://docs.github.com/rest/actions/variables#create-an-environment-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_environment_variable(&self, owner: &str, repo: &str, environment_name: &str, body: PostActionsCreateEnvironmentVariable) -> Result<EmptyObject, ActionsCreateEnvironmentVariableError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/variables", super::GITHUB_BASE_API_URL, owner, repo, environment_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsCreateEnvironmentVariable::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateEnvironmentVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create or update an environment secret
    ///
    /// Creates or updates an environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_or_update_environment_secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-environment-secret)
    ///
    /// ---
    pub async fn create_or_update_environment_secret_async(&self, owner: &str, repo: &str, environment_name: &str, secret_name: &str, body: PutActionsCreateOrUpdateEnvironmentSecret) -> Result<EmptyObject, ActionsCreateOrUpdateEnvironmentSecretError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, environment_name, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsCreateOrUpdateEnvironmentSecret::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                204 => Err(ActionsCreateOrUpdateEnvironmentSecretError::Status204),
                code => Err(ActionsCreateOrUpdateEnvironmentSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create or update an environment secret
    ///
    /// Creates or updates an environment secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_or_update_environment_secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-environment-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_or_update_environment_secret(&self, owner: &str, repo: &str, environment_name: &str, secret_name: &str, body: PutActionsCreateOrUpdateEnvironmentSecret) -> Result<EmptyObject, ActionsCreateOrUpdateEnvironmentSecretError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, environment_name, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsCreateOrUpdateEnvironmentSecret::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                204 => Err(ActionsCreateOrUpdateEnvironmentSecretError::Status204),
                code => Err(ActionsCreateOrUpdateEnvironmentSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create or update an organization secret
    ///
    /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_or_update_org_secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret)
    ///
    /// ---
    pub async fn create_or_update_org_secret_async(&self, org: &str, secret_name: &str, body: PutActionsCreateOrUpdateOrgSecret) -> Result<EmptyObject, ActionsCreateOrUpdateOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, org, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsCreateOrUpdateOrgSecret::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                204 => Err(ActionsCreateOrUpdateOrgSecretError::Status204),
                code => Err(ActionsCreateOrUpdateOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create or update an organization secret
    ///
    /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_or_update_org_secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_or_update_org_secret(&self, org: &str, secret_name: &str, body: PutActionsCreateOrUpdateOrgSecret) -> Result<EmptyObject, ActionsCreateOrUpdateOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, org, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsCreateOrUpdateOrgSecret::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                204 => Err(ActionsCreateOrUpdateOrgSecretError::Status204),
                code => Err(ActionsCreateOrUpdateOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create or update a repository secret
    ///
    /// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_or_update_repo_secret](https://docs.github.com/rest/actions/secrets#create-or-update-a-repository-secret)
    ///
    /// ---
    pub async fn create_or_update_repo_secret_async(&self, owner: &str, repo: &str, secret_name: &str, body: PutActionsCreateOrUpdateRepoSecret) -> Result<EmptyObject, ActionsCreateOrUpdateRepoSecretError> {

        let request_uri = format!("{}/repos/{}/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsCreateOrUpdateRepoSecret::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                204 => Err(ActionsCreateOrUpdateRepoSecretError::Status204),
                code => Err(ActionsCreateOrUpdateRepoSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create or update a repository secret
    ///
    /// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_or_update_repo_secret](https://docs.github.com/rest/actions/secrets#create-or-update-a-repository-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_or_update_repo_secret(&self, owner: &str, repo: &str, secret_name: &str, body: PutActionsCreateOrUpdateRepoSecret) -> Result<EmptyObject, ActionsCreateOrUpdateRepoSecretError> {

        let request_uri = format!("{}/repos/{}/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsCreateOrUpdateRepoSecret::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                204 => Err(ActionsCreateOrUpdateRepoSecretError::Status204),
                code => Err(ActionsCreateOrUpdateRepoSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create an organization variable
    ///
    /// Creates an organization variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_org_variable](https://docs.github.com/rest/actions/variables#create-an-organization-variable)
    ///
    /// ---
    pub async fn create_org_variable_async(&self, org: &str, body: PostActionsCreateOrgVariable) -> Result<EmptyObject, ActionsCreateOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsCreateOrgVariable::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create an organization variable
    ///
    /// Creates an organization variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_org_variable](https://docs.github.com/rest/actions/variables#create-an-organization-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_org_variable(&self, org: &str, body: PostActionsCreateOrgVariable) -> Result<EmptyObject, ActionsCreateOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsCreateOrgVariable::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a registration token for an organization
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    /// 
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    /// 
    /// ```nocompile
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_registration_token_for_org](https://docs.github.com/rest/actions/self-hosted-runners#create-a-registration-token-for-an-organization)
    ///
    /// ---
    pub async fn create_registration_token_for_org_async(&self, org: &str) -> Result<AuthenticationToken, ActionsCreateRegistrationTokenForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/registration-token", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRegistrationTokenForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a registration token for an organization
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    /// 
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    /// 
    /// ```nocompile
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_registration_token_for_org](https://docs.github.com/rest/actions/self-hosted-runners#create-a-registration-token-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_registration_token_for_org(&self, org: &str) -> Result<AuthenticationToken, ActionsCreateRegistrationTokenForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/registration-token", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRegistrationTokenForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a registration token for a repository
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    /// 
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    /// 
    /// ```nocompile
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_registration_token_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#create-a-registration-token-for-a-repository)
    ///
    /// ---
    pub async fn create_registration_token_for_repo_async(&self, owner: &str, repo: &str) -> Result<AuthenticationToken, ActionsCreateRegistrationTokenForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/registration-token", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRegistrationTokenForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a registration token for a repository
    ///
    /// Returns a token that you can pass to the `config` script. The token expires after one hour.
    /// 
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
    /// 
    /// ```nocompile
    /// ./config.sh --url https://github.com/octo-org --token TOKEN
    /// ```
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_registration_token_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#create-a-registration-token-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_registration_token_for_repo(&self, owner: &str, repo: &str) -> Result<AuthenticationToken, ActionsCreateRegistrationTokenForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/registration-token", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRegistrationTokenForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a remove token for an organization
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
    /// 
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    /// 
    /// ```nocompile
    /// ./config.sh remove --token TOKEN
    /// ```
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_remove_token_for_org](https://docs.github.com/rest/actions/self-hosted-runners#create-a-remove-token-for-an-organization)
    ///
    /// ---
    pub async fn create_remove_token_for_org_async(&self, org: &str) -> Result<AuthenticationToken, ActionsCreateRemoveTokenForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/remove-token", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRemoveTokenForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a remove token for an organization
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
    /// 
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    /// 
    /// ```nocompile
    /// ./config.sh remove --token TOKEN
    /// ```
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_remove_token_for_org](https://docs.github.com/rest/actions/self-hosted-runners#create-a-remove-token-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_remove_token_for_org(&self, org: &str) -> Result<AuthenticationToken, ActionsCreateRemoveTokenForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/remove-token", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRemoveTokenForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a remove token for a repository
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.
    /// 
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    /// 
    /// ```nocompile
    /// ./config.sh remove --token TOKEN
    /// ```
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_remove_token_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#create-a-remove-token-for-a-repository)
    ///
    /// ---
    pub async fn create_remove_token_for_repo_async(&self, owner: &str, repo: &str) -> Result<AuthenticationToken, ActionsCreateRemoveTokenForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/remove-token", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRemoveTokenForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a remove token for a repository
    ///
    /// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.
    /// 
    /// For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
    /// 
    /// ```nocompile
    /// ./config.sh remove --token TOKEN
    /// ```
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_remove_token_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#create-a-remove-token-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_remove_token_for_repo(&self, owner: &str, repo: &str) -> Result<AuthenticationToken, ActionsCreateRemoveTokenForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/remove-token", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRemoveTokenForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a repository variable
    ///
    /// Creates a repository variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_repo_variable](https://docs.github.com/rest/actions/variables#create-a-repository-variable)
    ///
    /// ---
    pub async fn create_repo_variable_async(&self, owner: &str, repo: &str, body: PostActionsCreateRepoVariable) -> Result<EmptyObject, ActionsCreateRepoVariableError> {

        let request_uri = format!("{}/repos/{}/{}/actions/variables", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsCreateRepoVariable::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRepoVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a repository variable
    ///
    /// Creates a repository variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_repo_variable](https://docs.github.com/rest/actions/variables#create-a-repository-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_repo_variable(&self, owner: &str, repo: &str, body: PostActionsCreateRepoVariable) -> Result<EmptyObject, ActionsCreateRepoVariableError> {

        let request_uri = format!("{}/repos/{}/{}/actions/variables", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsCreateRepoVariable::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateRepoVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a workflow dispatch event
    ///
    /// You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    /// 
    /// You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_workflow_dispatch](https://docs.github.com/rest/actions/workflows#create-a-workflow-dispatch-event)
    ///
    /// ---
    pub async fn create_workflow_dispatch_async(&self, owner: &str, repo: &str, workflow_id: WorkflowId, body: PostActionsCreateWorkflowDispatch) -> Result<(), ActionsCreateWorkflowDispatchError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/dispatches", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsCreateWorkflowDispatch::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateWorkflowDispatchError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create a workflow dispatch event
    ///
    /// You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    /// 
    /// You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_workflow_dispatch](https://docs.github.com/rest/actions/workflows#create-a-workflow-dispatch-event)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_workflow_dispatch(&self, owner: &str, repo: &str, workflow_id: WorkflowId, body: PostActionsCreateWorkflowDispatch) -> Result<(), ActionsCreateWorkflowDispatchError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/dispatches", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsCreateWorkflowDispatch::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsCreateWorkflowDispatchError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a GitHub Actions cache for a repository (using a cache ID)
    ///
    /// Deletes a GitHub Actions cache for a repository, using a cache ID.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_actions_cache_by_id](https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id)
    ///
    /// ---
    pub async fn delete_actions_cache_by_id_async(&self, owner: &str, repo: &str, cache_id: i32) -> Result<(), ActionsDeleteActionsCacheByIdError> {

        let request_uri = format!("{}/repos/{}/{}/actions/caches/{}", super::GITHUB_BASE_API_URL, owner, repo, cache_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteActionsCacheByIdError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a GitHub Actions cache for a repository (using a cache ID)
    ///
    /// Deletes a GitHub Actions cache for a repository, using a cache ID.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_actions_cache_by_id](https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_actions_cache_by_id(&self, owner: &str, repo: &str, cache_id: i32) -> Result<(), ActionsDeleteActionsCacheByIdError> {

        let request_uri = format!("{}/repos/{}/{}/actions/caches/{}", super::GITHUB_BASE_API_URL, owner, repo, cache_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteActionsCacheByIdError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete GitHub Actions caches for a repository (using a cache key)
    ///
    /// Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_actions_cache_by_key](https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key)
    ///
    /// ---
    pub async fn delete_actions_cache_by_key_async(&self, owner: &str, repo: &str, query_params: impl Into<ActionsDeleteActionsCacheByKeyParams<'api>>) -> Result<ActionsCacheList, ActionsDeleteActionsCacheByKeyError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/caches", super::GITHUB_BASE_API_URL, owner, repo);

        request_uri.push_str("?");
        request_uri.push_str(&serde_urlencoded::to_string(query_params.into())?);

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteActionsCacheByKeyError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete GitHub Actions caches for a repository (using a cache key)
    ///
    /// Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_actions_cache_by_key](https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_actions_cache_by_key(&self, owner: &str, repo: &str, query_params: impl Into<ActionsDeleteActionsCacheByKeyParams<'api>>) -> Result<ActionsCacheList, ActionsDeleteActionsCacheByKeyError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/caches", super::GITHUB_BASE_API_URL, owner, repo);

        request_uri.push_str("?");
        let qp: ActionsDeleteActionsCacheByKeyParams = query_params.into();
        request_uri.push_str(&serde_urlencoded::to_string(qp)?);

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteActionsCacheByKeyError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an artifact
    ///
    /// Deletes an artifact for a workflow run.
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_artifact](https://docs.github.com/rest/actions/artifacts#delete-an-artifact)
    ///
    /// ---
    pub async fn delete_artifact_async(&self, owner: &str, repo: &str, artifact_id: i32) -> Result<(), ActionsDeleteArtifactError> {

        let request_uri = format!("{}/repos/{}/{}/actions/artifacts/{}", super::GITHUB_BASE_API_URL, owner, repo, artifact_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteArtifactError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an artifact
    ///
    /// Deletes an artifact for a workflow run.
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_artifact](https://docs.github.com/rest/actions/artifacts#delete-an-artifact)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_artifact(&self, owner: &str, repo: &str, artifact_id: i32) -> Result<(), ActionsDeleteArtifactError> {

        let request_uri = format!("{}/repos/{}/{}/actions/artifacts/{}", super::GITHUB_BASE_API_URL, owner, repo, artifact_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteArtifactError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an environment secret
    ///
    /// Deletes a secret in an environment using the secret name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_environment_secret](https://docs.github.com/rest/actions/secrets#delete-an-environment-secret)
    ///
    /// ---
    pub async fn delete_environment_secret_async(&self, owner: &str, repo: &str, environment_name: &str, secret_name: &str) -> Result<(), ActionsDeleteEnvironmentSecretError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, environment_name, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteEnvironmentSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an environment secret
    ///
    /// Deletes a secret in an environment using the secret name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_environment_secret](https://docs.github.com/rest/actions/secrets#delete-an-environment-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_environment_secret(&self, owner: &str, repo: &str, environment_name: &str, secret_name: &str) -> Result<(), ActionsDeleteEnvironmentSecretError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, environment_name, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteEnvironmentSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an environment variable
    ///
    /// Deletes an environment variable using the variable name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_environment_variable](https://docs.github.com/rest/actions/variables#delete-an-environment-variable)
    ///
    /// ---
    pub async fn delete_environment_variable_async(&self, owner: &str, repo: &str, name: &str, environment_name: &str) -> Result<(), ActionsDeleteEnvironmentVariableError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name, environment_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteEnvironmentVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an environment variable
    ///
    /// Deletes an environment variable using the variable name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_environment_variable](https://docs.github.com/rest/actions/variables#delete-an-environment-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_environment_variable(&self, owner: &str, repo: &str, name: &str, environment_name: &str) -> Result<(), ActionsDeleteEnvironmentVariableError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name, environment_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteEnvironmentVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an organization secret
    ///
    /// Deletes a secret in an organization using the secret name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_org_secret](https://docs.github.com/rest/actions/secrets#delete-an-organization-secret)
    ///
    /// ---
    pub async fn delete_org_secret_async(&self, org: &str, secret_name: &str) -> Result<(), ActionsDeleteOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, org, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an organization secret
    ///
    /// Deletes a secret in an organization using the secret name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_org_secret](https://docs.github.com/rest/actions/secrets#delete-an-organization-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_org_secret(&self, org: &str, secret_name: &str) -> Result<(), ActionsDeleteOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, org, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an organization variable
    ///
    /// Deletes an organization variable using the variable name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_org_variable](https://docs.github.com/rest/actions/variables#delete-an-organization-variable)
    ///
    /// ---
    pub async fn delete_org_variable_async(&self, org: &str, name: &str) -> Result<(), ActionsDeleteOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, org, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete an organization variable
    ///
    /// Deletes an organization variable using the variable name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_org_variable](https://docs.github.com/rest/actions/variables#delete-an-organization-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_org_variable(&self, org: &str, name: &str) -> Result<(), ActionsDeleteOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, org, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a repository secret
    ///
    /// Deletes a secret in a repository using the secret name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_repo_secret](https://docs.github.com/rest/actions/secrets#delete-a-repository-secret)
    ///
    /// ---
    pub async fn delete_repo_secret_async(&self, owner: &str, repo: &str, secret_name: &str) -> Result<(), ActionsDeleteRepoSecretError> {

        let request_uri = format!("{}/repos/{}/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteRepoSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a repository secret
    ///
    /// Deletes a secret in a repository using the secret name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_repo_secret](https://docs.github.com/rest/actions/secrets#delete-a-repository-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_repo_secret(&self, owner: &str, repo: &str, secret_name: &str) -> Result<(), ActionsDeleteRepoSecretError> {

        let request_uri = format!("{}/repos/{}/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteRepoSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a repository variable
    ///
    /// Deletes a repository variable using the variable name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_repo_variable](https://docs.github.com/rest/actions/variables#delete-a-repository-variable)
    ///
    /// ---
    pub async fn delete_repo_variable_async(&self, owner: &str, repo: &str, name: &str) -> Result<(), ActionsDeleteRepoVariableError> {

        let request_uri = format!("{}/repos/{}/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteRepoVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a repository variable
    ///
    /// Deletes a repository variable using the variable name.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_repo_variable](https://docs.github.com/rest/actions/variables#delete-a-repository-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_repo_variable(&self, owner: &str, repo: &str, name: &str) -> Result<(), ActionsDeleteRepoVariableError> {

        let request_uri = format!("{}/repos/{}/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteRepoVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a self-hosted runner from an organization
    ///
    /// Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_self_hosted_runner_from_org](https://docs.github.com/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-an-organization)
    ///
    /// ---
    pub async fn delete_self_hosted_runner_from_org_async(&self, org: &str, runner_id: i32) -> Result<(), ActionsDeleteSelfHostedRunnerFromOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteSelfHostedRunnerFromOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a self-hosted runner from an organization
    ///
    /// Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_self_hosted_runner_from_org](https://docs.github.com/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_self_hosted_runner_from_org(&self, org: &str, runner_id: i32) -> Result<(), ActionsDeleteSelfHostedRunnerFromOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteSelfHostedRunnerFromOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a self-hosted runner from a repository
    ///
    /// Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_self_hosted_runner_from_repo](https://docs.github.com/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-a-repository)
    ///
    /// ---
    pub async fn delete_self_hosted_runner_from_repo_async(&self, owner: &str, repo: &str, runner_id: i32) -> Result<(), ActionsDeleteSelfHostedRunnerFromRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteSelfHostedRunnerFromRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a self-hosted runner from a repository
    ///
    /// Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_self_hosted_runner_from_repo](https://docs.github.com/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_self_hosted_runner_from_repo(&self, owner: &str, repo: &str, runner_id: i32) -> Result<(), ActionsDeleteSelfHostedRunnerFromRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteSelfHostedRunnerFromRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a workflow run
    ///
    /// Deletes a specific workflow run.
    /// 
    /// Anyone with write access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_workflow_run](https://docs.github.com/rest/actions/workflow-runs#delete-a-workflow-run)
    ///
    /// ---
    pub async fn delete_workflow_run_async(&self, owner: &str, repo: &str, run_id: i32) -> Result<(), ActionsDeleteWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete a workflow run
    ///
    /// Deletes a specific workflow run.
    /// 
    /// Anyone with write access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_workflow_run](https://docs.github.com/rest/actions/workflow-runs#delete-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_workflow_run(&self, owner: &str, repo: &str, run_id: i32) -> Result<(), ActionsDeleteWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDeleteWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete workflow run logs
    ///
    /// Deletes all logs for a workflow run.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_workflow_run_logs](https://docs.github.com/rest/actions/workflow-runs#delete-workflow-run-logs)
    ///
    /// ---
    pub async fn delete_workflow_run_logs_async(&self, owner: &str, repo: &str, run_id: i32) -> Result<(), ActionsDeleteWorkflowRunLogsError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/logs", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(ActionsDeleteWorkflowRunLogsError::Status403(github_response.to_json_async().await?)),
                500 => Err(ActionsDeleteWorkflowRunLogsError::Status500(github_response.to_json_async().await?)),
                code => Err(ActionsDeleteWorkflowRunLogsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Delete workflow run logs
    ///
    /// Deletes all logs for a workflow run.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_workflow_run_logs](https://docs.github.com/rest/actions/workflow-runs#delete-workflow-run-logs)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_workflow_run_logs(&self, owner: &str, repo: &str, run_id: i32) -> Result<(), ActionsDeleteWorkflowRunLogsError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/logs", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(ActionsDeleteWorkflowRunLogsError::Status403(github_response.to_json()?)),
                500 => Err(ActionsDeleteWorkflowRunLogsError::Status500(github_response.to_json()?)),
                code => Err(ActionsDeleteWorkflowRunLogsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Disable a selected repository for GitHub Actions in an organization
    ///
    /// Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for disable_selected_repository_github_actions_organization](https://docs.github.com/rest/actions/permissions#disable-a-selected-repository-for-github-actions-in-an-organization)
    ///
    /// ---
    pub async fn disable_selected_repository_github_actions_organization_async(&self, org: &str, repository_id: i32) -> Result<(), ActionsDisableSelectedRepositoryGithubActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/repositories/{}", super::GITHUB_BASE_API_URL, org, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDisableSelectedRepositoryGithubActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Disable a selected repository for GitHub Actions in an organization
    ///
    /// Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for disable_selected_repository_github_actions_organization](https://docs.github.com/rest/actions/permissions#disable-a-selected-repository-for-github-actions-in-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn disable_selected_repository_github_actions_organization(&self, org: &str, repository_id: i32) -> Result<(), ActionsDisableSelectedRepositoryGithubActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/repositories/{}", super::GITHUB_BASE_API_URL, org, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDisableSelectedRepositoryGithubActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Disable a workflow
    ///
    /// Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for disable_workflow](https://docs.github.com/rest/actions/workflows#disable-a-workflow)
    ///
    /// ---
    pub async fn disable_workflow_async(&self, owner: &str, repo: &str, workflow_id: WorkflowId) -> Result<(), ActionsDisableWorkflowError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/disable", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDisableWorkflowError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Disable a workflow
    ///
    /// Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for disable_workflow](https://docs.github.com/rest/actions/workflows#disable-a-workflow)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn disable_workflow(&self, owner: &str, repo: &str, workflow_id: WorkflowId) -> Result<(), ActionsDisableWorkflowError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/disable", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsDisableWorkflowError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Download an artifact
    ///
    /// Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
    /// the response header to find the URL for the download. The `:archive_format` must be `zip`.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for download_artifact](https://docs.github.com/rest/actions/artifacts#download-an-artifact)
    ///
    /// ---
    pub async fn download_artifact_async(&self, owner: &str, repo: &str, artifact_id: i32, archive_format: &str) -> Result<(), ActionsDownloadArtifactError> {

        let request_uri = format!("{}/repos/{}/{}/actions/artifacts/{}/{}", super::GITHUB_BASE_API_URL, owner, repo, artifact_id, archive_format);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                302 => Err(ActionsDownloadArtifactError::Status302),
                410 => Err(ActionsDownloadArtifactError::Status410(github_response.to_json_async().await?)),
                code => Err(ActionsDownloadArtifactError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Download an artifact
    ///
    /// Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
    /// the response header to find the URL for the download. The `:archive_format` must be `zip`.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for download_artifact](https://docs.github.com/rest/actions/artifacts#download-an-artifact)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn download_artifact(&self, owner: &str, repo: &str, artifact_id: i32, archive_format: &str) -> Result<(), ActionsDownloadArtifactError> {

        let request_uri = format!("{}/repos/{}/{}/actions/artifacts/{}/{}", super::GITHUB_BASE_API_URL, owner, repo, artifact_id, archive_format);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                302 => Err(ActionsDownloadArtifactError::Status302),
                410 => Err(ActionsDownloadArtifactError::Status410(github_response.to_json()?)),
                code => Err(ActionsDownloadArtifactError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Download job logs for a workflow run
    ///
    /// Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
    /// for `Location:` in the response header to find the URL for the download.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for download_job_logs_for_workflow_run](https://docs.github.com/rest/actions/workflow-jobs#download-job-logs-for-a-workflow-run)
    ///
    /// ---
    pub async fn download_job_logs_for_workflow_run_async(&self, owner: &str, repo: &str, job_id: i32) -> Result<(), ActionsDownloadJobLogsForWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/jobs/{}/logs", super::GITHUB_BASE_API_URL, owner, repo, job_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                302 => Err(ActionsDownloadJobLogsForWorkflowRunError::Status302),
                code => Err(ActionsDownloadJobLogsForWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Download job logs for a workflow run
    ///
    /// Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
    /// for `Location:` in the response header to find the URL for the download.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for download_job_logs_for_workflow_run](https://docs.github.com/rest/actions/workflow-jobs#download-job-logs-for-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn download_job_logs_for_workflow_run(&self, owner: &str, repo: &str, job_id: i32) -> Result<(), ActionsDownloadJobLogsForWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/jobs/{}/logs", super::GITHUB_BASE_API_URL, owner, repo, job_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                302 => Err(ActionsDownloadJobLogsForWorkflowRunError::Status302),
                code => Err(ActionsDownloadJobLogsForWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Download workflow run attempt logs
    ///
    /// Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
    /// 1 minute. Look for `Location:` in the response header to find the URL for the download.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for download_workflow_run_attempt_logs](https://docs.github.com/rest/actions/workflow-runs#download-workflow-run-attempt-logs)
    ///
    /// ---
    pub async fn download_workflow_run_attempt_logs_async(&self, owner: &str, repo: &str, run_id: i32, attempt_number: i32) -> Result<(), ActionsDownloadWorkflowRunAttemptLogsError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/attempts/{}/logs", super::GITHUB_BASE_API_URL, owner, repo, run_id, attempt_number);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                302 => Err(ActionsDownloadWorkflowRunAttemptLogsError::Status302),
                code => Err(ActionsDownloadWorkflowRunAttemptLogsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Download workflow run attempt logs
    ///
    /// Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
    /// 1 minute. Look for `Location:` in the response header to find the URL for the download.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for download_workflow_run_attempt_logs](https://docs.github.com/rest/actions/workflow-runs#download-workflow-run-attempt-logs)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn download_workflow_run_attempt_logs(&self, owner: &str, repo: &str, run_id: i32, attempt_number: i32) -> Result<(), ActionsDownloadWorkflowRunAttemptLogsError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/attempts/{}/logs", super::GITHUB_BASE_API_URL, owner, repo, run_id, attempt_number);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                302 => Err(ActionsDownloadWorkflowRunAttemptLogsError::Status302),
                code => Err(ActionsDownloadWorkflowRunAttemptLogsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Download workflow run logs
    ///
    /// Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
    /// `Location:` in the response header to find the URL for the download.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for download_workflow_run_logs](https://docs.github.com/rest/actions/workflow-runs#download-workflow-run-logs)
    ///
    /// ---
    pub async fn download_workflow_run_logs_async(&self, owner: &str, repo: &str, run_id: i32) -> Result<(), ActionsDownloadWorkflowRunLogsError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/logs", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                302 => Err(ActionsDownloadWorkflowRunLogsError::Status302),
                code => Err(ActionsDownloadWorkflowRunLogsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Download workflow run logs
    ///
    /// Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
    /// `Location:` in the response header to find the URL for the download.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for download_workflow_run_logs](https://docs.github.com/rest/actions/workflow-runs#download-workflow-run-logs)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn download_workflow_run_logs(&self, owner: &str, repo: &str, run_id: i32) -> Result<(), ActionsDownloadWorkflowRunLogsError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/logs", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                302 => Err(ActionsDownloadWorkflowRunLogsError::Status302),
                code => Err(ActionsDownloadWorkflowRunLogsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Enable a selected repository for GitHub Actions in an organization
    ///
    /// Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for enable_selected_repository_github_actions_organization](https://docs.github.com/rest/actions/permissions#enable-a-selected-repository-for-github-actions-in-an-organization)
    ///
    /// ---
    pub async fn enable_selected_repository_github_actions_organization_async(&self, org: &str, repository_id: i32) -> Result<(), ActionsEnableSelectedRepositoryGithubActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/repositories/{}", super::GITHUB_BASE_API_URL, org, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsEnableSelectedRepositoryGithubActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Enable a selected repository for GitHub Actions in an organization
    ///
    /// Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for enable_selected_repository_github_actions_organization](https://docs.github.com/rest/actions/permissions#enable-a-selected-repository-for-github-actions-in-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn enable_selected_repository_github_actions_organization(&self, org: &str, repository_id: i32) -> Result<(), ActionsEnableSelectedRepositoryGithubActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/repositories/{}", super::GITHUB_BASE_API_URL, org, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsEnableSelectedRepositoryGithubActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Enable a workflow
    ///
    /// Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for enable_workflow](https://docs.github.com/rest/actions/workflows#enable-a-workflow)
    ///
    /// ---
    pub async fn enable_workflow_async(&self, owner: &str, repo: &str, workflow_id: WorkflowId) -> Result<(), ActionsEnableWorkflowError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/enable", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsEnableWorkflowError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Enable a workflow
    ///
    /// Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for enable_workflow](https://docs.github.com/rest/actions/workflows#enable-a-workflow)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn enable_workflow(&self, owner: &str, repo: &str, workflow_id: WorkflowId) -> Result<(), ActionsEnableWorkflowError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/enable", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsEnableWorkflowError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Force cancel a workflow run
    ///
    /// Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.
    /// You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for force_cancel_workflow_run](https://docs.github.com/rest/actions/workflow-runs#force-cancel-a-workflow-run)
    ///
    /// ---
    pub async fn force_cancel_workflow_run_async(&self, owner: &str, repo: &str, run_id: i32) -> Result<EmptyObject, ActionsForceCancelWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/force-cancel", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsForceCancelWorkflowRunError::Status409(github_response.to_json_async().await?)),
                code => Err(ActionsForceCancelWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Force cancel a workflow run
    ///
    /// Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.
    /// You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for force_cancel_workflow_run](https://docs.github.com/rest/actions/workflow-runs#force-cancel-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn force_cancel_workflow_run(&self, owner: &str, repo: &str, run_id: i32) -> Result<EmptyObject, ActionsForceCancelWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/force-cancel", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsForceCancelWorkflowRunError::Status409(github_response.to_json()?)),
                code => Err(ActionsForceCancelWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create configuration for a just-in-time runner for an organization
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    /// 
    /// The authenticated user must have admin access to the organization.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for generate_runner_jitconfig_for_org](https://docs.github.com/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-an-organization)
    ///
    /// ---
    pub async fn generate_runner_jitconfig_for_org_async(&self, org: &str, body: PostActionsGenerateRunnerJitconfigForOrg) -> Result<PostActionsGenerateRunnerJitconfigForRepoResponse201, ActionsGenerateRunnerJitconfigForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/generate-jitconfig", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsGenerateRunnerJitconfigForOrg::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsGenerateRunnerJitconfigForOrgError::Status404(github_response.to_json_async().await?)),
                422 => Err(ActionsGenerateRunnerJitconfigForOrgError::Status422(github_response.to_json_async().await?)),
                code => Err(ActionsGenerateRunnerJitconfigForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create configuration for a just-in-time runner for an organization
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    /// 
    /// The authenticated user must have admin access to the organization.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for generate_runner_jitconfig_for_org](https://docs.github.com/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn generate_runner_jitconfig_for_org(&self, org: &str, body: PostActionsGenerateRunnerJitconfigForOrg) -> Result<PostActionsGenerateRunnerJitconfigForRepoResponse201, ActionsGenerateRunnerJitconfigForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/generate-jitconfig", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsGenerateRunnerJitconfigForOrg::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsGenerateRunnerJitconfigForOrgError::Status404(github_response.to_json()?)),
                422 => Err(ActionsGenerateRunnerJitconfigForOrgError::Status422(github_response.to_json()?)),
                code => Err(ActionsGenerateRunnerJitconfigForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create configuration for a just-in-time runner for a repository
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    /// 
    /// The authenticated user must have admin access to the repository.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for generate_runner_jitconfig_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-a-repository)
    ///
    /// ---
    pub async fn generate_runner_jitconfig_for_repo_async(&self, owner: &str, repo: &str, body: PostActionsGenerateRunnerJitconfigForRepo) -> Result<PostActionsGenerateRunnerJitconfigForRepoResponse201, ActionsGenerateRunnerJitconfigForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/generate-jitconfig", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsGenerateRunnerJitconfigForRepo::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsGenerateRunnerJitconfigForRepoError::Status404(github_response.to_json_async().await?)),
                422 => Err(ActionsGenerateRunnerJitconfigForRepoError::Status422(github_response.to_json_async().await?)),
                code => Err(ActionsGenerateRunnerJitconfigForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Create configuration for a just-in-time runner for a repository
    ///
    /// Generates a configuration that can be passed to the runner application at startup.
    /// 
    /// The authenticated user must have admin access to the repository.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for generate_runner_jitconfig_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn generate_runner_jitconfig_for_repo(&self, owner: &str, repo: &str, body: PostActionsGenerateRunnerJitconfigForRepo) -> Result<PostActionsGenerateRunnerJitconfigForRepoResponse201, ActionsGenerateRunnerJitconfigForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/generate-jitconfig", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsGenerateRunnerJitconfigForRepo::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsGenerateRunnerJitconfigForRepoError::Status404(github_response.to_json()?)),
                422 => Err(ActionsGenerateRunnerJitconfigForRepoError::Status422(github_response.to_json()?)),
                code => Err(ActionsGenerateRunnerJitconfigForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List GitHub Actions caches for a repository
    ///
    /// Lists the GitHub Actions caches for a repository.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_actions_cache_list](https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository)
    ///
    /// ---
    pub async fn get_actions_cache_list_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsGetActionsCacheListParams<'api>>>) -> Result<ActionsCacheList, ActionsGetActionsCacheListError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/caches", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetActionsCacheListError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List GitHub Actions caches for a repository
    ///
    /// Lists the GitHub Actions caches for a repository.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_actions_cache_list](https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_actions_cache_list(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsGetActionsCacheListParams<'api>>>) -> Result<ActionsCacheList, ActionsGetActionsCacheListError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/caches", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsGetActionsCacheListParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetActionsCacheListError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get GitHub Actions cache usage for a repository
    ///
    /// Gets GitHub Actions cache usage for a repository.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_actions_cache_usage](https://docs.github.com/rest/actions/cache#get-github-actions-cache-usage-for-a-repository)
    ///
    /// ---
    pub async fn get_actions_cache_usage_async(&self, owner: &str, repo: &str) -> Result<ActionsCacheUsageByRepository, ActionsGetActionsCacheUsageError> {

        let request_uri = format!("{}/repos/{}/{}/actions/cache/usage", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetActionsCacheUsageError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get GitHub Actions cache usage for a repository
    ///
    /// Gets GitHub Actions cache usage for a repository.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_actions_cache_usage](https://docs.github.com/rest/actions/cache#get-github-actions-cache-usage-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_actions_cache_usage(&self, owner: &str, repo: &str) -> Result<ActionsCacheUsageByRepository, ActionsGetActionsCacheUsageError> {

        let request_uri = format!("{}/repos/{}/{}/actions/cache/usage", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetActionsCacheUsageError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repositories with GitHub Actions cache usage for an organization
    ///
    /// Lists repositories and their GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_actions_cache_usage_by_repo_for_org](https://docs.github.com/rest/actions/cache#list-repositories-with-github-actions-cache-usage-for-an-organization)
    ///
    /// ---
    pub async fn get_actions_cache_usage_by_repo_for_org_async(&self, org: &str, query_params: Option<impl Into<ActionsGetActionsCacheUsageByRepoForOrgParams>>) -> Result<GetActionsGetActionsCacheUsageByRepoForOrgResponse200, ActionsGetActionsCacheUsageByRepoForOrgError> {

        let mut request_uri = format!("{}/orgs/{}/actions/cache/usage-by-repository", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetActionsCacheUsageByRepoForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repositories with GitHub Actions cache usage for an organization
    ///
    /// Lists repositories and their GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_actions_cache_usage_by_repo_for_org](https://docs.github.com/rest/actions/cache#list-repositories-with-github-actions-cache-usage-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_actions_cache_usage_by_repo_for_org(&self, org: &str, query_params: Option<impl Into<ActionsGetActionsCacheUsageByRepoForOrgParams>>) -> Result<GetActionsGetActionsCacheUsageByRepoForOrgResponse200, ActionsGetActionsCacheUsageByRepoForOrgError> {

        let mut request_uri = format!("{}/orgs/{}/actions/cache/usage-by-repository", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsGetActionsCacheUsageByRepoForOrgParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetActionsCacheUsageByRepoForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get GitHub Actions cache usage for an organization
    ///
    /// Gets the total GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_actions_cache_usage_for_org](https://docs.github.com/rest/actions/cache#get-github-actions-cache-usage-for-an-organization)
    ///
    /// ---
    pub async fn get_actions_cache_usage_for_org_async(&self, org: &str) -> Result<ActionsCacheUsageOrgEnterprise, ActionsGetActionsCacheUsageForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/cache/usage", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetActionsCacheUsageForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get GitHub Actions cache usage for an organization
    ///
    /// Gets the total GitHub Actions cache usage for an organization.
    /// The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_actions_cache_usage_for_org](https://docs.github.com/rest/actions/cache#get-github-actions-cache-usage-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_actions_cache_usage_for_org(&self, org: &str) -> Result<ActionsCacheUsageOrgEnterprise, ActionsGetActionsCacheUsageForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/cache/usage", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetActionsCacheUsageForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get allowed actions and reusable workflows for an organization
    ///
    /// Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_allowed_actions_organization](https://docs.github.com/rest/actions/permissions#get-allowed-actions-and-reusable-workflows-for-an-organization)
    ///
    /// ---
    pub async fn get_allowed_actions_organization_async(&self, org: &str) -> Result<PutActionsSetAllowedActionsRepository, ActionsGetAllowedActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/selected-actions", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetAllowedActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get allowed actions and reusable workflows for an organization
    ///
    /// Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_allowed_actions_organization](https://docs.github.com/rest/actions/permissions#get-allowed-actions-and-reusable-workflows-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_allowed_actions_organization(&self, org: &str) -> Result<PutActionsSetAllowedActionsRepository, ActionsGetAllowedActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/selected-actions", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetAllowedActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get allowed actions and reusable workflows for a repository
    ///
    /// Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_allowed_actions_repository](https://docs.github.com/rest/actions/permissions#get-allowed-actions-and-reusable-workflows-for-a-repository)
    ///
    /// ---
    pub async fn get_allowed_actions_repository_async(&self, owner: &str, repo: &str) -> Result<PutActionsSetAllowedActionsRepository, ActionsGetAllowedActionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/selected-actions", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetAllowedActionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get allowed actions and reusable workflows for a repository
    ///
    /// Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_allowed_actions_repository](https://docs.github.com/rest/actions/permissions#get-allowed-actions-and-reusable-workflows-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_allowed_actions_repository(&self, owner: &str, repo: &str) -> Result<PutActionsSetAllowedActionsRepository, ActionsGetAllowedActionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/selected-actions", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetAllowedActionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an artifact
    ///
    /// Gets a specific artifact for a workflow run.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_artifact](https://docs.github.com/rest/actions/artifacts#get-an-artifact)
    ///
    /// ---
    pub async fn get_artifact_async(&self, owner: &str, repo: &str, artifact_id: i32) -> Result<Artifact, ActionsGetArtifactError> {

        let request_uri = format!("{}/repos/{}/{}/actions/artifacts/{}", super::GITHUB_BASE_API_URL, owner, repo, artifact_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetArtifactError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an artifact
    ///
    /// Gets a specific artifact for a workflow run.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_artifact](https://docs.github.com/rest/actions/artifacts#get-an-artifact)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_artifact(&self, owner: &str, repo: &str, artifact_id: i32) -> Result<Artifact, ActionsGetArtifactError> {

        let request_uri = format!("{}/repos/{}/{}/actions/artifacts/{}", super::GITHUB_BASE_API_URL, owner, repo, artifact_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetArtifactError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get the customization template for an OIDC subject claim for a repository
    ///
    /// Gets the customization template for an OpenID Connect (OIDC) subject claim.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_custom_oidc_sub_claim_for_repo](https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository)
    ///
    /// ---
    pub async fn get_custom_oidc_sub_claim_for_repo_async(&self, owner: &str, repo: &str) -> Result<OidcCustomSubRepo, ActionsGetCustomOidcSubClaimForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/oidc/customization/sub", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                400 => Err(ActionsGetCustomOidcSubClaimForRepoError::Status400(github_response.to_json_async().await?)),
                404 => Err(ActionsGetCustomOidcSubClaimForRepoError::Status404(github_response.to_json_async().await?)),
                code => Err(ActionsGetCustomOidcSubClaimForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get the customization template for an OIDC subject claim for a repository
    ///
    /// Gets the customization template for an OpenID Connect (OIDC) subject claim.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_custom_oidc_sub_claim_for_repo](https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_custom_oidc_sub_claim_for_repo(&self, owner: &str, repo: &str) -> Result<OidcCustomSubRepo, ActionsGetCustomOidcSubClaimForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/oidc/customization/sub", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                400 => Err(ActionsGetCustomOidcSubClaimForRepoError::Status400(github_response.to_json()?)),
                404 => Err(ActionsGetCustomOidcSubClaimForRepoError::Status404(github_response.to_json()?)),
                code => Err(ActionsGetCustomOidcSubClaimForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an environment public key
    ///
    /// Get the public key for an environment, which you need to encrypt environment
    /// secrets. You need to encrypt a secret before you can create or update secrets.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_environment_public_key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key)
    ///
    /// ---
    pub async fn get_environment_public_key_async(&self, owner: &str, repo: &str, environment_name: &str) -> Result<ActionsPublicKey, ActionsGetEnvironmentPublicKeyError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/secrets/public-key", super::GITHUB_BASE_API_URL, owner, repo, environment_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetEnvironmentPublicKeyError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an environment public key
    ///
    /// Get the public key for an environment, which you need to encrypt environment
    /// secrets. You need to encrypt a secret before you can create or update secrets.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_environment_public_key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_environment_public_key(&self, owner: &str, repo: &str, environment_name: &str) -> Result<ActionsPublicKey, ActionsGetEnvironmentPublicKeyError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/secrets/public-key", super::GITHUB_BASE_API_URL, owner, repo, environment_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetEnvironmentPublicKeyError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an environment secret
    ///
    /// Gets a single environment secret without revealing its encrypted value.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_environment_secret](https://docs.github.com/rest/actions/secrets#get-an-environment-secret)
    ///
    /// ---
    pub async fn get_environment_secret_async(&self, owner: &str, repo: &str, environment_name: &str, secret_name: &str) -> Result<ActionsSecret, ActionsGetEnvironmentSecretError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, environment_name, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetEnvironmentSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an environment secret
    ///
    /// Gets a single environment secret without revealing its encrypted value.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_environment_secret](https://docs.github.com/rest/actions/secrets#get-an-environment-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_environment_secret(&self, owner: &str, repo: &str, environment_name: &str, secret_name: &str) -> Result<ActionsSecret, ActionsGetEnvironmentSecretError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, environment_name, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetEnvironmentSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an environment variable
    ///
    /// Gets a specific variable in an environment.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_environment_variable](https://docs.github.com/rest/actions/variables#get-an-environment-variable)
    ///
    /// ---
    pub async fn get_environment_variable_async(&self, owner: &str, repo: &str, environment_name: &str, name: &str) -> Result<ActionsVariable, ActionsGetEnvironmentVariableError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, environment_name, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetEnvironmentVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an environment variable
    ///
    /// Gets a specific variable in an environment.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_environment_variable](https://docs.github.com/rest/actions/variables#get-an-environment-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_environment_variable(&self, owner: &str, repo: &str, environment_name: &str, name: &str) -> Result<ActionsVariable, ActionsGetEnvironmentVariableError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, environment_name, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetEnvironmentVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get default workflow permissions for an organization
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
    /// as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_github_actions_default_workflow_permissions_organization](https://docs.github.com/rest/actions/permissions#get-default-workflow-permissions-for-an-organization)
    ///
    /// ---
    pub async fn get_github_actions_default_workflow_permissions_organization_async(&self, org: &str) -> Result<ActionsGetDefaultWorkflowPermissions, ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/workflow", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get default workflow permissions for an organization
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
    /// as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_github_actions_default_workflow_permissions_organization](https://docs.github.com/rest/actions/permissions#get-default-workflow-permissions-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_github_actions_default_workflow_permissions_organization(&self, org: &str) -> Result<ActionsGetDefaultWorkflowPermissions, ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/workflow", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get default workflow permissions for a repository
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
    /// as well as if GitHub Actions can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_github_actions_default_workflow_permissions_repository](https://docs.github.com/rest/actions/permissions#get-default-workflow-permissions-for-a-repository)
    ///
    /// ---
    pub async fn get_github_actions_default_workflow_permissions_repository_async(&self, owner: &str, repo: &str) -> Result<ActionsGetDefaultWorkflowPermissions, ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/workflow", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get default workflow permissions for a repository
    ///
    /// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
    /// as well as if GitHub Actions can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_github_actions_default_workflow_permissions_repository](https://docs.github.com/rest/actions/permissions#get-default-workflow-permissions-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_github_actions_default_workflow_permissions_repository(&self, owner: &str, repo: &str) -> Result<ActionsGetDefaultWorkflowPermissions, ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/workflow", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get GitHub Actions permissions for an organization
    ///
    /// Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_github_actions_permissions_organization](https://docs.github.com/rest/actions/permissions#get-github-actions-permissions-for-an-organization)
    ///
    /// ---
    pub async fn get_github_actions_permissions_organization_async(&self, org: &str) -> Result<ActionsOrganizationPermissions, ActionsGetGithubActionsPermissionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetGithubActionsPermissionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get GitHub Actions permissions for an organization
    ///
    /// Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_github_actions_permissions_organization](https://docs.github.com/rest/actions/permissions#get-github-actions-permissions-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_github_actions_permissions_organization(&self, org: &str) -> Result<ActionsOrganizationPermissions, ActionsGetGithubActionsPermissionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetGithubActionsPermissionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get GitHub Actions permissions for a repository
    ///
    /// Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_github_actions_permissions_repository](https://docs.github.com/rest/actions/permissions#get-github-actions-permissions-for-a-repository)
    ///
    /// ---
    pub async fn get_github_actions_permissions_repository_async(&self, owner: &str, repo: &str) -> Result<ActionsRepositoryPermissions, ActionsGetGithubActionsPermissionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetGithubActionsPermissionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get GitHub Actions permissions for a repository
    ///
    /// Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_github_actions_permissions_repository](https://docs.github.com/rest/actions/permissions#get-github-actions-permissions-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_github_actions_permissions_repository(&self, owner: &str, repo: &str) -> Result<ActionsRepositoryPermissions, ActionsGetGithubActionsPermissionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetGithubActionsPermissionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a job for a workflow run
    ///
    /// Gets a specific job in a workflow run.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_job_for_workflow_run](https://docs.github.com/rest/actions/workflow-jobs#get-a-job-for-a-workflow-run)
    ///
    /// ---
    pub async fn get_job_for_workflow_run_async(&self, owner: &str, repo: &str, job_id: i32) -> Result<Job, ActionsGetJobForWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/jobs/{}", super::GITHUB_BASE_API_URL, owner, repo, job_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetJobForWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a job for a workflow run
    ///
    /// Gets a specific job in a workflow run.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_job_for_workflow_run](https://docs.github.com/rest/actions/workflow-jobs#get-a-job-for-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_job_for_workflow_run(&self, owner: &str, repo: &str, job_id: i32) -> Result<Job, ActionsGetJobForWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/jobs/{}", super::GITHUB_BASE_API_URL, owner, repo, job_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetJobForWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an organization public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    /// 
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_org_public_key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key)
    ///
    /// ---
    pub async fn get_org_public_key_async(&self, org: &str) -> Result<ActionsPublicKey, ActionsGetOrgPublicKeyError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/public-key", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetOrgPublicKeyError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an organization public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    /// 
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_org_public_key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_org_public_key(&self, org: &str) -> Result<ActionsPublicKey, ActionsGetOrgPublicKeyError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/public-key", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetOrgPublicKeyError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an organization secret
    ///
    /// Gets a single organization secret without revealing its encrypted value.
    /// 
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_org_secret](https://docs.github.com/rest/actions/secrets#get-an-organization-secret)
    ///
    /// ---
    pub async fn get_org_secret_async(&self, org: &str, secret_name: &str) -> Result<OrganizationActionsSecret, ActionsGetOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, org, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an organization secret
    ///
    /// Gets a single organization secret without revealing its encrypted value.
    /// 
    /// The authenticated user must have collaborator access to a repository to create, update, or read secrets
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_org_secret](https://docs.github.com/rest/actions/secrets#get-an-organization-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_org_secret(&self, org: &str, secret_name: &str) -> Result<OrganizationActionsSecret, ActionsGetOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, org, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an organization variable
    ///
    /// Gets a specific variable in an organization.
    /// 
    /// The authenticated user must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_org_variable](https://docs.github.com/rest/actions/variables#get-an-organization-variable)
    ///
    /// ---
    pub async fn get_org_variable_async(&self, org: &str, name: &str) -> Result<OrganizationActionsVariable, ActionsGetOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, org, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get an organization variable
    ///
    /// Gets a specific variable in an organization.
    /// 
    /// The authenticated user must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_org_variable](https://docs.github.com/rest/actions/variables#get-an-organization-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_org_variable(&self, org: &str, name: &str) -> Result<OrganizationActionsVariable, ActionsGetOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, org, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get pending deployments for a workflow run
    ///
    /// Get all deployment environments for a workflow run that are waiting for protection rules to pass.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_pending_deployments_for_run](https://docs.github.com/rest/actions/workflow-runs#get-pending-deployments-for-a-workflow-run)
    ///
    /// ---
    pub async fn get_pending_deployments_for_run_async(&self, owner: &str, repo: &str, run_id: i32) -> Result<Vec<PendingDeployment>, ActionsGetPendingDeploymentsForRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/pending_deployments", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetPendingDeploymentsForRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get pending deployments for a workflow run
    ///
    /// Get all deployment environments for a workflow run that are waiting for protection rules to pass.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_pending_deployments_for_run](https://docs.github.com/rest/actions/workflow-runs#get-pending-deployments-for-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_pending_deployments_for_run(&self, owner: &str, repo: &str, run_id: i32) -> Result<Vec<PendingDeployment>, ActionsGetPendingDeploymentsForRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/pending_deployments", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetPendingDeploymentsForRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_repo_public_key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key)
    ///
    /// ---
    pub async fn get_repo_public_key_async(&self, owner: &str, repo: &str) -> Result<ActionsPublicKey, ActionsGetRepoPublicKeyError> {

        let request_uri = format!("{}/repos/{}/{}/actions/secrets/public-key", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetRepoPublicKeyError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_repo_public_key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_repo_public_key(&self, owner: &str, repo: &str) -> Result<ActionsPublicKey, ActionsGetRepoPublicKeyError> {

        let request_uri = format!("{}/repos/{}/{}/actions/secrets/public-key", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetRepoPublicKeyError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a repository secret
    ///
    /// Gets a single repository secret without revealing its encrypted value.
    /// 
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_repo_secret](https://docs.github.com/rest/actions/secrets#get-a-repository-secret)
    ///
    /// ---
    pub async fn get_repo_secret_async(&self, owner: &str, repo: &str, secret_name: &str) -> Result<ActionsSecret, ActionsGetRepoSecretError> {

        let request_uri = format!("{}/repos/{}/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetRepoSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a repository secret
    ///
    /// Gets a single repository secret without revealing its encrypted value.
    /// 
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_repo_secret](https://docs.github.com/rest/actions/secrets#get-a-repository-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_repo_secret(&self, owner: &str, repo: &str, secret_name: &str) -> Result<ActionsSecret, ActionsGetRepoSecretError> {

        let request_uri = format!("{}/repos/{}/{}/actions/secrets/{}", super::GITHUB_BASE_API_URL, owner, repo, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetRepoSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a repository variable
    ///
    /// Gets a specific variable in a repository.
    /// 
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_repo_variable](https://docs.github.com/rest/actions/variables#get-a-repository-variable)
    ///
    /// ---
    pub async fn get_repo_variable_async(&self, owner: &str, repo: &str, name: &str) -> Result<ActionsVariable, ActionsGetRepoVariableError> {

        let request_uri = format!("{}/repos/{}/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetRepoVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a repository variable
    ///
    /// Gets a specific variable in a repository.
    /// 
    /// The authenticated user must have collaborator access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_repo_variable](https://docs.github.com/rest/actions/variables#get-a-repository-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_repo_variable(&self, owner: &str, repo: &str, name: &str) -> Result<ActionsVariable, ActionsGetRepoVariableError> {

        let request_uri = format!("{}/repos/{}/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetRepoVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get the review history for a workflow run
    ///
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_reviews_for_run](https://docs.github.com/rest/actions/workflow-runs#get-the-review-history-for-a-workflow-run)
    ///
    /// ---
    pub async fn get_reviews_for_run_async(&self, owner: &str, repo: &str, run_id: i32) -> Result<Vec<EnvironmentApprovals>, ActionsGetReviewsForRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/approvals", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetReviewsForRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get the review history for a workflow run
    ///
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_reviews_for_run](https://docs.github.com/rest/actions/workflow-runs#get-the-review-history-for-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_reviews_for_run(&self, owner: &str, repo: &str, run_id: i32) -> Result<Vec<EnvironmentApprovals>, ActionsGetReviewsForRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/approvals", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetReviewsForRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a self-hosted runner for an organization
    ///
    /// Gets a specific self-hosted runner configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for get_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    pub async fn get_self_hosted_runner_for_org_async(&self, org: &str, runner_id: i32) -> Result<Runner, ActionsGetSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a self-hosted runner for an organization
    ///
    /// Gets a specific self-hosted runner configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for get_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_self_hosted_runner_for_org(&self, org: &str, runner_id: i32) -> Result<Runner, ActionsGetSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a self-hosted runner for a repository
    ///
    /// Gets a specific self-hosted runner configured in a repository.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    pub async fn get_self_hosted_runner_for_repo_async(&self, owner: &str, repo: &str, runner_id: i32) -> Result<Runner, ActionsGetSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a self-hosted runner for a repository
    ///
    /// Gets a specific self-hosted runner configured in a repository.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_self_hosted_runner_for_repo(&self, owner: &str, repo: &str, runner_id: i32) -> Result<Runner, ActionsGetSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a workflow
    ///
    /// Gets a specific workflow. You can replace `workflow_id` with the workflow
    /// file name. For example, you could use `main.yaml`.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow](https://docs.github.com/rest/actions/workflows#get-a-workflow)
    ///
    /// ---
    pub async fn get_workflow_async(&self, owner: &str, repo: &str, workflow_id: WorkflowId) -> Result<Workflow, ActionsGetWorkflowError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a workflow
    ///
    /// Gets a specific workflow. You can replace `workflow_id` with the workflow
    /// file name. For example, you could use `main.yaml`.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow](https://docs.github.com/rest/actions/workflows#get-a-workflow)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_workflow(&self, owner: &str, repo: &str, workflow_id: WorkflowId) -> Result<Workflow, ActionsGetWorkflowError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get the level of access for workflows outside of the repository
    ///
    /// Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_workflow_access_to_repository](https://docs.github.com/rest/actions/permissions#get-the-level-of-access-for-workflows-outside-of-the-repository)
    ///
    /// ---
    pub async fn get_workflow_access_to_repository_async(&self, owner: &str, repo: &str) -> Result<ActionsWorkflowAccessToRepository, ActionsGetWorkflowAccessToRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/access", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowAccessToRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get the level of access for workflows outside of the repository
    ///
    /// Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_workflow_access_to_repository](https://docs.github.com/rest/actions/permissions#get-the-level-of-access-for-workflows-outside-of-the-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_workflow_access_to_repository(&self, owner: &str, repo: &str) -> Result<ActionsWorkflowAccessToRepository, ActionsGetWorkflowAccessToRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/access", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowAccessToRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a workflow run
    ///
    /// Gets a specific workflow run.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow_run](https://docs.github.com/rest/actions/workflow-runs#get-a-workflow-run)
    ///
    /// ---
    pub async fn get_workflow_run_async(&self, owner: &str, repo: &str, run_id: i32, query_params: Option<impl Into<ActionsGetWorkflowRunParams>>) -> Result<WorkflowRun, ActionsGetWorkflowRunError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}", super::GITHUB_BASE_API_URL, owner, repo, run_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a workflow run
    ///
    /// Gets a specific workflow run.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow_run](https://docs.github.com/rest/actions/workflow-runs#get-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_workflow_run(&self, owner: &str, repo: &str, run_id: i32, query_params: Option<impl Into<ActionsGetWorkflowRunParams>>) -> Result<WorkflowRun, ActionsGetWorkflowRunError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}", super::GITHUB_BASE_API_URL, owner, repo, run_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsGetWorkflowRunParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a workflow run attempt
    ///
    /// Gets a specific workflow run attempt.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow_run_attempt](https://docs.github.com/rest/actions/workflow-runs#get-a-workflow-run-attempt)
    ///
    /// ---
    pub async fn get_workflow_run_attempt_async(&self, owner: &str, repo: &str, run_id: i32, attempt_number: i32, query_params: Option<impl Into<ActionsGetWorkflowRunAttemptParams>>) -> Result<WorkflowRun, ActionsGetWorkflowRunAttemptError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}/attempts/{}", super::GITHUB_BASE_API_URL, owner, repo, run_id, attempt_number);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowRunAttemptError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a workflow run attempt
    ///
    /// Gets a specific workflow run attempt.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow_run_attempt](https://docs.github.com/rest/actions/workflow-runs#get-a-workflow-run-attempt)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_workflow_run_attempt(&self, owner: &str, repo: &str, run_id: i32, attempt_number: i32, query_params: Option<impl Into<ActionsGetWorkflowRunAttemptParams>>) -> Result<WorkflowRun, ActionsGetWorkflowRunAttemptError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}/attempts/{}", super::GITHUB_BASE_API_URL, owner, repo, run_id, attempt_number);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsGetWorkflowRunAttemptParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowRunAttemptError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get workflow run usage
    ///
    /// Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow_run_usage](https://docs.github.com/rest/actions/workflow-runs#get-workflow-run-usage)
    ///
    /// ---
    pub async fn get_workflow_run_usage_async(&self, owner: &str, repo: &str, run_id: i32) -> Result<WorkflowRunUsage, ActionsGetWorkflowRunUsageError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/timing", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowRunUsageError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get workflow run usage
    ///
    /// Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow_run_usage](https://docs.github.com/rest/actions/workflow-runs#get-workflow-run-usage)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_workflow_run_usage(&self, owner: &str, repo: &str, run_id: i32) -> Result<WorkflowRunUsage, ActionsGetWorkflowRunUsageError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/timing", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowRunUsageError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get workflow usage
    ///
    /// Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    /// 
    /// You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow_usage](https://docs.github.com/rest/actions/workflows#get-workflow-usage)
    ///
    /// ---
    pub async fn get_workflow_usage_async(&self, owner: &str, repo: &str, workflow_id: WorkflowId) -> Result<WorkflowUsage, ActionsGetWorkflowUsageError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/timing", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowUsageError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get workflow usage
    ///
    /// Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    /// 
    /// You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for get_workflow_usage](https://docs.github.com/rest/actions/workflows#get-workflow-usage)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_workflow_usage(&self, owner: &str, repo: &str, workflow_id: WorkflowId) -> Result<WorkflowUsage, ActionsGetWorkflowUsageError> {

        let request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/timing", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsGetWorkflowUsageError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List artifacts for a repository
    ///
    /// Lists all artifacts for a repository.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_artifacts_for_repo](https://docs.github.com/rest/actions/artifacts#list-artifacts-for-a-repository)
    ///
    /// ---
    pub async fn list_artifacts_for_repo_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListArtifactsForRepoParams<'api>>>) -> Result<GetActionsListWorkflowRunArtifactsResponse200, ActionsListArtifactsForRepoError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/artifacts", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListArtifactsForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List artifacts for a repository
    ///
    /// Lists all artifacts for a repository.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_artifacts_for_repo](https://docs.github.com/rest/actions/artifacts#list-artifacts-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_artifacts_for_repo(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListArtifactsForRepoParams<'api>>>) -> Result<GetActionsListWorkflowRunArtifactsResponse200, ActionsListArtifactsForRepoError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/artifacts", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListArtifactsForRepoParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListArtifactsForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List environment secrets
    ///
    /// Lists all secrets available in an environment without revealing their
    /// encrypted values.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_environment_secrets](https://docs.github.com/rest/actions/secrets#list-environment-secrets)
    ///
    /// ---
    pub async fn list_environment_secrets_async(&self, owner: &str, repo: &str, environment_name: &str, query_params: Option<impl Into<ActionsListEnvironmentSecretsParams>>) -> Result<GetActionsListEnvironmentSecretsResponse200, ActionsListEnvironmentSecretsError> {

        let mut request_uri = format!("{}/repos/{}/{}/environments/{}/secrets", super::GITHUB_BASE_API_URL, owner, repo, environment_name);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListEnvironmentSecretsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List environment secrets
    ///
    /// Lists all secrets available in an environment without revealing their
    /// encrypted values.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_environment_secrets](https://docs.github.com/rest/actions/secrets#list-environment-secrets)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_environment_secrets(&self, owner: &str, repo: &str, environment_name: &str, query_params: Option<impl Into<ActionsListEnvironmentSecretsParams>>) -> Result<GetActionsListEnvironmentSecretsResponse200, ActionsListEnvironmentSecretsError> {

        let mut request_uri = format!("{}/repos/{}/{}/environments/{}/secrets", super::GITHUB_BASE_API_URL, owner, repo, environment_name);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListEnvironmentSecretsParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListEnvironmentSecretsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List environment variables
    ///
    /// Lists all environment variables.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_environment_variables](https://docs.github.com/rest/actions/variables#list-environment-variables)
    ///
    /// ---
    pub async fn list_environment_variables_async(&self, owner: &str, repo: &str, environment_name: &str, query_params: Option<impl Into<ActionsListEnvironmentVariablesParams>>) -> Result<GetActionsListEnvironmentVariablesResponse200, ActionsListEnvironmentVariablesError> {

        let mut request_uri = format!("{}/repos/{}/{}/environments/{}/variables", super::GITHUB_BASE_API_URL, owner, repo, environment_name);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListEnvironmentVariablesError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List environment variables
    ///
    /// Lists all environment variables.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_environment_variables](https://docs.github.com/rest/actions/variables#list-environment-variables)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_environment_variables(&self, owner: &str, repo: &str, environment_name: &str, query_params: Option<impl Into<ActionsListEnvironmentVariablesParams>>) -> Result<GetActionsListEnvironmentVariablesResponse200, ActionsListEnvironmentVariablesError> {

        let mut request_uri = format!("{}/repos/{}/{}/environments/{}/variables", super::GITHUB_BASE_API_URL, owner, repo, environment_name);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListEnvironmentVariablesParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListEnvironmentVariablesError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List jobs for a workflow run
    ///
    /// Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_jobs_for_workflow_run](https://docs.github.com/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run)
    ///
    /// ---
    pub async fn list_jobs_for_workflow_run_async(&self, owner: &str, repo: &str, run_id: i32, query_params: Option<impl Into<ActionsListJobsForWorkflowRunParams<'api>>>) -> Result<GetActionsListJobsForWorkflowRunResponse200, ActionsListJobsForWorkflowRunError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}/jobs", super::GITHUB_BASE_API_URL, owner, repo, run_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListJobsForWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List jobs for a workflow run
    ///
    /// Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_jobs_for_workflow_run](https://docs.github.com/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_jobs_for_workflow_run(&self, owner: &str, repo: &str, run_id: i32, query_params: Option<impl Into<ActionsListJobsForWorkflowRunParams<'api>>>) -> Result<GetActionsListJobsForWorkflowRunResponse200, ActionsListJobsForWorkflowRunError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}/jobs", super::GITHUB_BASE_API_URL, owner, repo, run_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListJobsForWorkflowRunParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListJobsForWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List jobs for a workflow run attempt
    ///
    /// Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
    ///
    /// [GitHub API docs for list_jobs_for_workflow_run_attempt](https://docs.github.com/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run-attempt)
    ///
    /// ---
    pub async fn list_jobs_for_workflow_run_attempt_async(&self, owner: &str, repo: &str, run_id: i32, attempt_number: i32, query_params: Option<impl Into<ActionsListJobsForWorkflowRunAttemptParams>>) -> Result<GetActionsListJobsForWorkflowRunResponse200, ActionsListJobsForWorkflowRunAttemptError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}/attempts/{}/jobs", super::GITHUB_BASE_API_URL, owner, repo, run_id, attempt_number);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsListJobsForWorkflowRunAttemptError::Status404(github_response.to_json_async().await?)),
                code => Err(ActionsListJobsForWorkflowRunAttemptError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List jobs for a workflow run attempt
    ///
    /// Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
    /// about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
    ///
    /// [GitHub API docs for list_jobs_for_workflow_run_attempt](https://docs.github.com/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run-attempt)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_jobs_for_workflow_run_attempt(&self, owner: &str, repo: &str, run_id: i32, attempt_number: i32, query_params: Option<impl Into<ActionsListJobsForWorkflowRunAttemptParams>>) -> Result<GetActionsListJobsForWorkflowRunResponse200, ActionsListJobsForWorkflowRunAttemptError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}/attempts/{}/jobs", super::GITHUB_BASE_API_URL, owner, repo, run_id, attempt_number);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListJobsForWorkflowRunAttemptParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsListJobsForWorkflowRunAttemptError::Status404(github_response.to_json()?)),
                code => Err(ActionsListJobsForWorkflowRunAttemptError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List labels for a self-hosted runner for an organization
    ///
    /// Lists all labels for a self-hosted runner configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_labels_for_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    pub async fn list_labels_for_self_hosted_runner_for_org_async(&self, org: &str, runner_id: i32) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsListLabelsForSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsListLabelsForSelfHostedRunnerForOrgError::Status404(github_response.to_json_async().await?)),
                code => Err(ActionsListLabelsForSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List labels for a self-hosted runner for an organization
    ///
    /// Lists all labels for a self-hosted runner configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_labels_for_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_labels_for_self_hosted_runner_for_org(&self, org: &str, runner_id: i32) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsListLabelsForSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsListLabelsForSelfHostedRunnerForOrgError::Status404(github_response.to_json()?)),
                code => Err(ActionsListLabelsForSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List labels for a self-hosted runner for a repository
    ///
    /// Lists all labels for a self-hosted runner configured in a repository.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_labels_for_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    pub async fn list_labels_for_self_hosted_runner_for_repo_async(&self, owner: &str, repo: &str, runner_id: i32) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsListLabelsForSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsListLabelsForSelfHostedRunnerForRepoError::Status404(github_response.to_json_async().await?)),
                code => Err(ActionsListLabelsForSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List labels for a self-hosted runner for a repository
    ///
    /// Lists all labels for a self-hosted runner configured in a repository.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_labels_for_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_labels_for_self_hosted_runner_for_repo(&self, owner: &str, repo: &str, runner_id: i32) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsListLabelsForSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsListLabelsForSelfHostedRunnerForRepoError::Status404(github_response.to_json()?)),
                code => Err(ActionsListLabelsForSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List organization secrets
    ///
    /// Lists all secrets available in an organization without revealing their
    /// encrypted values.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_org_secrets](https://docs.github.com/rest/actions/secrets#list-organization-secrets)
    ///
    /// ---
    pub async fn list_org_secrets_async(&self, org: &str, query_params: Option<impl Into<ActionsListOrgSecretsParams>>) -> Result<GetActionsListOrgSecretsResponse200, ActionsListOrgSecretsError> {

        let mut request_uri = format!("{}/orgs/{}/actions/secrets", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListOrgSecretsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List organization secrets
    ///
    /// Lists all secrets available in an organization without revealing their
    /// encrypted values.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_org_secrets](https://docs.github.com/rest/actions/secrets#list-organization-secrets)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_org_secrets(&self, org: &str, query_params: Option<impl Into<ActionsListOrgSecretsParams>>) -> Result<GetActionsListOrgSecretsResponse200, ActionsListOrgSecretsError> {

        let mut request_uri = format!("{}/orgs/{}/actions/secrets", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListOrgSecretsParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListOrgSecretsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List organization variables
    ///
    /// Lists all organization variables.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_org_variables](https://docs.github.com/rest/actions/variables#list-organization-variables)
    ///
    /// ---
    pub async fn list_org_variables_async(&self, org: &str, query_params: Option<impl Into<ActionsListOrgVariablesParams>>) -> Result<GetActionsListOrgVariablesResponse200, ActionsListOrgVariablesError> {

        let mut request_uri = format!("{}/orgs/{}/actions/variables", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListOrgVariablesError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List organization variables
    ///
    /// Lists all organization variables.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_org_variables](https://docs.github.com/rest/actions/variables#list-organization-variables)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_org_variables(&self, org: &str, query_params: Option<impl Into<ActionsListOrgVariablesParams>>) -> Result<GetActionsListOrgVariablesResponse200, ActionsListOrgVariablesError> {

        let mut request_uri = format!("{}/orgs/{}/actions/variables", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListOrgVariablesParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListOrgVariablesError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository organization secrets
    ///
    /// Lists all organization secrets shared with a repository without revealing their encrypted
    /// values.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_repo_organization_secrets](https://docs.github.com/rest/actions/secrets#list-repository-organization-secrets)
    ///
    /// ---
    pub async fn list_repo_organization_secrets_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoOrganizationSecretsParams>>) -> Result<GetActionsListEnvironmentSecretsResponse200, ActionsListRepoOrganizationSecretsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/organization-secrets", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoOrganizationSecretsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository organization secrets
    ///
    /// Lists all organization secrets shared with a repository without revealing their encrypted
    /// values.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_repo_organization_secrets](https://docs.github.com/rest/actions/secrets#list-repository-organization-secrets)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_repo_organization_secrets(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoOrganizationSecretsParams>>) -> Result<GetActionsListEnvironmentSecretsResponse200, ActionsListRepoOrganizationSecretsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/organization-secrets", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListRepoOrganizationSecretsParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoOrganizationSecretsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository organization variables
    ///
    /// Lists all organization variables shared with a repository.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_repo_organization_variables](https://docs.github.com/rest/actions/variables#list-repository-organization-variables)
    ///
    /// ---
    pub async fn list_repo_organization_variables_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoOrganizationVariablesParams>>) -> Result<GetActionsListEnvironmentVariablesResponse200, ActionsListRepoOrganizationVariablesError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/organization-variables", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoOrganizationVariablesError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository organization variables
    ///
    /// Lists all organization variables shared with a repository.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_repo_organization_variables](https://docs.github.com/rest/actions/variables#list-repository-organization-variables)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_repo_organization_variables(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoOrganizationVariablesParams>>) -> Result<GetActionsListEnvironmentVariablesResponse200, ActionsListRepoOrganizationVariablesError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/organization-variables", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListRepoOrganizationVariablesParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoOrganizationVariablesError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository secrets
    ///
    /// Lists all secrets available in a repository without revealing their encrypted
    /// values.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_repo_secrets](https://docs.github.com/rest/actions/secrets#list-repository-secrets)
    ///
    /// ---
    pub async fn list_repo_secrets_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoSecretsParams>>) -> Result<GetActionsListEnvironmentSecretsResponse200, ActionsListRepoSecretsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/secrets", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoSecretsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository secrets
    ///
    /// Lists all secrets available in a repository without revealing their encrypted
    /// values.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_repo_secrets](https://docs.github.com/rest/actions/secrets#list-repository-secrets)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_repo_secrets(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoSecretsParams>>) -> Result<GetActionsListEnvironmentSecretsResponse200, ActionsListRepoSecretsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/secrets", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListRepoSecretsParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoSecretsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository variables
    ///
    /// Lists all repository variables.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_repo_variables](https://docs.github.com/rest/actions/variables#list-repository-variables)
    ///
    /// ---
    pub async fn list_repo_variables_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoVariablesParams>>) -> Result<GetActionsListEnvironmentVariablesResponse200, ActionsListRepoVariablesError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/variables", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoVariablesError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository variables
    ///
    /// Lists all repository variables.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_repo_variables](https://docs.github.com/rest/actions/variables#list-repository-variables)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_repo_variables(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoVariablesParams>>) -> Result<GetActionsListEnvironmentVariablesResponse200, ActionsListRepoVariablesError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/variables", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListRepoVariablesParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoVariablesError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository workflows
    ///
    /// Lists the workflows in a repository.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_repo_workflows](https://docs.github.com/rest/actions/workflows#list-repository-workflows)
    ///
    /// ---
    pub async fn list_repo_workflows_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoWorkflowsParams>>) -> Result<GetActionsListRepoWorkflowsResponse200, ActionsListRepoWorkflowsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/workflows", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoWorkflowsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List repository workflows
    ///
    /// Lists the workflows in a repository.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_repo_workflows](https://docs.github.com/rest/actions/workflows#list-repository-workflows)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_repo_workflows(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListRepoWorkflowsParams>>) -> Result<GetActionsListRepoWorkflowsResponse200, ActionsListRepoWorkflowsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/workflows", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListRepoWorkflowsParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRepoWorkflowsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List runner applications for an organization
    ///
    /// Lists binaries for the runner application that you can download and run.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_runner_applications_for_org](https://docs.github.com/rest/actions/self-hosted-runners#list-runner-applications-for-an-organization)
    ///
    /// ---
    pub async fn list_runner_applications_for_org_async(&self, org: &str) -> Result<Vec<RunnerApplication>, ActionsListRunnerApplicationsForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/downloads", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRunnerApplicationsForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List runner applications for an organization
    ///
    /// Lists binaries for the runner application that you can download and run.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_runner_applications_for_org](https://docs.github.com/rest/actions/self-hosted-runners#list-runner-applications-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_runner_applications_for_org(&self, org: &str) -> Result<Vec<RunnerApplication>, ActionsListRunnerApplicationsForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/downloads", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRunnerApplicationsForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List runner applications for a repository
    ///
    /// Lists binaries for the runner application that you can download and run.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_runner_applications_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#list-runner-applications-for-a-repository)
    ///
    /// ---
    pub async fn list_runner_applications_for_repo_async(&self, owner: &str, repo: &str) -> Result<Vec<RunnerApplication>, ActionsListRunnerApplicationsForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/downloads", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRunnerApplicationsForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List runner applications for a repository
    ///
    /// Lists binaries for the runner application that you can download and run.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_runner_applications_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#list-runner-applications-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_runner_applications_for_repo(&self, owner: &str, repo: &str) -> Result<Vec<RunnerApplication>, ActionsListRunnerApplicationsForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/downloads", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListRunnerApplicationsForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_selected_repos_for_org_secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret)
    ///
    /// ---
    pub async fn list_selected_repos_for_org_secret_async(&self, org: &str, secret_name: &str, query_params: Option<impl Into<ActionsListSelectedReposForOrgSecretParams>>) -> Result<GetCodespacesListRepositoriesForSecretForAuthenticatedUserResponse200, ActionsListSelectedReposForOrgSecretError> {

        let mut request_uri = format!("{}/orgs/{}/actions/secrets/{}/repositories", super::GITHUB_BASE_API_URL, org, secret_name);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListSelectedReposForOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_selected_repos_for_org_secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_selected_repos_for_org_secret(&self, org: &str, secret_name: &str, query_params: Option<impl Into<ActionsListSelectedReposForOrgSecretParams>>) -> Result<GetCodespacesListRepositoriesForSecretForAuthenticatedUserResponse200, ActionsListSelectedReposForOrgSecretError> {

        let mut request_uri = format!("{}/orgs/{}/actions/secrets/{}/repositories", super::GITHUB_BASE_API_URL, org, secret_name);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListSelectedReposForOrgSecretParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListSelectedReposForOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List selected repositories for an organization variable
    ///
    /// Lists all repositories that can access an organization variable
    /// that is available to selected repositories.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_selected_repos_for_org_variable](https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable)
    ///
    /// ---
    pub async fn list_selected_repos_for_org_variable_async(&self, org: &str, name: &str, query_params: Option<impl Into<ActionsListSelectedReposForOrgVariableParams>>) -> Result<GetCodespacesListRepositoriesForSecretForAuthenticatedUserResponse200, ActionsListSelectedReposForOrgVariableError> {

        let mut request_uri = format!("{}/orgs/{}/actions/variables/{}/repositories", super::GITHUB_BASE_API_URL, org, name);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsListSelectedReposForOrgVariableError::Status409),
                code => Err(ActionsListSelectedReposForOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List selected repositories for an organization variable
    ///
    /// Lists all repositories that can access an organization variable
    /// that is available to selected repositories.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_selected_repos_for_org_variable](https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_selected_repos_for_org_variable(&self, org: &str, name: &str, query_params: Option<impl Into<ActionsListSelectedReposForOrgVariableParams>>) -> Result<GetCodespacesListRepositoriesForSecretForAuthenticatedUserResponse200, ActionsListSelectedReposForOrgVariableError> {

        let mut request_uri = format!("{}/orgs/{}/actions/variables/{}/repositories", super::GITHUB_BASE_API_URL, org, name);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListSelectedReposForOrgVariableParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsListSelectedReposForOrgVariableError::Status409),
                code => Err(ActionsListSelectedReposForOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List selected repositories enabled for GitHub Actions in an organization
    ///
    /// Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_selected_repositories_enabled_github_actions_organization](https://docs.github.com/rest/actions/permissions#list-selected-repositories-enabled-for-github-actions-in-an-organization)
    ///
    /// ---
    pub async fn list_selected_repositories_enabled_github_actions_organization_async(&self, org: &str, query_params: Option<impl Into<ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams>>) -> Result<GetActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse200, ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError> {

        let mut request_uri = format!("{}/orgs/{}/actions/permissions/repositories", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List selected repositories enabled for GitHub Actions in an organization
    ///
    /// Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_selected_repositories_enabled_github_actions_organization](https://docs.github.com/rest/actions/permissions#list-selected-repositories-enabled-for-github-actions-in-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_selected_repositories_enabled_github_actions_organization(&self, org: &str, query_params: Option<impl Into<ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams>>) -> Result<GetActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse200, ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError> {

        let mut request_uri = format!("{}/orgs/{}/actions/permissions/repositories", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List self-hosted runners for an organization
    ///
    /// Lists all self-hosted runners configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_self_hosted_runners_for_org](https://docs.github.com/rest/actions/self-hosted-runners#list-self-hosted-runners-for-an-organization)
    ///
    /// ---
    pub async fn list_self_hosted_runners_for_org_async(&self, org: &str, query_params: Option<impl Into<ActionsListSelfHostedRunnersForOrgParams<'api>>>) -> Result<GetActionsListSelfHostedRunnersForRepoResponse200, ActionsListSelfHostedRunnersForOrgError> {

        let mut request_uri = format!("{}/orgs/{}/actions/runners", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListSelfHostedRunnersForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List self-hosted runners for an organization
    ///
    /// Lists all self-hosted runners configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for list_self_hosted_runners_for_org](https://docs.github.com/rest/actions/self-hosted-runners#list-self-hosted-runners-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_self_hosted_runners_for_org(&self, org: &str, query_params: Option<impl Into<ActionsListSelfHostedRunnersForOrgParams<'api>>>) -> Result<GetActionsListSelfHostedRunnersForRepoResponse200, ActionsListSelfHostedRunnersForOrgError> {

        let mut request_uri = format!("{}/orgs/{}/actions/runners", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListSelfHostedRunnersForOrgParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListSelfHostedRunnersForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List self-hosted runners for a repository
    ///
    /// Lists all self-hosted runners configured in a repository.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_self_hosted_runners_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#list-self-hosted-runners-for-a-repository)
    ///
    /// ---
    pub async fn list_self_hosted_runners_for_repo_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListSelfHostedRunnersForRepoParams<'api>>>) -> Result<GetActionsListSelfHostedRunnersForRepoResponse200, ActionsListSelfHostedRunnersForRepoError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runners", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListSelfHostedRunnersForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List self-hosted runners for a repository
    ///
    /// Lists all self-hosted runners configured in a repository.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_self_hosted_runners_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#list-self-hosted-runners-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_self_hosted_runners_for_repo(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListSelfHostedRunnersForRepoParams<'api>>>) -> Result<GetActionsListSelfHostedRunnersForRepoResponse200, ActionsListSelfHostedRunnersForRepoError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runners", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListSelfHostedRunnersForRepoParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListSelfHostedRunnersForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List workflow run artifacts
    ///
    /// Lists artifacts for a workflow run.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_workflow_run_artifacts](https://docs.github.com/rest/actions/artifacts#list-workflow-run-artifacts)
    ///
    /// ---
    pub async fn list_workflow_run_artifacts_async(&self, owner: &str, repo: &str, run_id: i32, query_params: Option<impl Into<ActionsListWorkflowRunArtifactsParams<'api>>>) -> Result<GetActionsListWorkflowRunArtifactsResponse200, ActionsListWorkflowRunArtifactsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}/artifacts", super::GITHUB_BASE_API_URL, owner, repo, run_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListWorkflowRunArtifactsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List workflow run artifacts
    ///
    /// Lists artifacts for a workflow run.
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_workflow_run_artifacts](https://docs.github.com/rest/actions/artifacts#list-workflow-run-artifacts)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_workflow_run_artifacts(&self, owner: &str, repo: &str, run_id: i32, query_params: Option<impl Into<ActionsListWorkflowRunArtifactsParams<'api>>>) -> Result<GetActionsListWorkflowRunArtifactsResponse200, ActionsListWorkflowRunArtifactsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs/{}/artifacts", super::GITHUB_BASE_API_URL, owner, repo, run_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListWorkflowRunArtifactsParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListWorkflowRunArtifactsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List workflow runs for a workflow
    ///
    /// List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    /// 
    /// Anyone with read access to the repository can use this endpoint
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_workflow_runs](https://docs.github.com/rest/actions/workflow-runs#list-workflow-runs-for-a-workflow)
    ///
    /// ---
    pub async fn list_workflow_runs_async(&self, owner: &str, repo: &str, workflow_id: WorkflowId, query_params: Option<impl Into<ActionsListWorkflowRunsParams<'api>>>) -> Result<GetActionsListWorkflowRunsResponse200, ActionsListWorkflowRunsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/runs", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListWorkflowRunsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List workflow runs for a workflow
    ///
    /// List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    /// 
    /// Anyone with read access to the repository can use this endpoint
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for list_workflow_runs](https://docs.github.com/rest/actions/workflow-runs#list-workflow-runs-for-a-workflow)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_workflow_runs(&self, owner: &str, repo: &str, workflow_id: WorkflowId, query_params: Option<impl Into<ActionsListWorkflowRunsParams<'api>>>) -> Result<GetActionsListWorkflowRunsResponse200, ActionsListWorkflowRunsError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/workflows/{}/runs", super::GITHUB_BASE_API_URL, owner, repo, workflow_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListWorkflowRunsParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListWorkflowRunsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List workflow runs for a repository
    ///
    /// Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    /// 
    /// This API will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
    ///
    /// [GitHub API docs for list_workflow_runs_for_repo](https://docs.github.com/rest/actions/workflow-runs#list-workflow-runs-for-a-repository)
    ///
    /// ---
    pub async fn list_workflow_runs_for_repo_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListWorkflowRunsForRepoParams<'api>>>) -> Result<GetActionsListWorkflowRunsResponse200, ActionsListWorkflowRunsForRepoError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListWorkflowRunsForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # List workflow runs for a repository
    ///
    /// Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
    /// 
    /// Anyone with read access to the repository can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    /// 
    /// This API will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
    ///
    /// [GitHub API docs for list_workflow_runs_for_repo](https://docs.github.com/rest/actions/workflow-runs#list-workflow-runs-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_workflow_runs_for_repo(&self, owner: &str, repo: &str, query_params: Option<impl Into<ActionsListWorkflowRunsForRepoParams<'api>>>) -> Result<GetActionsListWorkflowRunsResponse200, ActionsListWorkflowRunsForRepoError> {

        let mut request_uri = format!("{}/repos/{}/{}/actions/runs", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: ActionsListWorkflowRunsForRepoParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsListWorkflowRunsForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Re-run a job from a workflow run
    ///
    /// Re-run a job and its dependent jobs in a workflow run.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for re_run_job_for_workflow_run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)
    ///
    /// ---
    pub async fn re_run_job_for_workflow_run_async(&self, owner: &str, repo: &str, job_id: i32, body: PostActionsReRunJobForWorkflowRun) -> Result<EmptyObject, ActionsReRunJobForWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/jobs/{}/rerun", super::GITHUB_BASE_API_URL, owner, repo, job_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReRunJobForWorkflowRun::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(ActionsReRunJobForWorkflowRunError::Status403(github_response.to_json_async().await?)),
                code => Err(ActionsReRunJobForWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Re-run a job from a workflow run
    ///
    /// Re-run a job and its dependent jobs in a workflow run.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for re_run_job_for_workflow_run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn re_run_job_for_workflow_run(&self, owner: &str, repo: &str, job_id: i32, body: PostActionsReRunJobForWorkflowRun) -> Result<EmptyObject, ActionsReRunJobForWorkflowRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/jobs/{}/rerun", super::GITHUB_BASE_API_URL, owner, repo, job_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReRunJobForWorkflowRun::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(ActionsReRunJobForWorkflowRunError::Status403(github_response.to_json()?)),
                code => Err(ActionsReRunJobForWorkflowRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Re-run a workflow
    ///
    /// Re-runs your workflow run using its `id`.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for re_run_workflow](https://docs.github.com/rest/actions/workflow-runs#re-run-a-workflow)
    ///
    /// ---
    pub async fn re_run_workflow_async(&self, owner: &str, repo: &str, run_id: i32, body: PostActionsReRunWorkflow) -> Result<EmptyObject, ActionsReRunWorkflowError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/rerun", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReRunWorkflow::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsReRunWorkflowError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Re-run a workflow
    ///
    /// Re-runs your workflow run using its `id`.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for re_run_workflow](https://docs.github.com/rest/actions/workflow-runs#re-run-a-workflow)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn re_run_workflow(&self, owner: &str, repo: &str, run_id: i32, body: PostActionsReRunWorkflow) -> Result<EmptyObject, ActionsReRunWorkflowError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/rerun", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReRunWorkflow::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsReRunWorkflowError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Re-run failed jobs from a workflow run
    ///
    /// Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for re_run_workflow_failed_jobs](https://docs.github.com/rest/actions/workflow-runs#re-run-failed-jobs-from-a-workflow-run)
    ///
    /// ---
    pub async fn re_run_workflow_failed_jobs_async(&self, owner: &str, repo: &str, run_id: i32, body: PostActionsReRunWorkflowFailedJobs) -> Result<EmptyObject, ActionsReRunWorkflowFailedJobsError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/rerun-failed-jobs", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReRunWorkflowFailedJobs::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsReRunWorkflowFailedJobsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Re-run failed jobs from a workflow run
    ///
    /// Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for re_run_workflow_failed_jobs](https://docs.github.com/rest/actions/workflow-runs#re-run-failed-jobs-from-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn re_run_workflow_failed_jobs(&self, owner: &str, repo: &str, run_id: i32, body: PostActionsReRunWorkflowFailedJobs) -> Result<EmptyObject, ActionsReRunWorkflowFailedJobsError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/rerun-failed-jobs", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReRunWorkflowFailedJobs::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsReRunWorkflowFailedJobsError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove all custom labels from a self-hosted runner for an organization
    ///
    /// Remove all custom labels from a self-hosted runner configured in an
    /// organization. Returns the remaining read-only labels from the runner.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for remove_all_custom_labels_from_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    pub async fn remove_all_custom_labels_from_self_hosted_runner_for_org_async(&self, org: &str, runner_id: i32) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError::Status404(github_response.to_json_async().await?)),
                code => Err(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove all custom labels from a self-hosted runner for an organization
    ///
    /// Remove all custom labels from a self-hosted runner configured in an
    /// organization. Returns the remaining read-only labels from the runner.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for remove_all_custom_labels_from_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn remove_all_custom_labels_from_self_hosted_runner_for_org(&self, org: &str, runner_id: i32) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError::Status404(github_response.to_json()?)),
                code => Err(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove all custom labels from a self-hosted runner for a repository
    ///
    /// Remove all custom labels from a self-hosted runner configured in a
    /// repository. Returns the remaining read-only labels from the runner.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for remove_all_custom_labels_from_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    pub async fn remove_all_custom_labels_from_self_hosted_runner_for_repo_async(&self, owner: &str, repo: &str, runner_id: i32) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError::Status404(github_response.to_json_async().await?)),
                code => Err(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove all custom labels from a self-hosted runner for a repository
    ///
    /// Remove all custom labels from a self-hosted runner configured in a
    /// repository. Returns the remaining read-only labels from the runner.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for remove_all_custom_labels_from_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn remove_all_custom_labels_from_self_hosted_runner_for_repo(&self, owner: &str, repo: &str, runner_id: i32) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError::Status404(github_response.to_json()?)),
                code => Err(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove a custom label from a self-hosted runner for an organization
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in an organization. Returns the remaining labels from the runner.
    /// 
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for remove_custom_label_from_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    pub async fn remove_custom_label_from_self_hosted_runner_for_org_async(&self, org: &str, runner_id: i32, name: &str) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels/{}", super::GITHUB_BASE_API_URL, org, runner_id, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError::Status404(github_response.to_json_async().await?)),
                422 => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError::Status422(github_response.to_json_async().await?)),
                code => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove a custom label from a self-hosted runner for an organization
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in an organization. Returns the remaining labels from the runner.
    /// 
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for remove_custom_label_from_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn remove_custom_label_from_self_hosted_runner_for_org(&self, org: &str, runner_id: i32, name: &str) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels/{}", super::GITHUB_BASE_API_URL, org, runner_id, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError::Status404(github_response.to_json()?)),
                422 => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError::Status422(github_response.to_json()?)),
                code => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove a custom label from a self-hosted runner for a repository
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in a repository. Returns the remaining labels from the runner.
    /// 
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for remove_custom_label_from_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    pub async fn remove_custom_label_from_self_hosted_runner_for_repo_async(&self, owner: &str, repo: &str, runner_id: i32, name: &str) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels/{}", super::GITHUB_BASE_API_URL, owner, repo, runner_id, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError::Status404(github_response.to_json_async().await?)),
                422 => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError::Status422(github_response.to_json_async().await?)),
                code => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove a custom label from a self-hosted runner for a repository
    ///
    /// Remove a custom label from a self-hosted runner configured
    /// in a repository. Returns the remaining labels from the runner.
    /// 
    /// This endpoint returns a `404 Not Found` status if the custom label is not
    /// present on the runner.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for remove_custom_label_from_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn remove_custom_label_from_self_hosted_runner_for_repo(&self, owner: &str, repo: &str, runner_id: i32, name: &str) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels/{}", super::GITHUB_BASE_API_URL, owner, repo, runner_id, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError::Status404(github_response.to_json()?)),
                422 => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError::Status422(github_response.to_json()?)),
                code => Err(ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for remove_selected_repo_from_org_secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret)
    ///
    /// ---
    pub async fn remove_selected_repo_from_org_secret_async(&self, org: &str, secret_name: &str, repository_id: i32) -> Result<(), ActionsRemoveSelectedRepoFromOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}/repositories/{}", super::GITHUB_BASE_API_URL, org, secret_name, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsRemoveSelectedRepoFromOrgSecretError::Status409),
                code => Err(ActionsRemoveSelectedRepoFromOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for remove_selected_repo_from_org_secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn remove_selected_repo_from_org_secret(&self, org: &str, secret_name: &str, repository_id: i32) -> Result<(), ActionsRemoveSelectedRepoFromOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}/repositories/{}", super::GITHUB_BASE_API_URL, org, secret_name, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsRemoveSelectedRepoFromOrgSecretError::Status409),
                code => Err(ActionsRemoveSelectedRepoFromOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove selected repository from an organization variable
    ///
    /// Removes a repository from an organization variable that is
    /// available to selected repositories. Organization variables that are available to
    /// selected repositories have their `visibility` field set to `selected`.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for remove_selected_repo_from_org_variable](https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable)
    ///
    /// ---
    pub async fn remove_selected_repo_from_org_variable_async(&self, org: &str, name: &str, repository_id: i32) -> Result<(), ActionsRemoveSelectedRepoFromOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}/repositories/{}", super::GITHUB_BASE_API_URL, org, name, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsRemoveSelectedRepoFromOrgVariableError::Status409),
                code => Err(ActionsRemoveSelectedRepoFromOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Remove selected repository from an organization variable
    ///
    /// Removes a repository from an organization variable that is
    /// available to selected repositories. Organization variables that are available to
    /// selected repositories have their `visibility` field set to `selected`.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for remove_selected_repo_from_org_variable](https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn remove_selected_repo_from_org_variable(&self, org: &str, name: &str, repository_id: i32) -> Result<(), ActionsRemoveSelectedRepoFromOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}/repositories/{}", super::GITHUB_BASE_API_URL, org, name, repository_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsRemoveSelectedRepoFromOrgVariableError::Status409),
                code => Err(ActionsRemoveSelectedRepoFromOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Review custom deployment protection rules for a workflow run
    ///
    /// Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    /// 
    /// > [!NOTE]
    /// > GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for review_custom_gates_for_run](https://docs.github.com/rest/actions/workflow-runs#review-custom-deployment-protection-rules-for-a-workflow-run)
    ///
    /// ---
    pub async fn review_custom_gates_for_run_async(&self, owner: &str, repo: &str, run_id: i32, body: PostActionsReviewCustomGatesForRun) -> Result<(), ActionsReviewCustomGatesForRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/deployment_protection_rule", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReviewCustomGatesForRun::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsReviewCustomGatesForRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Review custom deployment protection rules for a workflow run
    ///
    /// Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    /// 
    /// > [!NOTE]
    /// > GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
    ///
    /// [GitHub API docs for review_custom_gates_for_run](https://docs.github.com/rest/actions/workflow-runs#review-custom-deployment-protection-rules-for-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn review_custom_gates_for_run(&self, owner: &str, repo: &str, run_id: i32, body: PostActionsReviewCustomGatesForRun) -> Result<(), ActionsReviewCustomGatesForRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/deployment_protection_rule", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReviewCustomGatesForRun::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsReviewCustomGatesForRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Review pending deployments for a workflow run
    ///
    /// Approve or reject pending deployments that are waiting on approval by a required reviewer.
    /// 
    /// Required reviewers with read access to the repository contents and deployments can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for review_pending_deployments_for_run](https://docs.github.com/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run)
    ///
    /// ---
    pub async fn review_pending_deployments_for_run_async(&self, owner: &str, repo: &str, run_id: i32, body: PostActionsReviewPendingDeploymentsForRun) -> Result<Vec<Deployment>, ActionsReviewPendingDeploymentsForRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/pending_deployments", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReviewPendingDeploymentsForRun::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsReviewPendingDeploymentsForRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Review pending deployments for a workflow run
    ///
    /// Approve or reject pending deployments that are waiting on approval by a required reviewer.
    /// 
    /// Required reviewers with read access to the repository contents and deployments can use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for review_pending_deployments_for_run](https://docs.github.com/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn review_pending_deployments_for_run(&self, owner: &str, repo: &str, run_id: i32, body: PostActionsReviewPendingDeploymentsForRun) -> Result<Vec<Deployment>, ActionsReviewPendingDeploymentsForRunError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runs/{}/pending_deployments", super::GITHUB_BASE_API_URL, owner, repo, run_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PostActionsReviewPendingDeploymentsForRun::from_json(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsReviewPendingDeploymentsForRunError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set allowed actions and reusable workflows for an organization
    ///
    /// Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_allowed_actions_organization](https://docs.github.com/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-an-organization)
    ///
    /// ---
    pub async fn set_allowed_actions_organization_async(&self, org: &str, body: PutActionsSetAllowedActionsRepository) -> Result<(), ActionsSetAllowedActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/selected-actions", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetAllowedActionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetAllowedActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set allowed actions and reusable workflows for an organization
    ///
    /// Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_allowed_actions_organization](https://docs.github.com/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_allowed_actions_organization(&self, org: &str, body: PutActionsSetAllowedActionsRepository) -> Result<(), ActionsSetAllowedActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/selected-actions", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetAllowedActionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetAllowedActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set allowed actions and reusable workflows for a repository
    ///
    /// Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_allowed_actions_repository](https://docs.github.com/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-a-repository)
    ///
    /// ---
    pub async fn set_allowed_actions_repository_async(&self, owner: &str, repo: &str, body: PutActionsSetAllowedActionsRepository) -> Result<(), ActionsSetAllowedActionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/selected-actions", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetAllowedActionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetAllowedActionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set allowed actions and reusable workflows for a repository
    ///
    /// Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_allowed_actions_repository](https://docs.github.com/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_allowed_actions_repository(&self, owner: &str, repo: &str, body: PutActionsSetAllowedActionsRepository) -> Result<(), ActionsSetAllowedActionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/selected-actions", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetAllowedActionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetAllowedActionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set custom labels for a self-hosted runner for an organization
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for set_custom_labels_for_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    pub async fn set_custom_labels_for_self_hosted_runner_for_org_async(&self, org: &str, runner_id: i32, body: PutActionsSetCustomLabelsForSelfHostedRunnerForOrg) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsSetCustomLabelsForSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetCustomLabelsForSelfHostedRunnerForOrg::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsSetCustomLabelsForSelfHostedRunnerForOrgError::Status404(github_response.to_json_async().await?)),
                422 => Err(ActionsSetCustomLabelsForSelfHostedRunnerForOrgError::Status422(github_response.to_json_async().await?)),
                code => Err(ActionsSetCustomLabelsForSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set custom labels for a self-hosted runner for an organization
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in an organization.
    /// 
    /// Authenticated users must have admin access to the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for set_custom_labels_for_self_hosted_runner_for_org](https://docs.github.com/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_custom_labels_for_self_hosted_runner_for_org(&self, org: &str, runner_id: i32, body: PutActionsSetCustomLabelsForSelfHostedRunnerForOrg) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsSetCustomLabelsForSelfHostedRunnerForOrgError> {

        let request_uri = format!("{}/orgs/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, org, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetCustomLabelsForSelfHostedRunnerForOrg::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsSetCustomLabelsForSelfHostedRunnerForOrgError::Status404(github_response.to_json()?)),
                422 => Err(ActionsSetCustomLabelsForSelfHostedRunnerForOrgError::Status422(github_response.to_json()?)),
                code => Err(ActionsSetCustomLabelsForSelfHostedRunnerForOrgError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set custom labels for a self-hosted runner for a repository
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in a repository.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_custom_labels_for_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    pub async fn set_custom_labels_for_self_hosted_runner_for_repo_async(&self, owner: &str, repo: &str, runner_id: i32, body: PutActionsSetCustomLabelsForSelfHostedRunnerForRepo) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsSetCustomLabelsForSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetCustomLabelsForSelfHostedRunnerForRepo::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsSetCustomLabelsForSelfHostedRunnerForRepoError::Status404(github_response.to_json_async().await?)),
                422 => Err(ActionsSetCustomLabelsForSelfHostedRunnerForRepoError::Status422(github_response.to_json_async().await?)),
                code => Err(ActionsSetCustomLabelsForSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set custom labels for a self-hosted runner for a repository
    ///
    /// Remove all previous custom labels and set the new custom labels for a specific
    /// self-hosted runner configured in a repository.
    /// 
    /// Authenticated users must have admin access to the repository to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_custom_labels_for_self_hosted_runner_for_repo](https://docs.github.com/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_custom_labels_for_self_hosted_runner_for_repo(&self, owner: &str, repo: &str, runner_id: i32, body: PutActionsSetCustomLabelsForSelfHostedRunnerForRepo) -> Result<DeleteActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse200, ActionsSetCustomLabelsForSelfHostedRunnerForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/runners/{}/labels", super::GITHUB_BASE_API_URL, owner, repo, runner_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetCustomLabelsForSelfHostedRunnerForRepo::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsSetCustomLabelsForSelfHostedRunnerForRepoError::Status404(github_response.to_json()?)),
                422 => Err(ActionsSetCustomLabelsForSelfHostedRunnerForRepoError::Status422(github_response.to_json()?)),
                code => Err(ActionsSetCustomLabelsForSelfHostedRunnerForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set the customization template for an OIDC subject claim for a repository
    ///
    /// Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_custom_oidc_sub_claim_for_repo](https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository)
    ///
    /// ---
    pub async fn set_custom_oidc_sub_claim_for_repo_async(&self, owner: &str, repo: &str, body: ActionsOidcSubjectCustomizationForARepository) -> Result<EmptyObject, ActionsSetCustomOidcSubClaimForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/oidc/customization/sub", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(ActionsOidcSubjectCustomizationForARepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsSetCustomOidcSubClaimForRepoError::Status404(github_response.to_json_async().await?)),
                400 => Err(ActionsSetCustomOidcSubClaimForRepoError::Status400(github_response.to_json_async().await?)),
                422 => Err(ActionsSetCustomOidcSubClaimForRepoError::Status422(github_response.to_json_async().await?)),
                code => Err(ActionsSetCustomOidcSubClaimForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set the customization template for an OIDC subject claim for a repository
    ///
    /// Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_custom_oidc_sub_claim_for_repo](https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_custom_oidc_sub_claim_for_repo(&self, owner: &str, repo: &str, body: ActionsOidcSubjectCustomizationForARepository) -> Result<EmptyObject, ActionsSetCustomOidcSubClaimForRepoError> {

        let request_uri = format!("{}/repos/{}/{}/actions/oidc/customization/sub", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(ActionsOidcSubjectCustomizationForARepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(ActionsSetCustomOidcSubClaimForRepoError::Status404(github_response.to_json()?)),
                400 => Err(ActionsSetCustomOidcSubClaimForRepoError::Status400(github_response.to_json()?)),
                422 => Err(ActionsSetCustomOidcSubClaimForRepoError::Status422(github_response.to_json()?)),
                code => Err(ActionsSetCustomOidcSubClaimForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set default workflow permissions for an organization
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
    /// can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_github_actions_default_workflow_permissions_organization](https://docs.github.com/rest/actions/permissions#set-default-workflow-permissions-for-an-organization)
    ///
    /// ---
    pub async fn set_github_actions_default_workflow_permissions_organization_async(&self, org: &str, body: PutActionsSetGithubActionsDefaultWorkflowPermissionsRepository) -> Result<(), ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/workflow", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetGithubActionsDefaultWorkflowPermissionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set default workflow permissions for an organization
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
    /// can submit approving pull request reviews. For more information, see
    /// "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_github_actions_default_workflow_permissions_organization](https://docs.github.com/rest/actions/permissions#set-default-workflow-permissions-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_github_actions_default_workflow_permissions_organization(&self, org: &str, body: PutActionsSetGithubActionsDefaultWorkflowPermissionsRepository) -> Result<(), ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/workflow", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetGithubActionsDefaultWorkflowPermissionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set default workflow permissions for a repository
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
    /// can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_github_actions_default_workflow_permissions_repository](https://docs.github.com/rest/actions/permissions#set-default-workflow-permissions-for-a-repository)
    ///
    /// ---
    pub async fn set_github_actions_default_workflow_permissions_repository_async(&self, owner: &str, repo: &str, body: PutActionsSetGithubActionsDefaultWorkflowPermissionsRepository) -> Result<(), ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/workflow", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetGithubActionsDefaultWorkflowPermissionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError::Status409),
                code => Err(ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set default workflow permissions for a repository
    ///
    /// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
    /// can submit approving pull request reviews.
    /// For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_github_actions_default_workflow_permissions_repository](https://docs.github.com/rest/actions/permissions#set-default-workflow-permissions-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_github_actions_default_workflow_permissions_repository(&self, owner: &str, repo: &str, body: PutActionsSetGithubActionsDefaultWorkflowPermissionsRepository) -> Result<(), ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/workflow", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetGithubActionsDefaultWorkflowPermissionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError::Status409),
                code => Err(ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set GitHub Actions permissions for an organization
    ///
    /// Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_github_actions_permissions_organization](https://docs.github.com/rest/actions/permissions#set-github-actions-permissions-for-an-organization)
    ///
    /// ---
    pub async fn set_github_actions_permissions_organization_async(&self, org: &str, body: PutActionsSetGithubActionsPermissionsOrganization) -> Result<(), ActionsSetGithubActionsPermissionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetGithubActionsPermissionsOrganization::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetGithubActionsPermissionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set GitHub Actions permissions for an organization
    ///
    /// Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_github_actions_permissions_organization](https://docs.github.com/rest/actions/permissions#set-github-actions-permissions-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_github_actions_permissions_organization(&self, org: &str, body: PutActionsSetGithubActionsPermissionsOrganization) -> Result<(), ActionsSetGithubActionsPermissionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetGithubActionsPermissionsOrganization::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetGithubActionsPermissionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set GitHub Actions permissions for a repository
    ///
    /// Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_github_actions_permissions_repository](https://docs.github.com/rest/actions/permissions#set-github-actions-permissions-for-a-repository)
    ///
    /// ---
    pub async fn set_github_actions_permissions_repository_async(&self, owner: &str, repo: &str, body: PutActionsSetGithubActionsPermissionsRepository) -> Result<(), ActionsSetGithubActionsPermissionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetGithubActionsPermissionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetGithubActionsPermissionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set GitHub Actions permissions for a repository
    ///
    /// Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_github_actions_permissions_repository](https://docs.github.com/rest/actions/permissions#set-github-actions-permissions-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_github_actions_permissions_repository(&self, owner: &str, repo: &str, body: PutActionsSetGithubActionsPermissionsRepository) -> Result<(), ActionsSetGithubActionsPermissionsRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetGithubActionsPermissionsRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetGithubActionsPermissionsRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for set_selected_repos_for_org_secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret)
    ///
    /// ---
    pub async fn set_selected_repos_for_org_secret_async(&self, org: &str, secret_name: &str, body: PutActionsSetSelectedReposForOrgSecret) -> Result<(), ActionsSetSelectedReposForOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}/repositories", super::GITHUB_BASE_API_URL, org, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetSelectedReposForOrgSecret::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetSelectedReposForOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for set_selected_repos_for_org_secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_selected_repos_for_org_secret(&self, org: &str, secret_name: &str, body: PutActionsSetSelectedReposForOrgSecret) -> Result<(), ActionsSetSelectedReposForOrgSecretError> {

        let request_uri = format!("{}/orgs/{}/actions/secrets/{}/repositories", super::GITHUB_BASE_API_URL, org, secret_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetSelectedReposForOrgSecret::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetSelectedReposForOrgSecretError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set selected repositories for an organization variable
    ///
    /// Replaces all repositories for an organization variable that is available
    /// to selected repositories. Organization variables that are available to selected
    /// repositories have their `visibility` field set to `selected`.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for set_selected_repos_for_org_variable](https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable)
    ///
    /// ---
    pub async fn set_selected_repos_for_org_variable_async(&self, org: &str, name: &str, body: PutActionsSetSelectedReposForOrgVariable) -> Result<(), ActionsSetSelectedReposForOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}/repositories", super::GITHUB_BASE_API_URL, org, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetSelectedReposForOrgVariable::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsSetSelectedReposForOrgVariableError::Status409),
                code => Err(ActionsSetSelectedReposForOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set selected repositories for an organization variable
    ///
    /// Replaces all repositories for an organization variable that is available
    /// to selected repositories. Organization variables that are available to selected
    /// repositories have their `visibility` field set to `selected`.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for set_selected_repos_for_org_variable](https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_selected_repos_for_org_variable(&self, org: &str, name: &str, body: PutActionsSetSelectedReposForOrgVariable) -> Result<(), ActionsSetSelectedReposForOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}/repositories", super::GITHUB_BASE_API_URL, org, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetSelectedReposForOrgVariable::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                409 => Err(ActionsSetSelectedReposForOrgVariableError::Status409),
                code => Err(ActionsSetSelectedReposForOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set selected repositories enabled for GitHub Actions in an organization
    ///
    /// Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_selected_repositories_enabled_github_actions_organization](https://docs.github.com/rest/actions/permissions#set-selected-repositories-enabled-for-github-actions-in-an-organization)
    ///
    /// ---
    pub async fn set_selected_repositories_enabled_github_actions_organization_async(&self, org: &str, body: PutActionsSetSelectedRepositoriesEnabledGithubActionsOrganization) -> Result<(), ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/repositories", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetSelectedRepositoriesEnabledGithubActionsOrganization::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set selected repositories enabled for GitHub Actions in an organization
    ///
    /// Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    /// 
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_selected_repositories_enabled_github_actions_organization](https://docs.github.com/rest/actions/permissions#set-selected-repositories-enabled-for-github-actions-in-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_selected_repositories_enabled_github_actions_organization(&self, org: &str, body: PutActionsSetSelectedRepositoriesEnabledGithubActionsOrganization) -> Result<(), ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError> {

        let request_uri = format!("{}/orgs/{}/actions/permissions/repositories", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PutActionsSetSelectedRepositoriesEnabledGithubActionsOrganization::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set the level of access for workflows outside of the repository
    ///
    /// Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_workflow_access_to_repository](https://docs.github.com/rest/actions/permissions#set-the-level-of-access-for-workflows-outside-of-the-repository)
    ///
    /// ---
    pub async fn set_workflow_access_to_repository_async(&self, owner: &str, repo: &str, body: ActionsWorkflowAccessToRepository) -> Result<(), ActionsSetWorkflowAccessToRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/access", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(ActionsWorkflowAccessToRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetWorkflowAccessToRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Set the level of access for workflows outside of the repository
    ///
    /// Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    /// This endpoint only applies to private repositories.
    /// For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for set_workflow_access_to_repository](https://docs.github.com/rest/actions/permissions#set-the-level-of-access-for-workflows-outside-of-the-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_workflow_access_to_repository(&self, owner: &str, repo: &str, body: ActionsWorkflowAccessToRepository) -> Result<(), ActionsSetWorkflowAccessToRepositoryError> {

        let request_uri = format!("{}/repos/{}/{}/actions/permissions/access", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(ActionsWorkflowAccessToRepository::from_json(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsSetWorkflowAccessToRepositoryError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Update an environment variable
    ///
    /// Updates an environment variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for update_environment_variable](https://docs.github.com/rest/actions/variables#update-an-environment-variable)
    ///
    /// ---
    pub async fn update_environment_variable_async(&self, owner: &str, repo: &str, name: &str, environment_name: &str, body: PatchActionsUpdateEnvironmentVariable) -> Result<(), ActionsUpdateEnvironmentVariableError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name, environment_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PatchActionsUpdateEnvironmentVariable::from_json(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsUpdateEnvironmentVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Update an environment variable
    ///
    /// Updates an environment variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for update_environment_variable](https://docs.github.com/rest/actions/variables#update-an-environment-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn update_environment_variable(&self, owner: &str, repo: &str, name: &str, environment_name: &str, body: PatchActionsUpdateEnvironmentVariable) -> Result<(), ActionsUpdateEnvironmentVariableError> {

        let request_uri = format!("{}/repos/{}/{}/environments/{}/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name, environment_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PatchActionsUpdateEnvironmentVariable::from_json(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsUpdateEnvironmentVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Update an organization variable
    ///
    /// Updates an organization variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for update_org_variable](https://docs.github.com/rest/actions/variables#update-an-organization-variable)
    ///
    /// ---
    pub async fn update_org_variable_async(&self, org: &str, name: &str, body: PatchActionsUpdateOrgVariable) -> Result<(), ActionsUpdateOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, org, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PatchActionsUpdateOrgVariable::from_json(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsUpdateOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Update an organization variable
    ///
    /// Updates an organization variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
    ///
    /// [GitHub API docs for update_org_variable](https://docs.github.com/rest/actions/variables#update-an-organization-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn update_org_variable(&self, org: &str, name: &str, body: PatchActionsUpdateOrgVariable) -> Result<(), ActionsUpdateOrgVariableError> {

        let request_uri = format!("{}/orgs/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, org, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PatchActionsUpdateOrgVariable::from_json(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsUpdateOrgVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Update a repository variable
    ///
    /// Updates a repository variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for update_repo_variable](https://docs.github.com/rest/actions/variables#update-a-repository-variable)
    ///
    /// ---
    pub async fn update_repo_variable_async(&self, owner: &str, repo: &str, name: &str, body: PatchActionsUpdateRepoVariable) -> Result<(), ActionsUpdateRepoVariableError> {

        let request_uri = format!("{}/repos/{}/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PatchActionsUpdateRepoVariable::from_json(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsUpdateRepoVariableError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Update a repository variable
    ///
    /// Updates a repository variable that you can reference in a GitHub Actions workflow.
    /// 
    /// Authenticated users must have collaborator access to a repository to create, update, or read variables.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for update_repo_variable](https://docs.github.com/rest/actions/variables#update-a-repository-variable)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn update_repo_variable(&self, owner: &str, repo: &str, name: &str, body: PatchActionsUpdateRepoVariable) -> Result<(), ActionsUpdateRepoVariableError> {

        let request_uri = format!("{}/repos/{}/{}/actions/variables/{}", super::GITHUB_BASE_API_URL, owner, repo, name);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(PatchActionsUpdateRepoVariable::from_json(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.client)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(ActionsUpdateRepoVariableError::Generic { code }),
            }
        }
    }

}
