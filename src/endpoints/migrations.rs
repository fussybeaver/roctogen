//! Method, error and parameter types for the Migrations endpoint.
#![allow(
    clippy::all
)]
/* 
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * OpenAPI spec version: 1.1.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::adapters::{AdapterError, Client, GitHubRequest, GitHubResponseExt};
use crate::models::*;

use super::PerPage;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct Migrations<'api, C: Client> where AdapterError: From<<C as Client>::Err> {
    client: &'api C
}

pub fn new<C: Client>(client: &C) -> Migrations<C> where AdapterError: From<<C as Client>::Err> {
    Migrations { client }
}

/// Errors for the [Cancel an import](Migrations::cancel_import_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsCancelImportError {
    #[error("Unavailable due to service under maintenance.")]
    Status503(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsCancelImportError> for AdapterError {
    fn from(err: MigrationsCancelImportError) -> Self {
        let (description, status_code) = match err {
            MigrationsCancelImportError::Status503(_) => (String::from("Unavailable due to service under maintenance."), 503),
            MigrationsCancelImportError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Delete a user migration archive](Migrations::delete_archive_for_authenticated_user_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsDeleteArchiveForAuthenticatedUserError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Not modified")]
    Status304,
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsDeleteArchiveForAuthenticatedUserError> for AdapterError {
    fn from(err: MigrationsDeleteArchiveForAuthenticatedUserError) -> Self {
        let (description, status_code) = match err {
            MigrationsDeleteArchiveForAuthenticatedUserError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsDeleteArchiveForAuthenticatedUserError::Status304 => (String::from("Not modified"), 304),
            MigrationsDeleteArchiveForAuthenticatedUserError::Status403(_) => (String::from("Forbidden"), 403),
            MigrationsDeleteArchiveForAuthenticatedUserError::Status401(_) => (String::from("Requires authentication"), 401),
            MigrationsDeleteArchiveForAuthenticatedUserError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Delete an organization migration archive](Migrations::delete_archive_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsDeleteArchiveForOrgError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsDeleteArchiveForOrgError> for AdapterError {
    fn from(err: MigrationsDeleteArchiveForOrgError) -> Self {
        let (description, status_code) = match err {
            MigrationsDeleteArchiveForOrgError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsDeleteArchiveForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Download an organization migration archive](Migrations::download_archive_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsDownloadArchiveForOrgError {
    #[error("Response")]
    Status302,
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsDownloadArchiveForOrgError> for AdapterError {
    fn from(err: MigrationsDownloadArchiveForOrgError) -> Self {
        let (description, status_code) = match err {
            MigrationsDownloadArchiveForOrgError::Status302 => (String::from("Response"), 302),
            MigrationsDownloadArchiveForOrgError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsDownloadArchiveForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Download a user migration archive](Migrations::get_archive_for_authenticated_user_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsGetArchiveForAuthenticatedUserError {
    #[error("Response")]
    Status302,
    #[error("Not modified")]
    Status304,
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsGetArchiveForAuthenticatedUserError> for AdapterError {
    fn from(err: MigrationsGetArchiveForAuthenticatedUserError) -> Self {
        let (description, status_code) = match err {
            MigrationsGetArchiveForAuthenticatedUserError::Status302 => (String::from("Response"), 302),
            MigrationsGetArchiveForAuthenticatedUserError::Status304 => (String::from("Not modified"), 304),
            MigrationsGetArchiveForAuthenticatedUserError::Status403(_) => (String::from("Forbidden"), 403),
            MigrationsGetArchiveForAuthenticatedUserError::Status401(_) => (String::from("Requires authentication"), 401),
            MigrationsGetArchiveForAuthenticatedUserError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get commit authors](Migrations::get_commit_authors_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsGetCommitAuthorsError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Unavailable due to service under maintenance.")]
    Status503(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsGetCommitAuthorsError> for AdapterError {
    fn from(err: MigrationsGetCommitAuthorsError) -> Self {
        let (description, status_code) = match err {
            MigrationsGetCommitAuthorsError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsGetCommitAuthorsError::Status503(_) => (String::from("Unavailable due to service under maintenance."), 503),
            MigrationsGetCommitAuthorsError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get an import status](Migrations::get_import_status_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsGetImportStatusError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Unavailable due to service under maintenance.")]
    Status503(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsGetImportStatusError> for AdapterError {
    fn from(err: MigrationsGetImportStatusError) -> Self {
        let (description, status_code) = match err {
            MigrationsGetImportStatusError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsGetImportStatusError::Status503(_) => (String::from("Unavailable due to service under maintenance."), 503),
            MigrationsGetImportStatusError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get large files](Migrations::get_large_files_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsGetLargeFilesError {
    #[error("Unavailable due to service under maintenance.")]
    Status503(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsGetLargeFilesError> for AdapterError {
    fn from(err: MigrationsGetLargeFilesError) -> Self {
        let (description, status_code) = match err {
            MigrationsGetLargeFilesError::Status503(_) => (String::from("Unavailable due to service under maintenance."), 503),
            MigrationsGetLargeFilesError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a user migration status](Migrations::get_status_for_authenticated_user_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsGetStatusForAuthenticatedUserError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Not modified")]
    Status304,
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsGetStatusForAuthenticatedUserError> for AdapterError {
    fn from(err: MigrationsGetStatusForAuthenticatedUserError) -> Self {
        let (description, status_code) = match err {
            MigrationsGetStatusForAuthenticatedUserError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsGetStatusForAuthenticatedUserError::Status304 => (String::from("Not modified"), 304),
            MigrationsGetStatusForAuthenticatedUserError::Status403(_) => (String::from("Forbidden"), 403),
            MigrationsGetStatusForAuthenticatedUserError::Status401(_) => (String::from("Requires authentication"), 401),
            MigrationsGetStatusForAuthenticatedUserError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get an organization migration status](Migrations::get_status_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsGetStatusForOrgError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsGetStatusForOrgError> for AdapterError {
    fn from(err: MigrationsGetStatusForOrgError) -> Self {
        let (description, status_code) = match err {
            MigrationsGetStatusForOrgError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsGetStatusForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List user migrations](Migrations::list_for_authenticated_user_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsListForAuthenticatedUserError {
    #[error("Not modified")]
    Status304,
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsListForAuthenticatedUserError> for AdapterError {
    fn from(err: MigrationsListForAuthenticatedUserError) -> Self {
        let (description, status_code) = match err {
            MigrationsListForAuthenticatedUserError::Status304 => (String::from("Not modified"), 304),
            MigrationsListForAuthenticatedUserError::Status403(_) => (String::from("Forbidden"), 403),
            MigrationsListForAuthenticatedUserError::Status401(_) => (String::from("Requires authentication"), 401),
            MigrationsListForAuthenticatedUserError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List organization migrations](Migrations::list_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsListForOrgError {
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsListForOrgError> for AdapterError {
    fn from(err: MigrationsListForOrgError) -> Self {
        let (description, status_code) = match err {
            MigrationsListForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List repositories for a user migration](Migrations::list_repos_for_authenticated_user_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsListReposForAuthenticatedUserError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsListReposForAuthenticatedUserError> for AdapterError {
    fn from(err: MigrationsListReposForAuthenticatedUserError) -> Self {
        let (description, status_code) = match err {
            MigrationsListReposForAuthenticatedUserError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsListReposForAuthenticatedUserError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List repositories in an organization migration](Migrations::list_repos_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsListReposForOrgError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsListReposForOrgError> for AdapterError {
    fn from(err: MigrationsListReposForOrgError) -> Self {
        let (description, status_code) = match err {
            MigrationsListReposForOrgError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsListReposForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Map a commit author](Migrations::map_commit_author_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsMapCommitAuthorError {
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Unavailable due to service under maintenance.")]
    Status503(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsMapCommitAuthorError> for AdapterError {
    fn from(err: MigrationsMapCommitAuthorError) -> Self {
        let (description, status_code) = match err {
            MigrationsMapCommitAuthorError::Status422(_) => (String::from("Validation failed, or the endpoint has been spammed."), 422),
            MigrationsMapCommitAuthorError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsMapCommitAuthorError::Status503(_) => (String::from("Unavailable due to service under maintenance."), 503),
            MigrationsMapCommitAuthorError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Update Git LFS preference](Migrations::set_lfs_preference_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsSetLfsPreferenceError {
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationError),
    #[error("Unavailable due to service under maintenance.")]
    Status503(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsSetLfsPreferenceError> for AdapterError {
    fn from(err: MigrationsSetLfsPreferenceError) -> Self {
        let (description, status_code) = match err {
            MigrationsSetLfsPreferenceError::Status422(_) => (String::from("Validation failed, or the endpoint has been spammed."), 422),
            MigrationsSetLfsPreferenceError::Status503(_) => (String::from("Unavailable due to service under maintenance."), 503),
            MigrationsSetLfsPreferenceError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Start a user migration](Migrations::start_for_authenticated_user_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsStartForAuthenticatedUserError {
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationError),
    #[error("Not modified")]
    Status304,
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsStartForAuthenticatedUserError> for AdapterError {
    fn from(err: MigrationsStartForAuthenticatedUserError) -> Self {
        let (description, status_code) = match err {
            MigrationsStartForAuthenticatedUserError::Status422(_) => (String::from("Validation failed, or the endpoint has been spammed."), 422),
            MigrationsStartForAuthenticatedUserError::Status304 => (String::from("Not modified"), 304),
            MigrationsStartForAuthenticatedUserError::Status403(_) => (String::from("Forbidden"), 403),
            MigrationsStartForAuthenticatedUserError::Status401(_) => (String::from("Requires authentication"), 401),
            MigrationsStartForAuthenticatedUserError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Start an organization migration](Migrations::start_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsStartForOrgError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsStartForOrgError> for AdapterError {
    fn from(err: MigrationsStartForOrgError) -> Self {
        let (description, status_code) = match err {
            MigrationsStartForOrgError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsStartForOrgError::Status422(_) => (String::from("Validation failed, or the endpoint has been spammed."), 422),
            MigrationsStartForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Start an import](Migrations::start_import_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsStartImportError {
    #[error("Validation failed, or the endpoint has been spammed.")]
    Status422(ValidationError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Unavailable due to service under maintenance.")]
    Status503(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsStartImportError> for AdapterError {
    fn from(err: MigrationsStartImportError) -> Self {
        let (description, status_code) = match err {
            MigrationsStartImportError::Status422(_) => (String::from("Validation failed, or the endpoint has been spammed."), 422),
            MigrationsStartImportError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsStartImportError::Status503(_) => (String::from("Unavailable due to service under maintenance."), 503),
            MigrationsStartImportError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Unlock a user repository](Migrations::unlock_repo_for_authenticated_user_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsUnlockRepoForAuthenticatedUserError {
    #[error("Not modified")]
    Status304,
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsUnlockRepoForAuthenticatedUserError> for AdapterError {
    fn from(err: MigrationsUnlockRepoForAuthenticatedUserError) -> Self {
        let (description, status_code) = match err {
            MigrationsUnlockRepoForAuthenticatedUserError::Status304 => (String::from("Not modified"), 304),
            MigrationsUnlockRepoForAuthenticatedUserError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsUnlockRepoForAuthenticatedUserError::Status403(_) => (String::from("Forbidden"), 403),
            MigrationsUnlockRepoForAuthenticatedUserError::Status401(_) => (String::from("Requires authentication"), 401),
            MigrationsUnlockRepoForAuthenticatedUserError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Unlock an organization repository](Migrations::unlock_repo_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsUnlockRepoForOrgError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsUnlockRepoForOrgError> for AdapterError {
    fn from(err: MigrationsUnlockRepoForOrgError) -> Self {
        let (description, status_code) = match err {
            MigrationsUnlockRepoForOrgError::Status404(_) => (String::from("Resource not found"), 404),
            MigrationsUnlockRepoForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Update an import](Migrations::update_import_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum MigrationsUpdateImportError {
    #[error("Unavailable due to service under maintenance.")]
    Status503(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<MigrationsUpdateImportError> for AdapterError {
    fn from(err: MigrationsUpdateImportError) -> Self {
        let (description, status_code) = match err {
            MigrationsUpdateImportError::Status503(_) => (String::from("Unavailable due to service under maintenance."), 503),
            MigrationsUpdateImportError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}


/// Query parameters for the [Get commit authors](Migrations::get_commit_authors_async()) endpoint.
#[derive(Default, Serialize)]
pub struct MigrationsGetCommitAuthorsParams {
    /// A user ID. Only return users with an ID greater than this ID.
    since: Option<i32>
}

impl MigrationsGetCommitAuthorsParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// A user ID. Only return users with an ID greater than this ID.
    pub fn since(self, since: i32) -> Self {
        Self {
            since: Some(since),
        }
    }
}

/// Query parameters for the [Get a user migration status](Migrations::get_status_for_authenticated_user_async()) endpoint.
#[derive(Default, Serialize)]
pub struct MigrationsGetStatusForAuthenticatedUserParams {
    
    exclude: Option<Vec<String>>
}

impl MigrationsGetStatusForAuthenticatedUserParams {
    pub fn new() -> Self {
        Self::default()
    }

    
    pub fn exclude(self, exclude: Vec<String>) -> Self {
        Self {
            exclude: Some(exclude),
        }
    }
}

/// Query parameters for the [Get an organization migration status](Migrations::get_status_for_org_async()) endpoint.
#[derive(Default, Serialize)]
pub struct MigrationsGetStatusForOrgParams {
    /// Exclude attributes from the API response to improve performance
    exclude: Option<Vec<String>>
}

impl MigrationsGetStatusForOrgParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// Exclude attributes from the API response to improve performance
    pub fn exclude(self, exclude: Vec<String>) -> Self {
        Self {
            exclude: Some(exclude),
        }
    }
}

/// Query parameters for the [List user migrations](Migrations::list_for_authenticated_user_async()) endpoint.
#[derive(Default, Serialize)]
pub struct MigrationsListForAuthenticatedUserParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl MigrationsListForAuthenticatedUserParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for MigrationsListForAuthenticatedUserParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List organization migrations](Migrations::list_for_org_async()) endpoint.
#[derive(Default, Serialize)]
pub struct MigrationsListForOrgParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// Exclude attributes from the API response to improve performance
    exclude: Option<Vec<String>>
}

impl MigrationsListForOrgParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
            exclude: self.exclude, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
            exclude: self.exclude, 
        }
    }

    /// Exclude attributes from the API response to improve performance
    pub fn exclude(self, exclude: Vec<String>) -> Self {
        Self {
            per_page: self.per_page, 
            page: self.page, 
            exclude: Some(exclude),
        }
    }
}

impl<'enc> From<&'enc PerPage> for MigrationsListForOrgParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List repositories for a user migration](Migrations::list_repos_for_authenticated_user_async()) endpoint.
#[derive(Default, Serialize)]
pub struct MigrationsListReposForAuthenticatedUserParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl MigrationsListReposForAuthenticatedUserParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for MigrationsListReposForAuthenticatedUserParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List repositories in an organization migration](Migrations::list_repos_for_org_async()) endpoint.
#[derive(Default, Serialize)]
pub struct MigrationsListReposForOrgParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl MigrationsListReposForOrgParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for MigrationsListReposForOrgParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}

impl<'api, C: Client> Migrations<'api, C> where AdapterError: From<<C as Client>::Err> {
    /// ---
    ///
    /// # Cancel an import
    ///
    /// Stop an import for a repository.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for cancel_import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import)
    ///
    /// ---
    pub async fn cancel_import_async(&self, owner: &str, repo: &str) -> Result<(), AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                503 => Err(MigrationsCancelImportError::Status503(github_response.to_json_async().await?).into()),
                code => Err(MigrationsCancelImportError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Cancel an import
    ///
    /// Stop an import for a repository.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for cancel_import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn cancel_import(&self, owner: &str, repo: &str) -> Result<(), AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                503 => Err(MigrationsCancelImportError::Status503(github_response.to_json()?).into()),
                code => Err(MigrationsCancelImportError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete a user migration archive
    ///
    /// Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
    ///
    /// [GitHub API docs for delete_archive_for_authenticated_user](https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive)
    ///
    /// ---
    pub async fn delete_archive_for_authenticated_user_async(&self, migration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/user/migrations/{}/archive", super::GITHUB_BASE_API_URL, migration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Status404(github_response.to_json_async().await?).into()),
                304 => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Status403(github_response.to_json_async().await?).into()),
                401 => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Status401(github_response.to_json_async().await?).into()),
                code => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete a user migration archive
    ///
    /// Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
    ///
    /// [GitHub API docs for delete_archive_for_authenticated_user](https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_archive_for_authenticated_user(&self, migration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/user/migrations/{}/archive", super::GITHUB_BASE_API_URL, migration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Status404(github_response.to_json()?).into()),
                304 => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Status403(github_response.to_json()?).into()),
                401 => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Status401(github_response.to_json()?).into()),
                code => Err(MigrationsDeleteArchiveForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete an organization migration archive
    ///
    /// Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
    ///
    /// [GitHub API docs for delete_archive_for_org](https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive)
    ///
    /// ---
    pub async fn delete_archive_for_org_async(&self, org: &str, migration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/migrations/{}/archive", super::GITHUB_BASE_API_URL, org, migration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsDeleteArchiveForOrgError::Status404(github_response.to_json_async().await?).into()),
                code => Err(MigrationsDeleteArchiveForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete an organization migration archive
    ///
    /// Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
    ///
    /// [GitHub API docs for delete_archive_for_org](https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_archive_for_org(&self, org: &str, migration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/migrations/{}/archive", super::GITHUB_BASE_API_URL, org, migration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsDeleteArchiveForOrgError::Status404(github_response.to_json()?).into()),
                code => Err(MigrationsDeleteArchiveForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Download an organization migration archive
    ///
    /// Fetches the URL to a migration archive.
    ///
    /// [GitHub API docs for download_archive_for_org](https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive)
    ///
    /// ---
    pub async fn download_archive_for_org_async(&self, org: &str, migration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/migrations/{}/archive", super::GITHUB_BASE_API_URL, org, migration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                302 => Err(MigrationsDownloadArchiveForOrgError::Status302.into()),
                404 => Err(MigrationsDownloadArchiveForOrgError::Status404(github_response.to_json_async().await?).into()),
                code => Err(MigrationsDownloadArchiveForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Download an organization migration archive
    ///
    /// Fetches the URL to a migration archive.
    ///
    /// [GitHub API docs for download_archive_for_org](https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn download_archive_for_org(&self, org: &str, migration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/migrations/{}/archive", super::GITHUB_BASE_API_URL, org, migration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                302 => Err(MigrationsDownloadArchiveForOrgError::Status302.into()),
                404 => Err(MigrationsDownloadArchiveForOrgError::Status404(github_response.to_json()?).into()),
                code => Err(MigrationsDownloadArchiveForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Download a user migration archive
    ///
    /// Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
    /// 
    /// *   attachments
    /// *   bases
    /// *   commit\_comments
    /// *   issue\_comments
    /// *   issue\_events
    /// *   issues
    /// *   milestones
    /// *   organizations
    /// *   projects
    /// *   protected\_branches
    /// *   pull\_request\_reviews
    /// *   pull\_requests
    /// *   releases
    /// *   repositories
    /// *   review\_comments
    /// *   schema
    /// *   users
    /// 
    /// The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
    ///
    /// [GitHub API docs for get_archive_for_authenticated_user](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive)
    ///
    /// ---
    pub async fn get_archive_for_authenticated_user_async(&self, migration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/user/migrations/{}/archive", super::GITHUB_BASE_API_URL, migration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                302 => Err(MigrationsGetArchiveForAuthenticatedUserError::Status302.into()),
                304 => Err(MigrationsGetArchiveForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsGetArchiveForAuthenticatedUserError::Status403(github_response.to_json_async().await?).into()),
                401 => Err(MigrationsGetArchiveForAuthenticatedUserError::Status401(github_response.to_json_async().await?).into()),
                code => Err(MigrationsGetArchiveForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Download a user migration archive
    ///
    /// Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
    /// 
    /// *   attachments
    /// *   bases
    /// *   commit\_comments
    /// *   issue\_comments
    /// *   issue\_events
    /// *   issues
    /// *   milestones
    /// *   organizations
    /// *   projects
    /// *   protected\_branches
    /// *   pull\_request\_reviews
    /// *   pull\_requests
    /// *   releases
    /// *   repositories
    /// *   review\_comments
    /// *   schema
    /// *   users
    /// 
    /// The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
    ///
    /// [GitHub API docs for get_archive_for_authenticated_user](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_archive_for_authenticated_user(&self, migration_id: i32) -> Result<(), AdapterError> {

        let request_uri = format!("{}/user/migrations/{}/archive", super::GITHUB_BASE_API_URL, migration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                302 => Err(MigrationsGetArchiveForAuthenticatedUserError::Status302.into()),
                304 => Err(MigrationsGetArchiveForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsGetArchiveForAuthenticatedUserError::Status403(github_response.to_json()?).into()),
                401 => Err(MigrationsGetArchiveForAuthenticatedUserError::Status401(github_response.to_json()?).into()),
                code => Err(MigrationsGetArchiveForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get commit authors
    ///
    /// Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
    /// 
    /// This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for get_commit_authors](https://docs.github.com/rest/migrations/source-imports#get-commit-authors)
    ///
    /// ---
    pub async fn get_commit_authors_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<MigrationsGetCommitAuthorsParams>>) -> Result<Vec<PorterAuthor>, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/import/authors", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsGetCommitAuthorsError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(MigrationsGetCommitAuthorsError::Status503(github_response.to_json_async().await?).into()),
                code => Err(MigrationsGetCommitAuthorsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get commit authors
    ///
    /// Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
    /// 
    /// This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for get_commit_authors](https://docs.github.com/rest/migrations/source-imports#get-commit-authors)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_commit_authors(&self, owner: &str, repo: &str, query_params: Option<impl Into<MigrationsGetCommitAuthorsParams>>) -> Result<Vec<PorterAuthor>, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/import/authors", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: MigrationsGetCommitAuthorsParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsGetCommitAuthorsError::Status404(github_response.to_json()?).into()),
                503 => Err(MigrationsGetCommitAuthorsError::Status503(github_response.to_json()?).into()),
                code => Err(MigrationsGetCommitAuthorsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get an import status
    ///
    /// View the progress of an import.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    /// 
    /// **Import status**
    /// 
    /// This section includes details about the possible values of the `status` field of the Import Progress response.
    /// 
    /// An import that does not have errors will progress through these steps:
    /// 
    /// *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
    /// *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
    /// *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
    /// *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
    /// *   `complete` - the import is complete, and the repository is ready on GitHub.
    /// 
    /// If there are problems, you will see one of these in the `status` field:
    /// 
    /// *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
    /// *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
    /// *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
    /// *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
    /// *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
    /// 
    /// **The project_choices field**
    /// 
    /// When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
    /// 
    /// **Git LFS related fields**
    /// 
    /// This section includes details about Git LFS related fields that may be present in the Import Progress response.
    /// 
    /// *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
    /// *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
    /// *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
    /// *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
    ///
    /// [GitHub API docs for get_import_status](https://docs.github.com/rest/migrations/source-imports#get-an-import-status)
    ///
    /// ---
    pub async fn get_import_status_async(&self, owner: &str, repo: &str) -> Result<Import, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsGetImportStatusError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(MigrationsGetImportStatusError::Status503(github_response.to_json_async().await?).into()),
                code => Err(MigrationsGetImportStatusError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get an import status
    ///
    /// View the progress of an import.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    /// 
    /// **Import status**
    /// 
    /// This section includes details about the possible values of the `status` field of the Import Progress response.
    /// 
    /// An import that does not have errors will progress through these steps:
    /// 
    /// *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
    /// *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
    /// *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
    /// *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
    /// *   `complete` - the import is complete, and the repository is ready on GitHub.
    /// 
    /// If there are problems, you will see one of these in the `status` field:
    /// 
    /// *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
    /// *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
    /// *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
    /// *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
    /// *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
    /// 
    /// **The project_choices field**
    /// 
    /// When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
    /// 
    /// **Git LFS related fields**
    /// 
    /// This section includes details about Git LFS related fields that may be present in the Import Progress response.
    /// 
    /// *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
    /// *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
    /// *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
    /// *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
    ///
    /// [GitHub API docs for get_import_status](https://docs.github.com/rest/migrations/source-imports#get-an-import-status)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_import_status(&self, owner: &str, repo: &str) -> Result<Import, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsGetImportStatusError::Status404(github_response.to_json()?).into()),
                503 => Err(MigrationsGetImportStatusError::Status503(github_response.to_json()?).into()),
                code => Err(MigrationsGetImportStatusError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get large files
    ///
    /// List files larger than 100MB found during the import
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for get_large_files](https://docs.github.com/rest/migrations/source-imports#get-large-files)
    ///
    /// ---
    pub async fn get_large_files_async(&self, owner: &str, repo: &str) -> Result<Vec<PorterLargeFile>, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import/large_files", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                503 => Err(MigrationsGetLargeFilesError::Status503(github_response.to_json_async().await?).into()),
                code => Err(MigrationsGetLargeFilesError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get large files
    ///
    /// List files larger than 100MB found during the import
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for get_large_files](https://docs.github.com/rest/migrations/source-imports#get-large-files)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_large_files(&self, owner: &str, repo: &str) -> Result<Vec<PorterLargeFile>, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import/large_files", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                503 => Err(MigrationsGetLargeFilesError::Status503(github_response.to_json()?).into()),
                code => Err(MigrationsGetLargeFilesError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a user migration status
    ///
    /// Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
    /// 
    /// *   `pending` - the migration hasn't started yet.
    /// *   `exporting` - the migration is in progress.
    /// *   `exported` - the migration finished successfully.
    /// *   `failed` - the migration failed.
    /// 
    /// Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
    ///
    /// [GitHub API docs for get_status_for_authenticated_user](https://docs.github.com/rest/migrations/users#get-a-user-migration-status)
    ///
    /// ---
    pub async fn get_status_for_authenticated_user_async(&self, migration_id: i32, query_params: Option<impl Into<MigrationsGetStatusForAuthenticatedUserParams>>) -> Result<Migration, AdapterError> {

        let mut request_uri = format!("{}/user/migrations/{}", super::GITHUB_BASE_API_URL, migration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsGetStatusForAuthenticatedUserError::Status404(github_response.to_json_async().await?).into()),
                304 => Err(MigrationsGetStatusForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsGetStatusForAuthenticatedUserError::Status403(github_response.to_json_async().await?).into()),
                401 => Err(MigrationsGetStatusForAuthenticatedUserError::Status401(github_response.to_json_async().await?).into()),
                code => Err(MigrationsGetStatusForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a user migration status
    ///
    /// Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
    /// 
    /// *   `pending` - the migration hasn't started yet.
    /// *   `exporting` - the migration is in progress.
    /// *   `exported` - the migration finished successfully.
    /// *   `failed` - the migration failed.
    /// 
    /// Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
    ///
    /// [GitHub API docs for get_status_for_authenticated_user](https://docs.github.com/rest/migrations/users#get-a-user-migration-status)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_status_for_authenticated_user(&self, migration_id: i32, query_params: Option<impl Into<MigrationsGetStatusForAuthenticatedUserParams>>) -> Result<Migration, AdapterError> {

        let mut request_uri = format!("{}/user/migrations/{}", super::GITHUB_BASE_API_URL, migration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: MigrationsGetStatusForAuthenticatedUserParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsGetStatusForAuthenticatedUserError::Status404(github_response.to_json()?).into()),
                304 => Err(MigrationsGetStatusForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsGetStatusForAuthenticatedUserError::Status403(github_response.to_json()?).into()),
                401 => Err(MigrationsGetStatusForAuthenticatedUserError::Status401(github_response.to_json()?).into()),
                code => Err(MigrationsGetStatusForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get an organization migration status
    ///
    /// Fetches the status of a migration.
    /// 
    /// The `state` of a migration can be one of the following values:
    /// 
    /// *   `pending`, which means the migration hasn't started yet.
    /// *   `exporting`, which means the migration is in progress.
    /// *   `exported`, which means the migration finished successfully.
    /// *   `failed`, which means the migration failed.
    ///
    /// [GitHub API docs for get_status_for_org](https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status)
    ///
    /// ---
    pub async fn get_status_for_org_async(&self, org: &str, migration_id: i32, query_params: Option<impl Into<MigrationsGetStatusForOrgParams>>) -> Result<Migration, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/migrations/{}", super::GITHUB_BASE_API_URL, org, migration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsGetStatusForOrgError::Status404(github_response.to_json_async().await?).into()),
                code => Err(MigrationsGetStatusForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get an organization migration status
    ///
    /// Fetches the status of a migration.
    /// 
    /// The `state` of a migration can be one of the following values:
    /// 
    /// *   `pending`, which means the migration hasn't started yet.
    /// *   `exporting`, which means the migration is in progress.
    /// *   `exported`, which means the migration finished successfully.
    /// *   `failed`, which means the migration failed.
    ///
    /// [GitHub API docs for get_status_for_org](https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_status_for_org(&self, org: &str, migration_id: i32, query_params: Option<impl Into<MigrationsGetStatusForOrgParams>>) -> Result<Migration, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/migrations/{}", super::GITHUB_BASE_API_URL, org, migration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: MigrationsGetStatusForOrgParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsGetStatusForOrgError::Status404(github_response.to_json()?).into()),
                code => Err(MigrationsGetStatusForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List user migrations
    ///
    /// Lists all migrations a user has started.
    ///
    /// [GitHub API docs for list_for_authenticated_user](https://docs.github.com/rest/migrations/users#list-user-migrations)
    ///
    /// ---
    pub async fn list_for_authenticated_user_async(&self, query_params: Option<impl Into<MigrationsListForAuthenticatedUserParams>>) -> Result<Vec<Migration>, AdapterError> {

        let mut request_uri = format!("{}/user/migrations", super::GITHUB_BASE_API_URL);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                304 => Err(MigrationsListForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsListForAuthenticatedUserError::Status403(github_response.to_json_async().await?).into()),
                401 => Err(MigrationsListForAuthenticatedUserError::Status401(github_response.to_json_async().await?).into()),
                code => Err(MigrationsListForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List user migrations
    ///
    /// Lists all migrations a user has started.
    ///
    /// [GitHub API docs for list_for_authenticated_user](https://docs.github.com/rest/migrations/users#list-user-migrations)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_for_authenticated_user(&self, query_params: Option<impl Into<MigrationsListForAuthenticatedUserParams>>) -> Result<Vec<Migration>, AdapterError> {

        let mut request_uri = format!("{}/user/migrations", super::GITHUB_BASE_API_URL);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: MigrationsListForAuthenticatedUserParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                304 => Err(MigrationsListForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsListForAuthenticatedUserError::Status403(github_response.to_json()?).into()),
                401 => Err(MigrationsListForAuthenticatedUserError::Status401(github_response.to_json()?).into()),
                code => Err(MigrationsListForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List organization migrations
    ///
    /// Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
    /// 
    /// A list of `repositories` is only returned for export migrations.
    ///
    /// [GitHub API docs for list_for_org](https://docs.github.com/rest/migrations/orgs#list-organization-migrations)
    ///
    /// ---
    pub async fn list_for_org_async(&self, org: &str, query_params: Option<impl Into<MigrationsListForOrgParams>>) -> Result<Vec<Migration>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/migrations", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(MigrationsListForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List organization migrations
    ///
    /// Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
    /// 
    /// A list of `repositories` is only returned for export migrations.
    ///
    /// [GitHub API docs for list_for_org](https://docs.github.com/rest/migrations/orgs#list-organization-migrations)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_for_org(&self, org: &str, query_params: Option<impl Into<MigrationsListForOrgParams>>) -> Result<Vec<Migration>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/migrations", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: MigrationsListForOrgParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(MigrationsListForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List repositories for a user migration
    ///
    /// Lists all the repositories for this user migration.
    ///
    /// [GitHub API docs for list_repos_for_authenticated_user](https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration)
    ///
    /// ---
    pub async fn list_repos_for_authenticated_user_async(&self, migration_id: i32, query_params: Option<impl Into<MigrationsListReposForAuthenticatedUserParams>>) -> Result<Vec<MinimalRepository>, AdapterError> {

        let mut request_uri = format!("{}/user/migrations/{}/repositories", super::GITHUB_BASE_API_URL, migration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsListReposForAuthenticatedUserError::Status404(github_response.to_json_async().await?).into()),
                code => Err(MigrationsListReposForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List repositories for a user migration
    ///
    /// Lists all the repositories for this user migration.
    ///
    /// [GitHub API docs for list_repos_for_authenticated_user](https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_repos_for_authenticated_user(&self, migration_id: i32, query_params: Option<impl Into<MigrationsListReposForAuthenticatedUserParams>>) -> Result<Vec<MinimalRepository>, AdapterError> {

        let mut request_uri = format!("{}/user/migrations/{}/repositories", super::GITHUB_BASE_API_URL, migration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: MigrationsListReposForAuthenticatedUserParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsListReposForAuthenticatedUserError::Status404(github_response.to_json()?).into()),
                code => Err(MigrationsListReposForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List repositories in an organization migration
    ///
    /// List all the repositories for this organization migration.
    ///
    /// [GitHub API docs for list_repos_for_org](https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration)
    ///
    /// ---
    pub async fn list_repos_for_org_async(&self, org: &str, migration_id: i32, query_params: Option<impl Into<MigrationsListReposForOrgParams>>) -> Result<Vec<MinimalRepository>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/migrations/{}/repositories", super::GITHUB_BASE_API_URL, org, migration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsListReposForOrgError::Status404(github_response.to_json_async().await?).into()),
                code => Err(MigrationsListReposForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List repositories in an organization migration
    ///
    /// List all the repositories for this organization migration.
    ///
    /// [GitHub API docs for list_repos_for_org](https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_repos_for_org(&self, org: &str, migration_id: i32, query_params: Option<impl Into<MigrationsListReposForOrgParams>>) -> Result<Vec<MinimalRepository>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/migrations/{}/repositories", super::GITHUB_BASE_API_URL, org, migration_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: MigrationsListReposForOrgParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsListReposForOrgError::Status404(github_response.to_json()?).into()),
                code => Err(MigrationsListReposForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Map a commit author
    ///
    /// Update an author's identity for the import. Your application can continue updating authors any time before you push
    /// new commits to the repository.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for map_commit_author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author)
    ///
    /// ---
    pub async fn map_commit_author_async(&self, owner: &str, repo: &str, author_id: i32, body: PatchMigrationsMapCommitAuthor) -> Result<PorterAuthor, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import/authors/{}", super::GITHUB_BASE_API_URL, owner, repo, author_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchMigrationsMapCommitAuthor>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                422 => Err(MigrationsMapCommitAuthorError::Status422(github_response.to_json_async().await?).into()),
                404 => Err(MigrationsMapCommitAuthorError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(MigrationsMapCommitAuthorError::Status503(github_response.to_json_async().await?).into()),
                code => Err(MigrationsMapCommitAuthorError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Map a commit author
    ///
    /// Update an author's identity for the import. Your application can continue updating authors any time before you push
    /// new commits to the repository.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for map_commit_author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn map_commit_author(&self, owner: &str, repo: &str, author_id: i32, body: PatchMigrationsMapCommitAuthor) -> Result<PorterAuthor, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import/authors/{}", super::GITHUB_BASE_API_URL, owner, repo, author_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchMigrationsMapCommitAuthor>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                422 => Err(MigrationsMapCommitAuthorError::Status422(github_response.to_json()?).into()),
                404 => Err(MigrationsMapCommitAuthorError::Status404(github_response.to_json()?).into()),
                503 => Err(MigrationsMapCommitAuthorError::Status503(github_response.to_json()?).into()),
                code => Err(MigrationsMapCommitAuthorError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update Git LFS preference
    ///
    /// You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability
    /// is powered by [Git LFS](https://git-lfs.com).
    /// 
    /// You can learn more about our LFS feature and working with large files [on our help
    /// site](https://docs.github.com/repositories/working-with-files/managing-large-files).
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for set_lfs_preference](https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference)
    ///
    /// ---
    pub async fn set_lfs_preference_async(&self, owner: &str, repo: &str, body: PatchMigrationsSetLfsPreference) -> Result<Import, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import/lfs", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchMigrationsSetLfsPreference>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                422 => Err(MigrationsSetLfsPreferenceError::Status422(github_response.to_json_async().await?).into()),
                503 => Err(MigrationsSetLfsPreferenceError::Status503(github_response.to_json_async().await?).into()),
                code => Err(MigrationsSetLfsPreferenceError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update Git LFS preference
    ///
    /// You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability
    /// is powered by [Git LFS](https://git-lfs.com).
    /// 
    /// You can learn more about our LFS feature and working with large files [on our help
    /// site](https://docs.github.com/repositories/working-with-files/managing-large-files).
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for set_lfs_preference](https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_lfs_preference(&self, owner: &str, repo: &str, body: PatchMigrationsSetLfsPreference) -> Result<Import, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import/lfs", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchMigrationsSetLfsPreference>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                422 => Err(MigrationsSetLfsPreferenceError::Status422(github_response.to_json()?).into()),
                503 => Err(MigrationsSetLfsPreferenceError::Status503(github_response.to_json()?).into()),
                code => Err(MigrationsSetLfsPreferenceError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Start a user migration
    ///
    /// Initiates the generation of a user migration archive.
    ///
    /// [GitHub API docs for start_for_authenticated_user](https://docs.github.com/rest/migrations/users#start-a-user-migration)
    ///
    /// ---
    pub async fn start_for_authenticated_user_async(&self, body: PostMigrationsStartForAuthenticatedUser) -> Result<Migration, AdapterError> {

        let request_uri = format!("{}/user/migrations", super::GITHUB_BASE_API_URL);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostMigrationsStartForAuthenticatedUser>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                422 => Err(MigrationsStartForAuthenticatedUserError::Status422(github_response.to_json_async().await?).into()),
                304 => Err(MigrationsStartForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsStartForAuthenticatedUserError::Status403(github_response.to_json_async().await?).into()),
                401 => Err(MigrationsStartForAuthenticatedUserError::Status401(github_response.to_json_async().await?).into()),
                code => Err(MigrationsStartForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Start a user migration
    ///
    /// Initiates the generation of a user migration archive.
    ///
    /// [GitHub API docs for start_for_authenticated_user](https://docs.github.com/rest/migrations/users#start-a-user-migration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn start_for_authenticated_user(&self, body: PostMigrationsStartForAuthenticatedUser) -> Result<Migration, AdapterError> {

        let request_uri = format!("{}/user/migrations", super::GITHUB_BASE_API_URL);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostMigrationsStartForAuthenticatedUser>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                422 => Err(MigrationsStartForAuthenticatedUserError::Status422(github_response.to_json()?).into()),
                304 => Err(MigrationsStartForAuthenticatedUserError::Status304.into()),
                403 => Err(MigrationsStartForAuthenticatedUserError::Status403(github_response.to_json()?).into()),
                401 => Err(MigrationsStartForAuthenticatedUserError::Status401(github_response.to_json()?).into()),
                code => Err(MigrationsStartForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Start an organization migration
    ///
    /// Initiates the generation of a migration archive.
    ///
    /// [GitHub API docs for start_for_org](https://docs.github.com/rest/migrations/orgs#start-an-organization-migration)
    ///
    /// ---
    pub async fn start_for_org_async(&self, org: &str, body: PostMigrationsStartForOrg) -> Result<Migration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/migrations", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostMigrationsStartForOrg>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsStartForOrgError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(MigrationsStartForOrgError::Status422(github_response.to_json_async().await?).into()),
                code => Err(MigrationsStartForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Start an organization migration
    ///
    /// Initiates the generation of a migration archive.
    ///
    /// [GitHub API docs for start_for_org](https://docs.github.com/rest/migrations/orgs#start-an-organization-migration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn start_for_org(&self, org: &str, body: PostMigrationsStartForOrg) -> Result<Migration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/migrations", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostMigrationsStartForOrg>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsStartForOrgError::Status404(github_response.to_json()?).into()),
                422 => Err(MigrationsStartForOrgError::Status422(github_response.to_json()?).into()),
                code => Err(MigrationsStartForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Start an import
    ///
    /// Start a source import to a GitHub repository using GitHub Importer.
    /// Importing into a GitHub repository with GitHub Actions enabled is not supported and will
    /// return a status `422 Unprocessable Entity` response.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for start_import](https://docs.github.com/rest/migrations/source-imports#start-an-import)
    ///
    /// ---
    pub async fn start_import_async(&self, owner: &str, repo: &str, body: PutMigrationsStartImport) -> Result<Import, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PutMigrationsStartImport>(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                422 => Err(MigrationsStartImportError::Status422(github_response.to_json_async().await?).into()),
                404 => Err(MigrationsStartImportError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(MigrationsStartImportError::Status503(github_response.to_json_async().await?).into()),
                code => Err(MigrationsStartImportError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Start an import
    ///
    /// Start a source import to a GitHub repository using GitHub Importer.
    /// Importing into a GitHub repository with GitHub Actions enabled is not supported and will
    /// return a status `422 Unprocessable Entity` response.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for start_import](https://docs.github.com/rest/migrations/source-imports#start-an-import)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn start_import(&self, owner: &str, repo: &str, body: PutMigrationsStartImport) -> Result<Import, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PutMigrationsStartImport>(body)?),
            method: "PUT",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                422 => Err(MigrationsStartImportError::Status422(github_response.to_json()?).into()),
                404 => Err(MigrationsStartImportError::Status404(github_response.to_json()?).into()),
                503 => Err(MigrationsStartImportError::Status503(github_response.to_json()?).into()),
                code => Err(MigrationsStartImportError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Unlock a user repository
    ///
    /// Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
    ///
    /// [GitHub API docs for unlock_repo_for_authenticated_user](https://docs.github.com/rest/migrations/users#unlock-a-user-repository)
    ///
    /// ---
    pub async fn unlock_repo_for_authenticated_user_async(&self, migration_id: i32, repo_name: &str) -> Result<(), AdapterError> {

        let request_uri = format!("{}/user/migrations/{}/repos/{}/lock", super::GITHUB_BASE_API_URL, migration_id, repo_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                304 => Err(MigrationsUnlockRepoForAuthenticatedUserError::Status304.into()),
                404 => Err(MigrationsUnlockRepoForAuthenticatedUserError::Status404(github_response.to_json_async().await?).into()),
                403 => Err(MigrationsUnlockRepoForAuthenticatedUserError::Status403(github_response.to_json_async().await?).into()),
                401 => Err(MigrationsUnlockRepoForAuthenticatedUserError::Status401(github_response.to_json_async().await?).into()),
                code => Err(MigrationsUnlockRepoForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Unlock a user repository
    ///
    /// Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
    ///
    /// [GitHub API docs for unlock_repo_for_authenticated_user](https://docs.github.com/rest/migrations/users#unlock-a-user-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn unlock_repo_for_authenticated_user(&self, migration_id: i32, repo_name: &str) -> Result<(), AdapterError> {

        let request_uri = format!("{}/user/migrations/{}/repos/{}/lock", super::GITHUB_BASE_API_URL, migration_id, repo_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                304 => Err(MigrationsUnlockRepoForAuthenticatedUserError::Status304.into()),
                404 => Err(MigrationsUnlockRepoForAuthenticatedUserError::Status404(github_response.to_json()?).into()),
                403 => Err(MigrationsUnlockRepoForAuthenticatedUserError::Status403(github_response.to_json()?).into()),
                401 => Err(MigrationsUnlockRepoForAuthenticatedUserError::Status401(github_response.to_json()?).into()),
                code => Err(MigrationsUnlockRepoForAuthenticatedUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Unlock an organization repository
    ///
    /// Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
    ///
    /// [GitHub API docs for unlock_repo_for_org](https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository)
    ///
    /// ---
    pub async fn unlock_repo_for_org_async(&self, org: &str, migration_id: i32, repo_name: &str) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/migrations/{}/repos/{}/lock", super::GITHUB_BASE_API_URL, org, migration_id, repo_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsUnlockRepoForOrgError::Status404(github_response.to_json_async().await?).into()),
                code => Err(MigrationsUnlockRepoForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Unlock an organization repository
    ///
    /// Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
    ///
    /// [GitHub API docs for unlock_repo_for_org](https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn unlock_repo_for_org(&self, org: &str, migration_id: i32, repo_name: &str) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/migrations/{}/repos/{}/lock", super::GITHUB_BASE_API_URL, org, migration_id, repo_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(MigrationsUnlockRepoForOrgError::Status404(github_response.to_json()?).into()),
                code => Err(MigrationsUnlockRepoForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update an import
    ///
    /// An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
    /// request. If no parameters are provided, the import will be restarted.
    /// 
    /// Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
    /// have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
    /// You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for update_import](https://docs.github.com/rest/migrations/source-imports#update-an-import)
    ///
    /// ---
    pub async fn update_import_async(&self, owner: &str, repo: &str, body: PatchMigrationsUpdateImport) -> Result<Import, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchMigrationsUpdateImport>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                503 => Err(MigrationsUpdateImportError::Status503(github_response.to_json_async().await?).into()),
                code => Err(MigrationsUpdateImportError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update an import
    ///
    /// An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
    /// request. If no parameters are provided, the import will be restarted.
    /// 
    /// Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
    /// have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
    /// You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
    ///
    /// [GitHub API docs for update_import](https://docs.github.com/rest/migrations/source-imports#update-an-import)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn update_import(&self, owner: &str, repo: &str, body: PatchMigrationsUpdateImport) -> Result<Import, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/import", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchMigrationsUpdateImport>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                503 => Err(MigrationsUpdateImportError::Status503(github_response.to_json()?).into()),
                code => Err(MigrationsUpdateImportError::Generic { code }.into()),
            }
        }
    }

}
