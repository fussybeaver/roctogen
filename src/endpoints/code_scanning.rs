//! Method, error and parameter types for the CodeScanning endpoint.
#![allow(
    clippy::all
)]
/* 
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * OpenAPI spec version: 1.1.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::adapters::{AdapterError, Client, GitHubRequest, GitHubResponseExt};
use crate::models::*;

use super::PerPage;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct CodeScanning<'api, C: Client> where AdapterError: From<<C as Client>::Err> {
    client: &'api C
}

pub fn new<C: Client>(client: &C) -> CodeScanning<C> where AdapterError: From<<C as Client>::Err> {
    CodeScanning { client }
}

/// Errors for the [Create a CodeQL variant analysis](CodeScanning::create_variant_analysis_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningCreateVariantAnalysisError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Unable to process variant analysis submission")]
    Status422(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningCreateVariantAnalysisError> for AdapterError {
    fn from(err: CodeScanningCreateVariantAnalysisError) -> Self {
        let (description, status_code) = match err {
            CodeScanningCreateVariantAnalysisError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningCreateVariantAnalysisError::Status422(_) => (String::from("Unable to process variant analysis submission"), 422),
            CodeScanningCreateVariantAnalysisError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningCreateVariantAnalysisError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Delete a code scanning analysis from a repository](CodeScanning::delete_analysis_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningDeleteAnalysisError {
    #[error("Bad Request")]
    Status400(BasicError),
    #[error("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningDeleteAnalysisError> for AdapterError {
    fn from(err: CodeScanningDeleteAnalysisError) -> Self {
        let (description, status_code) = match err {
            CodeScanningDeleteAnalysisError::Status400(_) => (String::from("Bad Request"), 400),
            CodeScanningDeleteAnalysisError::Status403(_) => (String::from("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningDeleteAnalysisError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningDeleteAnalysisError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningDeleteAnalysisError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a code scanning alert](CodeScanning::get_alert_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningGetAlertError {
    #[error("Not modified")]
    Status304,
    #[error("Response if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningGetAlertError> for AdapterError {
    fn from(err: CodeScanningGetAlertError) -> Self {
        let (description, status_code) = match err {
            CodeScanningGetAlertError::Status304 => (String::from("Not modified"), 304),
            CodeScanningGetAlertError::Status403(_) => (String::from("Response if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningGetAlertError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningGetAlertError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningGetAlertError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a code scanning analysis for a repository](CodeScanning::get_analysis_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningGetAnalysisError {
    #[error("Response if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningGetAnalysisError> for AdapterError {
    fn from(err: CodeScanningGetAnalysisError) -> Self {
        let (description, status_code) = match err {
            CodeScanningGetAnalysisError::Status403(_) => (String::from("Response if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningGetAnalysisError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningGetAnalysisError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningGetAnalysisError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a CodeQL database for a repository](CodeScanning::get_codeql_database_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningGetCodeqlDatabaseError {
    #[error("Found")]
    Status302,
    #[error("Response if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningGetCodeqlDatabaseError> for AdapterError {
    fn from(err: CodeScanningGetCodeqlDatabaseError) -> Self {
        let (description, status_code) = match err {
            CodeScanningGetCodeqlDatabaseError::Status302 => (String::from("Found"), 302),
            CodeScanningGetCodeqlDatabaseError::Status403(_) => (String::from("Response if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningGetCodeqlDatabaseError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningGetCodeqlDatabaseError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningGetCodeqlDatabaseError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a code scanning default setup configuration](CodeScanning::get_default_setup_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningGetDefaultSetupError {
    #[error("Response if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningGetDefaultSetupError> for AdapterError {
    fn from(err: CodeScanningGetDefaultSetupError) -> Self {
        let (description, status_code) = match err {
            CodeScanningGetDefaultSetupError::Status403(_) => (String::from("Response if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningGetDefaultSetupError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningGetDefaultSetupError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningGetDefaultSetupError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get information about a SARIF upload](CodeScanning::get_sarif_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningGetSarifError {
    #[error("Response if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Not Found if the sarif id does not match any upload")]
    Status404,
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningGetSarifError> for AdapterError {
    fn from(err: CodeScanningGetSarifError) -> Self {
        let (description, status_code) = match err {
            CodeScanningGetSarifError::Status403(_) => (String::from("Response if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningGetSarifError::Status404 => (String::from("Not Found if the sarif id does not match any upload"), 404),
            CodeScanningGetSarifError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningGetSarifError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get the summary of a CodeQL variant analysis](CodeScanning::get_variant_analysis_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningGetVariantAnalysisError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningGetVariantAnalysisError> for AdapterError {
    fn from(err: CodeScanningGetVariantAnalysisError) -> Self {
        let (description, status_code) = match err {
            CodeScanningGetVariantAnalysisError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningGetVariantAnalysisError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningGetVariantAnalysisError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get the analysis status of a repository in a CodeQL variant analysis](CodeScanning::get_variant_analysis_repo_task_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningGetVariantAnalysisRepoTaskError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningGetVariantAnalysisRepoTaskError> for AdapterError {
    fn from(err: CodeScanningGetVariantAnalysisRepoTaskError) -> Self {
        let (description, status_code) = match err {
            CodeScanningGetVariantAnalysisRepoTaskError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningGetVariantAnalysisRepoTaskError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningGetVariantAnalysisRepoTaskError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List instances of a code scanning alert](CodeScanning::list_alert_instances_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningListAlertInstancesError {
    #[error("Response if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningListAlertInstancesError> for AdapterError {
    fn from(err: CodeScanningListAlertInstancesError) -> Self {
        let (description, status_code) = match err {
            CodeScanningListAlertInstancesError::Status403(_) => (String::from("Response if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningListAlertInstancesError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningListAlertInstancesError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningListAlertInstancesError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List code scanning alerts for an organization](CodeScanning::list_alerts_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningListAlertsForOrgError {
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningListAlertsForOrgError> for AdapterError {
    fn from(err: CodeScanningListAlertsForOrgError) -> Self {
        let (description, status_code) = match err {
            CodeScanningListAlertsForOrgError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningListAlertsForOrgError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningListAlertsForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List code scanning alerts for a repository](CodeScanning::list_alerts_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningListAlertsForRepoError {
    #[error("Not modified")]
    Status304,
    #[error("Response if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningListAlertsForRepoError> for AdapterError {
    fn from(err: CodeScanningListAlertsForRepoError) -> Self {
        let (description, status_code) = match err {
            CodeScanningListAlertsForRepoError::Status304 => (String::from("Not modified"), 304),
            CodeScanningListAlertsForRepoError::Status403(_) => (String::from("Response if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningListAlertsForRepoError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningListAlertsForRepoError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningListAlertsForRepoError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List CodeQL databases for a repository](CodeScanning::list_codeql_databases_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningListCodeqlDatabasesError {
    #[error("Response if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningListCodeqlDatabasesError> for AdapterError {
    fn from(err: CodeScanningListCodeqlDatabasesError) -> Self {
        let (description, status_code) = match err {
            CodeScanningListCodeqlDatabasesError::Status403(_) => (String::from("Response if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningListCodeqlDatabasesError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningListCodeqlDatabasesError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningListCodeqlDatabasesError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List code scanning analyses for a repository](CodeScanning::list_recent_analyses_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningListRecentAnalysesError {
    #[error("Response if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningListRecentAnalysesError> for AdapterError {
    fn from(err: CodeScanningListRecentAnalysesError) -> Self {
        let (description, status_code) = match err {
            CodeScanningListRecentAnalysesError::Status403(_) => (String::from("Response if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningListRecentAnalysesError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningListRecentAnalysesError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningListRecentAnalysesError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Update a code scanning alert](CodeScanning::update_alert_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningUpdateAlertError {
    #[error("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningUpdateAlertError> for AdapterError {
    fn from(err: CodeScanningUpdateAlertError) -> Self {
        let (description, status_code) = match err {
            CodeScanningUpdateAlertError::Status403(_) => (String::from("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningUpdateAlertError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningUpdateAlertError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningUpdateAlertError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Update a code scanning default setup configuration](CodeScanning::update_default_setup_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningUpdateDefaultSetupError {
    #[error("Response")]
    Status202(CodeScanningDefaultSetupUpdateResponse),
    #[error("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Response if there is already a validation run in progress with a different default setup configuration")]
    Status409(BasicError),
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningUpdateDefaultSetupError> for AdapterError {
    fn from(err: CodeScanningUpdateDefaultSetupError) -> Self {
        let (description, status_code) = match err {
            CodeScanningUpdateDefaultSetupError::Status202(_) => (String::from("Response"), 202),
            CodeScanningUpdateDefaultSetupError::Status403(_) => (String::from("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningUpdateDefaultSetupError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningUpdateDefaultSetupError::Status409(_) => (String::from("Response if there is already a validation run in progress with a different default setup configuration"), 409),
            CodeScanningUpdateDefaultSetupError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningUpdateDefaultSetupError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Upload an analysis as SARIF data](CodeScanning::upload_sarif_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CodeScanningUploadSarifError {
    #[error("Bad Request if the sarif field is invalid")]
    Status400,
    #[error("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Payload Too Large if the sarif field is too large")]
    Status413,
    #[error("Service unavailable")]
    Status503(PostCodespacesCreateForAuthenticatedUserResponse503),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CodeScanningUploadSarifError> for AdapterError {
    fn from(err: CodeScanningUploadSarifError) -> Self {
        let (description, status_code) = match err {
            CodeScanningUploadSarifError::Status400 => (String::from("Bad Request if the sarif field is invalid"), 400),
            CodeScanningUploadSarifError::Status403(_) => (String::from("Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository"), 403),
            CodeScanningUploadSarifError::Status404(_) => (String::from("Resource not found"), 404),
            CodeScanningUploadSarifError::Status413 => (String::from("Payload Too Large if the sarif field is too large"), 413),
            CodeScanningUploadSarifError::Status503(_) => (String::from("Service unavailable"), 503),
            CodeScanningUploadSarifError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}


/// Query parameters for the [Delete a code scanning analysis from a repository](CodeScanning::delete_analysis_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CodeScanningDeleteAnalysisParams<'req> {
    /// Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
    confirm_delete: Option<&'req str>
}

impl<'req> CodeScanningDeleteAnalysisParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
    pub fn confirm_delete(self, confirm_delete: &'req str) -> Self {
        Self {
            confirm_delete: Some(confirm_delete),
        }
    }
}

/// Query parameters for the [List instances of a code scanning alert](CodeScanning::list_alert_instances_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CodeScanningListAlertInstancesParams {
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    git_ref: Option<CodeScanningRef>, 
    /// The number of the pull request for the results you want to list.
    pr: Option<i32>
}

impl CodeScanningListAlertInstancesParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            page: Some(page),
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            page: self.page, 
            per_page: Some(per_page),
            git_ref: self.git_ref, 
            pr: self.pr, 
        }
    }

    /// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    pub fn git_ref(self, git_ref: CodeScanningRef) -> Self {
        Self {
            page: self.page, 
            per_page: self.per_page, 
            git_ref: Some(git_ref),
            pr: self.pr, 
        }
    }

    /// The number of the pull request for the results you want to list.
    pub fn pr(self, pr: i32) -> Self {
        Self {
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: Some(pr),
        }
    }
}

impl<'enc> From<&'enc PerPage> for CodeScanningListAlertInstancesParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List code scanning alerts for an organization](CodeScanning::list_alerts_for_org_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CodeScanningListAlertsForOrgParams<'req> {
    /// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
    tool_name: Option<CodeScanningAnalysisToolName>, 
    /// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
    tool_guid: Option<CodeScanningAnalysisToolGuid>, 
    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    before: Option<&'req str>, 
    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    after: Option<&'req str>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The direction to sort the results by.
    direction: Option<&'req str>, 
    /// If specified, only code scanning alerts with this state will be returned.
    state: Option<CodeScanningAlertStateQuery>, 
    /// The property by which to sort the results.
    sort: Option<&'req str>, 
    /// If specified, only code scanning alerts with this severity will be returned.
    severity: Option<CodeScanningAlertSeverity>
}

impl<'req> CodeScanningListAlertsForOrgParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
    pub fn tool_name(self, tool_name: CodeScanningAnalysisToolName) -> Self {
        Self {
            tool_name: Some(tool_name),
            tool_guid: self.tool_guid, 
            before: self.before, 
            after: self.after, 
            page: self.page, 
            per_page: self.per_page, 
            direction: self.direction, 
            state: self.state, 
            sort: self.sort, 
            severity: self.severity, 
        }
    }

    /// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
    pub fn tool_guid(self, tool_guid: CodeScanningAnalysisToolGuid) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: Some(tool_guid),
            before: self.before, 
            after: self.after, 
            page: self.page, 
            per_page: self.per_page, 
            direction: self.direction, 
            state: self.state, 
            sort: self.sort, 
            severity: self.severity, 
        }
    }

    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn before(self, before: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            before: Some(before),
            after: self.after, 
            page: self.page, 
            per_page: self.per_page, 
            direction: self.direction, 
            state: self.state, 
            sort: self.sort, 
            severity: self.severity, 
        }
    }

    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn after(self, after: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            before: self.before, 
            after: Some(after),
            page: self.page, 
            per_page: self.per_page, 
            direction: self.direction, 
            state: self.state, 
            sort: self.sort, 
            severity: self.severity, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            before: self.before, 
            after: self.after, 
            page: Some(page),
            per_page: self.per_page, 
            direction: self.direction, 
            state: self.state, 
            sort: self.sort, 
            severity: self.severity, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            before: self.before, 
            after: self.after, 
            page: self.page, 
            per_page: Some(per_page),
            direction: self.direction, 
            state: self.state, 
            sort: self.sort, 
            severity: self.severity, 
        }
    }

    /// The direction to sort the results by.
    pub fn direction(self, direction: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            before: self.before, 
            after: self.after, 
            page: self.page, 
            per_page: self.per_page, 
            direction: Some(direction),
            state: self.state, 
            sort: self.sort, 
            severity: self.severity, 
        }
    }

    /// If specified, only code scanning alerts with this state will be returned.
    pub fn state(self, state: CodeScanningAlertStateQuery) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            before: self.before, 
            after: self.after, 
            page: self.page, 
            per_page: self.per_page, 
            direction: self.direction, 
            state: Some(state),
            sort: self.sort, 
            severity: self.severity, 
        }
    }

    /// The property by which to sort the results.
    pub fn sort(self, sort: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            before: self.before, 
            after: self.after, 
            page: self.page, 
            per_page: self.per_page, 
            direction: self.direction, 
            state: self.state, 
            sort: Some(sort),
            severity: self.severity, 
        }
    }

    /// If specified, only code scanning alerts with this severity will be returned.
    pub fn severity(self, severity: CodeScanningAlertSeverity) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            before: self.before, 
            after: self.after, 
            page: self.page, 
            per_page: self.per_page, 
            direction: self.direction, 
            state: self.state, 
            sort: self.sort, 
            severity: Some(severity),
        }
    }
}

impl<'enc> From<&'enc PerPage> for CodeScanningListAlertsForOrgParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List code scanning alerts for a repository](CodeScanning::list_alerts_for_repo_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CodeScanningListAlertsForRepoParams<'req> {
    /// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
    tool_name: Option<CodeScanningAnalysisToolName>, 
    /// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
    tool_guid: Option<CodeScanningAnalysisToolGuid>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    git_ref: Option<CodeScanningRef>, 
    /// The number of the pull request for the results you want to list.
    pr: Option<i32>, 
    /// The direction to sort the results by.
    direction: Option<&'req str>, 
    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    before: Option<&'req str>, 
    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    after: Option<&'req str>, 
    /// The property by which to sort the results.
    sort: Option<&'req str>, 
    /// If specified, only code scanning alerts with this state will be returned.
    state: Option<CodeScanningAlertStateQuery>, 
    /// If specified, only code scanning alerts with this severity will be returned.
    severity: Option<CodeScanningAlertSeverity>
}

impl<'req> CodeScanningListAlertsForRepoParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
    pub fn tool_name(self, tool_name: CodeScanningAnalysisToolName) -> Self {
        Self {
            tool_name: Some(tool_name),
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: self.direction, 
            before: self.before, 
            after: self.after, 
            sort: self.sort, 
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
    pub fn tool_guid(self, tool_guid: CodeScanningAnalysisToolGuid) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: Some(tool_guid),
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: self.direction, 
            before: self.before, 
            after: self.after, 
            sort: self.sort, 
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: Some(page),
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: self.direction, 
            before: self.before, 
            after: self.after, 
            sort: self.sort, 
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: Some(per_page),
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: self.direction, 
            before: self.before, 
            after: self.after, 
            sort: self.sort, 
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    pub fn git_ref(self, git_ref: CodeScanningRef) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            git_ref: Some(git_ref),
            pr: self.pr, 
            direction: self.direction, 
            before: self.before, 
            after: self.after, 
            sort: self.sort, 
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// The number of the pull request for the results you want to list.
    pub fn pr(self, pr: i32) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: Some(pr),
            direction: self.direction, 
            before: self.before, 
            after: self.after, 
            sort: self.sort, 
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// The direction to sort the results by.
    pub fn direction(self, direction: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: Some(direction),
            before: self.before, 
            after: self.after, 
            sort: self.sort, 
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn before(self, before: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: self.direction, 
            before: Some(before),
            after: self.after, 
            sort: self.sort, 
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn after(self, after: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: self.direction, 
            before: self.before, 
            after: Some(after),
            sort: self.sort, 
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// The property by which to sort the results.
    pub fn sort(self, sort: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: self.direction, 
            before: self.before, 
            after: self.after, 
            sort: Some(sort),
            state: self.state, 
            severity: self.severity, 
        }
    }

    /// If specified, only code scanning alerts with this state will be returned.
    pub fn state(self, state: CodeScanningAlertStateQuery) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: self.direction, 
            before: self.before, 
            after: self.after, 
            sort: self.sort, 
            state: Some(state),
            severity: self.severity, 
        }
    }

    /// If specified, only code scanning alerts with this severity will be returned.
    pub fn severity(self, severity: CodeScanningAlertSeverity) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            git_ref: self.git_ref, 
            pr: self.pr, 
            direction: self.direction, 
            before: self.before, 
            after: self.after, 
            sort: self.sort, 
            state: self.state, 
            severity: Some(severity),
        }
    }
}

impl<'enc> From<&'enc PerPage> for CodeScanningListAlertsForRepoParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List code scanning analyses for a repository](CodeScanning::list_recent_analyses_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CodeScanningListRecentAnalysesParams<'req> {
    /// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
    tool_name: Option<CodeScanningAnalysisToolName>, 
    /// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
    tool_guid: Option<CodeScanningAnalysisToolGuid>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The number of the pull request for the results you want to list.
    pr: Option<i32>, 
    /// The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    git_ref: Option<CodeScanningRef>, 
    /// Filter analyses belonging to the same SARIF upload.
    sarif_id: Option<CodeScanningAnalysisSarifId>, 
    /// The direction to sort the results by.
    direction: Option<&'req str>, 
    /// The property by which to sort the results.
    sort: Option<&'req str>
}

impl<'req> CodeScanningListRecentAnalysesParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
    pub fn tool_name(self, tool_name: CodeScanningAnalysisToolName) -> Self {
        Self {
            tool_name: Some(tool_name),
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            pr: self.pr, 
            git_ref: self.git_ref, 
            sarif_id: self.sarif_id, 
            direction: self.direction, 
            sort: self.sort, 
        }
    }

    /// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
    pub fn tool_guid(self, tool_guid: CodeScanningAnalysisToolGuid) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: Some(tool_guid),
            page: self.page, 
            per_page: self.per_page, 
            pr: self.pr, 
            git_ref: self.git_ref, 
            sarif_id: self.sarif_id, 
            direction: self.direction, 
            sort: self.sort, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: Some(page),
            per_page: self.per_page, 
            pr: self.pr, 
            git_ref: self.git_ref, 
            sarif_id: self.sarif_id, 
            direction: self.direction, 
            sort: self.sort, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: Some(per_page),
            pr: self.pr, 
            git_ref: self.git_ref, 
            sarif_id: self.sarif_id, 
            direction: self.direction, 
            sort: self.sort, 
        }
    }

    /// The number of the pull request for the results you want to list.
    pub fn pr(self, pr: i32) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            pr: Some(pr),
            git_ref: self.git_ref, 
            sarif_id: self.sarif_id, 
            direction: self.direction, 
            sort: self.sort, 
        }
    }

    /// The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    pub fn git_ref(self, git_ref: CodeScanningRef) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            pr: self.pr, 
            git_ref: Some(git_ref),
            sarif_id: self.sarif_id, 
            direction: self.direction, 
            sort: self.sort, 
        }
    }

    /// Filter analyses belonging to the same SARIF upload.
    pub fn sarif_id(self, sarif_id: CodeScanningAnalysisSarifId) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            pr: self.pr, 
            git_ref: self.git_ref, 
            sarif_id: Some(sarif_id),
            direction: self.direction, 
            sort: self.sort, 
        }
    }

    /// The direction to sort the results by.
    pub fn direction(self, direction: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            pr: self.pr, 
            git_ref: self.git_ref, 
            sarif_id: self.sarif_id, 
            direction: Some(direction),
            sort: self.sort, 
        }
    }

    /// The property by which to sort the results.
    pub fn sort(self, sort: &'req str) -> Self {
        Self {
            tool_name: self.tool_name, 
            tool_guid: self.tool_guid, 
            page: self.page, 
            per_page: self.per_page, 
            pr: self.pr, 
            git_ref: self.git_ref, 
            sarif_id: self.sarif_id, 
            direction: self.direction, 
            sort: Some(sort),
        }
    }
}

impl<'enc> From<&'enc PerPage> for CodeScanningListRecentAnalysesParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}

impl<'api, C: Client> CodeScanning<'api, C> where AdapterError: From<<C as Client>::Err> {
    /// ---
    ///
    /// # Create a CodeQL variant analysis
    ///
    /// Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.
    /// 
    /// Get started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).
    /// 
    /// Use the `owner` and `repo` parameters in the URL to specify the controller repository that
    /// will be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_variant_analysis](https://docs.github.com/rest/code-scanning/code-scanning#create-a-codeql-variant-analysis)
    ///
    /// ---
    pub async fn create_variant_analysis_async(&self, owner: &str, repo: &str, body: PostCodeScanningCreateVariantAnalysis) -> Result<CodeScanningVariantAnalysis, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/variant-analyses", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCodeScanningCreateVariantAnalysis>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(CodeScanningCreateVariantAnalysisError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(CodeScanningCreateVariantAnalysisError::Status422(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningCreateVariantAnalysisError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningCreateVariantAnalysisError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Create a CodeQL variant analysis
    ///
    /// Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.
    /// 
    /// Get started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).
    /// 
    /// Use the `owner` and `repo` parameters in the URL to specify the controller repository that
    /// will be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_variant_analysis](https://docs.github.com/rest/code-scanning/code-scanning#create-a-codeql-variant-analysis)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_variant_analysis(&self, owner: &str, repo: &str, body: PostCodeScanningCreateVariantAnalysis) -> Result<CodeScanningVariantAnalysis, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/variant-analyses", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCodeScanningCreateVariantAnalysis>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(CodeScanningCreateVariantAnalysisError::Status404(github_response.to_json()?).into()),
                422 => Err(CodeScanningCreateVariantAnalysisError::Status422(github_response.to_json()?).into()),
                503 => Err(CodeScanningCreateVariantAnalysisError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningCreateVariantAnalysisError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete a code scanning analysis from a repository
    ///
    /// Deletes a specified code scanning analysis from a repository.
    /// 
    /// You can delete one analysis at a time.
    /// To delete a series of analyses, start with the most recent analysis and work backwards.
    /// Conceptually, the process is similar to the undo function in a text editor.
    /// 
    /// When you list the analyses for a repository,
    /// one or more will be identified as deletable in the response:
    /// 
    /// ```nocompile
    /// "deletable": true
    /// ```
    /// 
    /// An analysis is deletable when it's the most recent in a set of analyses.
    /// Typically, a repository will have multiple sets of analyses
    /// for each enabled code scanning tool,
    /// where a set is determined by a unique combination of analysis values:
    /// 
    /// * `ref`
    /// * `tool`
    /// * `category`
    /// 
    /// If you attempt to delete an analysis that is not the most recent in a set,
    /// you'll get a 400 response with the message:
    /// 
    /// ```nocompile
    /// Analysis specified is not deletable.
    /// ```
    /// 
    /// The response from a successful `DELETE` operation provides you with
    /// two alternative URLs for deleting the next analysis in the set:
    /// `next_analysis_url` and `confirm_delete_url`.
    /// Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
    /// in a set. This is a useful option if you want to preserve at least one analysis
    /// for the specified tool in your repository.
    /// Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
    /// When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
    /// in the 200 response is `null`.
    /// 
    /// As an example of the deletion process,
    /// let's imagine that you added a workflow that configured a particular code scanning tool
    /// to analyze the code in a repository. This tool has added 15 analyses:
    /// 10 on the default branch, and another 5 on a topic branch.
    /// You therefore have two separate sets of analyses for this tool.
    /// You've now decided that you want to remove all of the analyses for the tool.
    /// To do this you must make 15 separate deletion requests.
    /// To start, you must find an analysis that's identified as deletable.
    /// Each set of analyses always has one that's identified as deletable.
    /// Having found the deletable analysis for one of the two sets,
    /// delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
    /// Then repeat the process for the second set.
    /// The procedure therefore consists of a nested loop:
    /// 
    /// **Outer loop**:
    /// * List the analyses for the repository, filtered by tool.
    /// * Parse this list to find a deletable analysis. If found:
    /// 
    ///   **Inner loop**:
    ///   * Delete the identified analysis.
    ///   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
    /// 
    /// The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for delete_analysis](https://docs.github.com/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository)
    ///
    /// ---
    pub async fn delete_analysis_async(&self, owner: &str, repo: &str, analysis_id: i32, query_params: Option<impl Into<CodeScanningDeleteAnalysisParams<'api>>>) -> Result<CodeScanningAnalysisDeletion, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/code-scanning/analyses/{}", super::GITHUB_BASE_API_URL, owner, repo, analysis_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                400 => Err(CodeScanningDeleteAnalysisError::Status400(github_response.to_json_async().await?).into()),
                403 => Err(CodeScanningDeleteAnalysisError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningDeleteAnalysisError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningDeleteAnalysisError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningDeleteAnalysisError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete a code scanning analysis from a repository
    ///
    /// Deletes a specified code scanning analysis from a repository.
    /// 
    /// You can delete one analysis at a time.
    /// To delete a series of analyses, start with the most recent analysis and work backwards.
    /// Conceptually, the process is similar to the undo function in a text editor.
    /// 
    /// When you list the analyses for a repository,
    /// one or more will be identified as deletable in the response:
    /// 
    /// ```nocompile
    /// "deletable": true
    /// ```
    /// 
    /// An analysis is deletable when it's the most recent in a set of analyses.
    /// Typically, a repository will have multiple sets of analyses
    /// for each enabled code scanning tool,
    /// where a set is determined by a unique combination of analysis values:
    /// 
    /// * `ref`
    /// * `tool`
    /// * `category`
    /// 
    /// If you attempt to delete an analysis that is not the most recent in a set,
    /// you'll get a 400 response with the message:
    /// 
    /// ```nocompile
    /// Analysis specified is not deletable.
    /// ```
    /// 
    /// The response from a successful `DELETE` operation provides you with
    /// two alternative URLs for deleting the next analysis in the set:
    /// `next_analysis_url` and `confirm_delete_url`.
    /// Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
    /// in a set. This is a useful option if you want to preserve at least one analysis
    /// for the specified tool in your repository.
    /// Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
    /// When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
    /// in the 200 response is `null`.
    /// 
    /// As an example of the deletion process,
    /// let's imagine that you added a workflow that configured a particular code scanning tool
    /// to analyze the code in a repository. This tool has added 15 analyses:
    /// 10 on the default branch, and another 5 on a topic branch.
    /// You therefore have two separate sets of analyses for this tool.
    /// You've now decided that you want to remove all of the analyses for the tool.
    /// To do this you must make 15 separate deletion requests.
    /// To start, you must find an analysis that's identified as deletable.
    /// Each set of analyses always has one that's identified as deletable.
    /// Having found the deletable analysis for one of the two sets,
    /// delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
    /// Then repeat the process for the second set.
    /// The procedure therefore consists of a nested loop:
    /// 
    /// **Outer loop**:
    /// * List the analyses for the repository, filtered by tool.
    /// * Parse this list to find a deletable analysis. If found:
    /// 
    ///   **Inner loop**:
    ///   * Delete the identified analysis.
    ///   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
    /// 
    /// The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for delete_analysis](https://docs.github.com/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_analysis(&self, owner: &str, repo: &str, analysis_id: i32, query_params: Option<impl Into<CodeScanningDeleteAnalysisParams<'api>>>) -> Result<CodeScanningAnalysisDeletion, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/code-scanning/analyses/{}", super::GITHUB_BASE_API_URL, owner, repo, analysis_id);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CodeScanningDeleteAnalysisParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                400 => Err(CodeScanningDeleteAnalysisError::Status400(github_response.to_json()?).into()),
                403 => Err(CodeScanningDeleteAnalysisError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningDeleteAnalysisError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningDeleteAnalysisError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningDeleteAnalysisError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a code scanning alert
    ///
    /// Gets a single code scanning alert.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_alert](https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-alert)
    ///
    /// ---
    pub async fn get_alert_async(&self, owner: &str, repo: &str, alert_number: AlertNumber) -> Result<CodeScanningAlert, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/alerts/{}", super::GITHUB_BASE_API_URL, owner, repo, alert_number);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                304 => Err(CodeScanningGetAlertError::Status304.into()),
                403 => Err(CodeScanningGetAlertError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningGetAlertError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningGetAlertError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningGetAlertError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a code scanning alert
    ///
    /// Gets a single code scanning alert.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_alert](https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-alert)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_alert(&self, owner: &str, repo: &str, alert_number: AlertNumber) -> Result<CodeScanningAlert, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/alerts/{}", super::GITHUB_BASE_API_URL, owner, repo, alert_number);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                304 => Err(CodeScanningGetAlertError::Status304.into()),
                403 => Err(CodeScanningGetAlertError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningGetAlertError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningGetAlertError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningGetAlertError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a code scanning analysis for a repository
    ///
    /// Gets a specified code scanning analysis for a repository.
    /// 
    /// The default JSON response contains fields that describe the analysis.
    /// This includes the Git reference and commit SHA to which the analysis relates,
    /// the datetime of the analysis, the name of the code scanning tool,
    /// and the number of alerts.
    /// 
    /// The `rules_count` field in the default response give the number of rules
    /// that were run in the analysis.
    /// For very old analyses this data is not available,
    /// and `0` is returned in this field.
    /// 
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    /// 
    /// - **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_analysis](https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)
    ///
    /// ---
    pub async fn get_analysis_async(&self, owner: &str, repo: &str, analysis_id: i32) -> Result<CodeScanningAnalysis, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/analyses/{}", super::GITHUB_BASE_API_URL, owner, repo, analysis_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningGetAnalysisError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningGetAnalysisError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningGetAnalysisError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningGetAnalysisError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a code scanning analysis for a repository
    ///
    /// Gets a specified code scanning analysis for a repository.
    /// 
    /// The default JSON response contains fields that describe the analysis.
    /// This includes the Git reference and commit SHA to which the analysis relates,
    /// the datetime of the analysis, the name of the code scanning tool,
    /// and the number of alerts.
    /// 
    /// The `rules_count` field in the default response give the number of rules
    /// that were run in the analysis.
    /// For very old analyses this data is not available,
    /// and `0` is returned in this field.
    /// 
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    /// 
    /// - **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_analysis](https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_analysis(&self, owner: &str, repo: &str, analysis_id: i32) -> Result<CodeScanningAnalysis, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/analyses/{}", super::GITHUB_BASE_API_URL, owner, repo, analysis_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningGetAnalysisError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningGetAnalysisError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningGetAnalysisError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningGetAnalysisError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a CodeQL database for a repository
    ///
    /// Gets a CodeQL database for a language in a repository.
    /// 
    /// By default this endpoint returns JSON metadata about the CodeQL database. To
    /// download the CodeQL database binary content, set the `Accept` header of the request
    /// to [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure
    /// your HTTP client is configured to follow redirects or use the `Location` header
    /// to make a second request to get the redirect URL.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_codeql_database](https://docs.github.com/rest/code-scanning/code-scanning#get-a-codeql-database-for-a-repository)
    ///
    /// ---
    pub async fn get_codeql_database_async(&self, owner: &str, repo: &str, language: &str) -> Result<CodeScanningCodeqlDatabase, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/databases/{}", super::GITHUB_BASE_API_URL, owner, repo, language);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                302 => Err(CodeScanningGetCodeqlDatabaseError::Status302.into()),
                403 => Err(CodeScanningGetCodeqlDatabaseError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningGetCodeqlDatabaseError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningGetCodeqlDatabaseError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningGetCodeqlDatabaseError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a CodeQL database for a repository
    ///
    /// Gets a CodeQL database for a language in a repository.
    /// 
    /// By default this endpoint returns JSON metadata about the CodeQL database. To
    /// download the CodeQL database binary content, set the `Accept` header of the request
    /// to [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure
    /// your HTTP client is configured to follow redirects or use the `Location` header
    /// to make a second request to get the redirect URL.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_codeql_database](https://docs.github.com/rest/code-scanning/code-scanning#get-a-codeql-database-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_codeql_database(&self, owner: &str, repo: &str, language: &str) -> Result<CodeScanningCodeqlDatabase, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/databases/{}", super::GITHUB_BASE_API_URL, owner, repo, language);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                302 => Err(CodeScanningGetCodeqlDatabaseError::Status302.into()),
                403 => Err(CodeScanningGetCodeqlDatabaseError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningGetCodeqlDatabaseError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningGetCodeqlDatabaseError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningGetCodeqlDatabaseError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a code scanning default setup configuration
    ///
    /// Gets a code scanning default setup configuration.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_default_setup](https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-default-setup-configuration)
    ///
    /// ---
    pub async fn get_default_setup_async(&self, owner: &str, repo: &str) -> Result<CodeScanningDefaultSetup, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/default-setup", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningGetDefaultSetupError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningGetDefaultSetupError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningGetDefaultSetupError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningGetDefaultSetupError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a code scanning default setup configuration
    ///
    /// Gets a code scanning default setup configuration.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_default_setup](https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-default-setup-configuration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_default_setup(&self, owner: &str, repo: &str) -> Result<CodeScanningDefaultSetup, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/default-setup", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningGetDefaultSetupError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningGetDefaultSetupError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningGetDefaultSetupError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningGetDefaultSetupError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get information about a SARIF upload
    ///
    /// Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)."
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_sarif](https://docs.github.com/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)
    ///
    /// ---
    pub async fn get_sarif_async(&self, owner: &str, repo: &str, sarif_id: &str) -> Result<CodeScanningSarifsStatus, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/sarifs/{}", super::GITHUB_BASE_API_URL, owner, repo, sarif_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningGetSarifError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningGetSarifError::Status404.into()),
                503 => Err(CodeScanningGetSarifError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningGetSarifError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get information about a SARIF upload
    ///
    /// Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)."
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_sarif](https://docs.github.com/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_sarif(&self, owner: &str, repo: &str, sarif_id: &str) -> Result<CodeScanningSarifsStatus, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/sarifs/{}", super::GITHUB_BASE_API_URL, owner, repo, sarif_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningGetSarifError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningGetSarifError::Status404.into()),
                503 => Err(CodeScanningGetSarifError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningGetSarifError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get the summary of a CodeQL variant analysis
    ///
    /// Gets the summary of a CodeQL variant analysis.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_variant_analysis](https://docs.github.com/rest/code-scanning/code-scanning#get-the-summary-of-a-codeql-variant-analysis)
    ///
    /// ---
    pub async fn get_variant_analysis_async(&self, owner: &str, repo: &str, codeql_variant_analysis_id: i32) -> Result<CodeScanningVariantAnalysis, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/variant-analyses/{}", super::GITHUB_BASE_API_URL, owner, repo, codeql_variant_analysis_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(CodeScanningGetVariantAnalysisError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningGetVariantAnalysisError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningGetVariantAnalysisError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get the summary of a CodeQL variant analysis
    ///
    /// Gets the summary of a CodeQL variant analysis.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_variant_analysis](https://docs.github.com/rest/code-scanning/code-scanning#get-the-summary-of-a-codeql-variant-analysis)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_variant_analysis(&self, owner: &str, repo: &str, codeql_variant_analysis_id: i32) -> Result<CodeScanningVariantAnalysis, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/variant-analyses/{}", super::GITHUB_BASE_API_URL, owner, repo, codeql_variant_analysis_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(CodeScanningGetVariantAnalysisError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningGetVariantAnalysisError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningGetVariantAnalysisError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get the analysis status of a repository in a CodeQL variant analysis
    ///
    /// Gets the analysis status of a repository in a CodeQL variant analysis.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_variant_analysis_repo_task](https://docs.github.com/rest/code-scanning/code-scanning#get-the-analysis-status-of-a-repository-in-a-codeql-variant-analysis)
    ///
    /// ---
    pub async fn get_variant_analysis_repo_task_async(&self, owner: &str, repo: &str, codeql_variant_analysis_id: i32, repo_owner: &str, repo_name: &str) -> Result<CodeScanningVariantAnalysisRepoTask, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/variant-analyses/{}/repos/{}/{}", super::GITHUB_BASE_API_URL, owner, repo, codeql_variant_analysis_id, repo_owner, repo_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(CodeScanningGetVariantAnalysisRepoTaskError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningGetVariantAnalysisRepoTaskError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningGetVariantAnalysisRepoTaskError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get the analysis status of a repository in a CodeQL variant analysis
    ///
    /// Gets the analysis status of a repository in a CodeQL variant analysis.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for get_variant_analysis_repo_task](https://docs.github.com/rest/code-scanning/code-scanning#get-the-analysis-status-of-a-repository-in-a-codeql-variant-analysis)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_variant_analysis_repo_task(&self, owner: &str, repo: &str, codeql_variant_analysis_id: i32, repo_owner: &str, repo_name: &str) -> Result<CodeScanningVariantAnalysisRepoTask, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/variant-analyses/{}/repos/{}/{}", super::GITHUB_BASE_API_URL, owner, repo, codeql_variant_analysis_id, repo_owner, repo_name);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(CodeScanningGetVariantAnalysisRepoTaskError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningGetVariantAnalysisRepoTaskError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningGetVariantAnalysisRepoTaskError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List instances of a code scanning alert
    ///
    /// Lists all instances of the specified code scanning alert.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_alert_instances](https://docs.github.com/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert)
    ///
    /// ---
    pub async fn list_alert_instances_async(&self, owner: &str, repo: &str, alert_number: AlertNumber, query_params: Option<impl Into<CodeScanningListAlertInstancesParams>>) -> Result<Vec<CodeScanningAlertInstance>, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/code-scanning/alerts/{}/instances", super::GITHUB_BASE_API_URL, owner, repo, alert_number);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningListAlertInstancesError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningListAlertInstancesError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningListAlertInstancesError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningListAlertInstancesError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List instances of a code scanning alert
    ///
    /// Lists all instances of the specified code scanning alert.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_alert_instances](https://docs.github.com/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_alert_instances(&self, owner: &str, repo: &str, alert_number: AlertNumber, query_params: Option<impl Into<CodeScanningListAlertInstancesParams>>) -> Result<Vec<CodeScanningAlertInstance>, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/code-scanning/alerts/{}/instances", super::GITHUB_BASE_API_URL, owner, repo, alert_number);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CodeScanningListAlertInstancesParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningListAlertInstancesError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningListAlertInstancesError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningListAlertInstancesError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningListAlertInstancesError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List code scanning alerts for an organization
    ///
    /// Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    /// 
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_alerts_for_org](https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-an-organization)
    ///
    /// ---
    pub async fn list_alerts_for_org_async(&self, org: &str, query_params: Option<impl Into<CodeScanningListAlertsForOrgParams<'api>>>) -> Result<Vec<CodeScanningOrganizationAlertItems>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/code-scanning/alerts", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                404 => Err(CodeScanningListAlertsForOrgError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningListAlertsForOrgError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningListAlertsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List code scanning alerts for an organization
    ///
    /// Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    /// 
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_alerts_for_org](https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_alerts_for_org(&self, org: &str, query_params: Option<impl Into<CodeScanningListAlertsForOrgParams<'api>>>) -> Result<Vec<CodeScanningOrganizationAlertItems>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/code-scanning/alerts", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CodeScanningListAlertsForOrgParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                404 => Err(CodeScanningListAlertsForOrgError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningListAlertsForOrgError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningListAlertsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List code scanning alerts for a repository
    ///
    /// Lists code scanning alerts.
    /// 
    /// The response includes a `most_recent_instance` object.
    /// This provides details of the most recent instance of this alert
    /// for the default branch (or for the specified Git reference if you used `ref` in the request).
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_alerts_for_repo](https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-a-repository)
    ///
    /// ---
    pub async fn list_alerts_for_repo_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<CodeScanningListAlertsForRepoParams<'api>>>) -> Result<Vec<CodeScanningAlertItems>, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/code-scanning/alerts", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                304 => Err(CodeScanningListAlertsForRepoError::Status304.into()),
                403 => Err(CodeScanningListAlertsForRepoError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningListAlertsForRepoError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningListAlertsForRepoError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningListAlertsForRepoError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List code scanning alerts for a repository
    ///
    /// Lists code scanning alerts.
    /// 
    /// The response includes a `most_recent_instance` object.
    /// This provides details of the most recent instance of this alert
    /// for the default branch (or for the specified Git reference if you used `ref` in the request).
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_alerts_for_repo](https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_alerts_for_repo(&self, owner: &str, repo: &str, query_params: Option<impl Into<CodeScanningListAlertsForRepoParams<'api>>>) -> Result<Vec<CodeScanningAlertItems>, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/code-scanning/alerts", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CodeScanningListAlertsForRepoParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                304 => Err(CodeScanningListAlertsForRepoError::Status304.into()),
                403 => Err(CodeScanningListAlertsForRepoError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningListAlertsForRepoError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningListAlertsForRepoError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningListAlertsForRepoError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List CodeQL databases for a repository
    ///
    /// Lists the CodeQL databases that are available in a repository.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_codeql_databases](https://docs.github.com/rest/code-scanning/code-scanning#list-codeql-databases-for-a-repository)
    ///
    /// ---
    pub async fn list_codeql_databases_async(&self, owner: &str, repo: &str) -> Result<Vec<CodeScanningCodeqlDatabase>, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/databases", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningListCodeqlDatabasesError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningListCodeqlDatabasesError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningListCodeqlDatabasesError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningListCodeqlDatabasesError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List CodeQL databases for a repository
    ///
    /// Lists the CodeQL databases that are available in a repository.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_codeql_databases](https://docs.github.com/rest/code-scanning/code-scanning#list-codeql-databases-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_codeql_databases(&self, owner: &str, repo: &str) -> Result<Vec<CodeScanningCodeqlDatabase>, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/codeql/databases", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningListCodeqlDatabasesError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningListCodeqlDatabasesError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningListCodeqlDatabasesError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningListCodeqlDatabasesError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List code scanning analyses for a repository
    ///
    /// Lists the details of all code scanning analyses for a repository,
    /// starting with the most recent.
    /// The response is paginated and you can use the `page` and `per_page` parameters
    /// to list the analyses you're interested in.
    /// By default 30 analyses are listed per page.
    /// 
    /// The `rules_count` field in the response give the number of rules
    /// that were run in the analysis.
    /// For very old analyses this data is not available,
    /// and `0` is returned in this field.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_recent_analyses](https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository)
    ///
    /// ---
    pub async fn list_recent_analyses_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<CodeScanningListRecentAnalysesParams<'api>>>) -> Result<Vec<CodeScanningAnalysis>, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/code-scanning/analyses", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningListRecentAnalysesError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningListRecentAnalysesError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningListRecentAnalysesError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningListRecentAnalysesError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List code scanning analyses for a repository
    ///
    /// Lists the details of all code scanning analyses for a repository,
    /// starting with the most recent.
    /// The response is paginated and you can use the `page` and `per_page` parameters
    /// to list the analyses you're interested in.
    /// By default 30 analyses are listed per page.
    /// 
    /// The `rules_count` field in the response give the number of rules
    /// that were run in the analysis.
    /// For very old analyses this data is not available,
    /// and `0` is returned in this field.
    /// 
    /// > [!WARNING]
    /// > **Deprecation notice:** The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for list_recent_analyses](https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_recent_analyses(&self, owner: &str, repo: &str, query_params: Option<impl Into<CodeScanningListRecentAnalysesParams<'api>>>) -> Result<Vec<CodeScanningAnalysis>, AdapterError> {

        let mut request_uri = format!("{}/repos/{}/{}/code-scanning/analyses", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CodeScanningListRecentAnalysesParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningListRecentAnalysesError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningListRecentAnalysesError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningListRecentAnalysesError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningListRecentAnalysesError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update a code scanning alert
    ///
    /// Updates the status of a single code scanning alert.
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for update_alert](https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-alert)
    ///
    /// ---
    pub async fn update_alert_async(&self, owner: &str, repo: &str, alert_number: AlertNumber, body: PatchCodeScanningUpdateAlert) -> Result<CodeScanningAlert, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/alerts/{}", super::GITHUB_BASE_API_URL, owner, repo, alert_number);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchCodeScanningUpdateAlert>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningUpdateAlertError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningUpdateAlertError::Status404(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningUpdateAlertError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningUpdateAlertError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update a code scanning alert
    ///
    /// Updates the status of a single code scanning alert.
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for update_alert](https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-alert)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn update_alert(&self, owner: &str, repo: &str, alert_number: AlertNumber, body: PatchCodeScanningUpdateAlert) -> Result<CodeScanningAlert, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/alerts/{}", super::GITHUB_BASE_API_URL, owner, repo, alert_number);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchCodeScanningUpdateAlert>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                403 => Err(CodeScanningUpdateAlertError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningUpdateAlertError::Status404(github_response.to_json()?).into()),
                503 => Err(CodeScanningUpdateAlertError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningUpdateAlertError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update a code scanning default setup configuration
    ///
    /// Updates a code scanning default setup configuration.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for update_default_setup](https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-default-setup-configuration)
    ///
    /// ---
    pub async fn update_default_setup_async(&self, owner: &str, repo: &str, body: PatchCodeScanningUpdateDefaultSetup) -> Result<EmptyObject, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/default-setup", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchCodeScanningUpdateDefaultSetup>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                202 => Err(CodeScanningUpdateDefaultSetupError::Status202(github_response.to_json_async().await?).into()),
                403 => Err(CodeScanningUpdateDefaultSetupError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningUpdateDefaultSetupError::Status404(github_response.to_json_async().await?).into()),
                409 => Err(CodeScanningUpdateDefaultSetupError::Status409(github_response.to_json_async().await?).into()),
                503 => Err(CodeScanningUpdateDefaultSetupError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningUpdateDefaultSetupError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update a code scanning default setup configuration
    ///
    /// Updates a code scanning default setup configuration.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    ///
    /// [GitHub API docs for update_default_setup](https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-default-setup-configuration)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn update_default_setup(&self, owner: &str, repo: &str, body: PatchCodeScanningUpdateDefaultSetup) -> Result<EmptyObject, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/default-setup", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchCodeScanningUpdateDefaultSetup>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                202 => Err(CodeScanningUpdateDefaultSetupError::Status202(github_response.to_json()?).into()),
                403 => Err(CodeScanningUpdateDefaultSetupError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningUpdateDefaultSetupError::Status404(github_response.to_json()?).into()),
                409 => Err(CodeScanningUpdateDefaultSetupError::Status409(github_response.to_json()?).into()),
                503 => Err(CodeScanningUpdateDefaultSetupError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningUpdateDefaultSetupError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Upload an analysis as SARIF data
    ///
    /// Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see "[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif)."
    /// 
    /// There are two places where you can upload code scanning results.
    ///  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
    ///  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
    /// 
    /// You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
    /// 
    /// ```nocompile
    /// gzip -c analysis-data.sarif | base64 -w0
    /// ```
    /// 
    /// SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
    /// To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see "[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)."
    /// 
    /// 
    /// | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
    /// |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
    /// | Runs per file                    |         20         |                                                                                  |
    /// | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
    /// | Rules per run                    |       25,000       |                                                                                  |
    /// | Tool extensions per run          |        100         |                                                                                  |
    /// | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
    /// | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
    /// | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |
    /// 
    /// 
    /// The `202 Accepted` response includes an `id` value.
    /// You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
    /// For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    /// 
    /// This endpoint is limited to 1,000 requests per hour for each user or app installation calling it.
    ///
    /// [GitHub API docs for upload_sarif](https://docs.github.com/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data)
    ///
    /// ---
    pub async fn upload_sarif_async(&self, owner: &str, repo: &str, body: PostCodeScanningUploadSarif) -> Result<CodeScanningSarifsReceipt, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/sarifs", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCodeScanningUploadSarif>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                400 => Err(CodeScanningUploadSarifError::Status400.into()),
                403 => Err(CodeScanningUploadSarifError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CodeScanningUploadSarifError::Status404(github_response.to_json_async().await?).into()),
                413 => Err(CodeScanningUploadSarifError::Status413.into()),
                503 => Err(CodeScanningUploadSarifError::Status503(github_response.to_json_async().await?).into()),
                code => Err(CodeScanningUploadSarifError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Upload an analysis as SARIF data
    ///
    /// Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see "[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif)."
    /// 
    /// There are two places where you can upload code scanning results.
    ///  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
    ///  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
    /// 
    /// You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
    /// 
    /// ```nocompile
    /// gzip -c analysis-data.sarif | base64 -w0
    /// ```
    /// 
    /// SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
    /// To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see "[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)."
    /// 
    /// 
    /// | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
    /// |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
    /// | Runs per file                    |         20         |                                                                                  |
    /// | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
    /// | Rules per run                    |       25,000       |                                                                                  |
    /// | Tool extensions per run          |        100         |                                                                                  |
    /// | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
    /// | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
    /// | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |
    /// 
    /// 
    /// The `202 Accepted` response includes an `id` value.
    /// You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
    /// For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
    /// 
    /// This endpoint is limited to 1,000 requests per hour for each user or app installation calling it.
    ///
    /// [GitHub API docs for upload_sarif](https://docs.github.com/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn upload_sarif(&self, owner: &str, repo: &str, body: PostCodeScanningUploadSarif) -> Result<CodeScanningSarifsReceipt, AdapterError> {

        let request_uri = format!("{}/repos/{}/{}/code-scanning/sarifs", super::GITHUB_BASE_API_URL, owner, repo);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCodeScanningUploadSarif>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                400 => Err(CodeScanningUploadSarifError::Status400.into()),
                403 => Err(CodeScanningUploadSarifError::Status403(github_response.to_json()?).into()),
                404 => Err(CodeScanningUploadSarifError::Status404(github_response.to_json()?).into()),
                413 => Err(CodeScanningUploadSarifError::Status413.into()),
                503 => Err(CodeScanningUploadSarifError::Status503(github_response.to_json()?).into()),
                code => Err(CodeScanningUploadSarifError::Generic { code }.into()),
            }
        }
    }

}
