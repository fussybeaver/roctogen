//! Method, error and parameter types for the Licenses endpoint.
#![allow(
    unused_imports,
)]
/* 
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * OpenAPI spec version: 1.1.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::adapters::{AdapterError, FromJson, GitHubRequest, GitHubRequestBuilder, GitHubResponseExt};
use crate::auth::Auth;
use crate::models::*;

use super::PerPage;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct Licenses<'api> {
    auth: &'api Auth
}

pub fn new(auth: &Auth) -> Licenses {
    Licenses { auth }
}

/// Errors for the [Get a license](Licenses::get_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum LicensesGetError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Not modified")]
    Status304,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get all commonly used licenses](Licenses::get_all_commonly_used_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum LicensesGetAllCommonlyUsedError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Not modified")]
    Status304,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

/// Errors for the [Get the license for a repository](Licenses::get_for_repo_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum LicensesGetForRepoError {
    #[error(transparent)]
    AdapterError(#[from] AdapterError),
    #[error(transparent)]
    SerdeJson(#[from] serde_json::Error),
    #[error(transparent)]
    SerdeUrl(#[from] serde_urlencoded::ser::Error),


    // -- endpoint errors

    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}


/// Query parameters for the [Get all commonly used licenses](Licenses::get_all_commonly_used_async()) endpoint.
#[derive(Default, Serialize)]
pub struct LicensesGetAllCommonlyUsedParams {
    
    featured: Option<bool>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl LicensesGetAllCommonlyUsedParams {
    pub fn new() -> Self {
        Self::default()
    }

    
    pub fn featured(self, featured: bool) -> Self {
        Self {
            featured: Some(featured),
            per_page: self.per_page, 
            page: self.page, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            featured: self.featured, 
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            featured: self.featured, 
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for LicensesGetAllCommonlyUsedParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [Get the license for a repository](Licenses::get_for_repo_async()) endpoint.
#[derive(Default, Serialize)]
pub struct LicensesGetForRepoParams {
    /// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    git_ref: Option<CodeScanningRef>
}

impl LicensesGetForRepoParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
    pub fn git_ref(self, git_ref: CodeScanningRef) -> Self {
        Self {
            git_ref: Some(git_ref),
        }
    }
}


impl<'api> Licenses<'api> {
    /// ---
    ///
    /// # Get a license
    ///
    /// Gets information about a specific license. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
    ///
    /// [GitHub API docs for get](https://docs.github.com/rest/licenses/licenses#get-a-license)
    ///
    /// ---
    pub async fn get_async(&self, license: &str) -> Result<License, LicensesGetError> {

        let request_uri = format!("{}/licenses/{}", super::GITHUB_BASE_API_URL, license);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.auth)?;

        // --

        let github_response = crate::adapters::fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(crate::adapters::to_json_async(github_response).await?)
        } else {
            match github_response.status_code() {
                403 => Err(LicensesGetError::Status403(crate::adapters::to_json_async(github_response).await?)),
                404 => Err(LicensesGetError::Status404(crate::adapters::to_json_async(github_response).await?)),
                304 => Err(LicensesGetError::Status304),
                code => Err(LicensesGetError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get a license
    ///
    /// Gets information about a specific license. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
    ///
    /// [GitHub API docs for get](https://docs.github.com/rest/licenses/licenses#get-a-license)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get(&self, license: &str) -> Result<License, LicensesGetError> {

        let request_uri = format!("{}/licenses/{}", super::GITHUB_BASE_API_URL, license);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.auth)?;

        // --

        let github_response = crate::adapters::fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(crate::adapters::to_json(github_response)?)
        } else {
            match github_response.status_code() {
                403 => Err(LicensesGetError::Status403(crate::adapters::to_json(github_response)?)),
                404 => Err(LicensesGetError::Status404(crate::adapters::to_json(github_response)?)),
                304 => Err(LicensesGetError::Status304),
                code => Err(LicensesGetError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get all commonly used licenses
    ///
    /// Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
    ///
    /// [GitHub API docs for get_all_commonly_used](https://docs.github.com/rest/licenses/licenses#get-all-commonly-used-licenses)
    ///
    /// ---
    pub async fn get_all_commonly_used_async(&self, query_params: Option<impl Into<LicensesGetAllCommonlyUsedParams>>) -> Result<Vec<LicenseSimple>, LicensesGetAllCommonlyUsedError> {

        let mut request_uri = format!("{}/licenses", super::GITHUB_BASE_API_URL);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.auth)?;

        // --

        let github_response = crate::adapters::fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(crate::adapters::to_json_async(github_response).await?)
        } else {
            match github_response.status_code() {
                304 => Err(LicensesGetAllCommonlyUsedError::Status304),
                code => Err(LicensesGetAllCommonlyUsedError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get all commonly used licenses
    ///
    /// Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
    ///
    /// [GitHub API docs for get_all_commonly_used](https://docs.github.com/rest/licenses/licenses#get-all-commonly-used-licenses)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_all_commonly_used(&self, query_params: Option<impl Into<LicensesGetAllCommonlyUsedParams>>) -> Result<Vec<LicenseSimple>, LicensesGetAllCommonlyUsedError> {

        let mut request_uri = format!("{}/licenses", super::GITHUB_BASE_API_URL);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: LicensesGetAllCommonlyUsedParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.auth)?;

        // --

        let github_response = crate::adapters::fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(crate::adapters::to_json(github_response)?)
        } else {
            match github_response.status_code() {
                304 => Err(LicensesGetAllCommonlyUsedError::Status304),
                code => Err(LicensesGetAllCommonlyUsedError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get the license for a repository
    ///
    /// This method returns the contents of the repository's license file, if one is detected.
    /// 
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    /// 
    /// - **`application/vnd.github.raw+json`**: Returns the raw contents of the license.
    /// - **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    ///
    /// [GitHub API docs for get_for_repo](https://docs.github.com/rest/licenses/licenses#get-the-license-for-a-repository)
    ///
    /// ---
    pub async fn get_for_repo_async(&self, owner: &str, repo: &str, query_params: Option<impl Into<LicensesGetForRepoParams>>) -> Result<LicenseContent, LicensesGetForRepoError> {

        let mut request_uri = format!("{}/repos/{}/{}/license", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.auth)?;

        // --

        let github_response = crate::adapters::fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(crate::adapters::to_json_async(github_response).await?)
        } else {
            match github_response.status_code() {
                404 => Err(LicensesGetForRepoError::Status404(crate::adapters::to_json_async(github_response).await?)),
                code => Err(LicensesGetForRepoError::Generic { code }),
            }
        }
    }

    /// ---
    ///
    /// # Get the license for a repository
    ///
    /// This method returns the contents of the repository's license file, if one is detected.
    /// 
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    /// 
    /// - **`application/vnd.github.raw+json`**: Returns the raw contents of the license.
    /// - **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
    ///
    /// [GitHub API docs for get_for_repo](https://docs.github.com/rest/licenses/licenses#get-the-license-for-a-repository)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_for_repo(&self, owner: &str, repo: &str, query_params: Option<impl Into<LicensesGetForRepoParams>>) -> Result<LicenseContent, LicensesGetForRepoError> {

        let mut request_uri = format!("{}/repos/{}/{}/license", super::GITHUB_BASE_API_URL, owner, repo);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: LicensesGetForRepoParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = GitHubRequestBuilder::build(req, self.auth)?;

        // --

        let github_response = crate::adapters::fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(crate::adapters::to_json(github_response)?)
        } else {
            match github_response.status_code() {
                404 => Err(LicensesGetForRepoError::Status404(crate::adapters::to_json(github_response)?)),
                code => Err(LicensesGetForRepoError::Generic { code }),
            }
        }
    }

}
