//! Method, error and parameter types for the HostedCompute endpoint.
#![allow(
    clippy::all
)]
/* 
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * OpenAPI spec version: 1.1.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use roctokit::adapters::{AdapterError, Client, GitHubRequest, GitHubResponseExt};
use crate::models::*;

use super::PerPage;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct HostedCompute<'api, C: Client> where AdapterError: From<<C as Client>::Err> {
    client: &'api C
}

pub fn new<C: Client>(client: &C) -> HostedCompute<C> where AdapterError: From<<C as Client>::Err> {
    HostedCompute { client }
}

/// Errors for the [Create a hosted compute network configuration for an organization](HostedCompute::create_network_configuration_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum HostedComputeCreateNetworkConfigurationForOrgError {
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<HostedComputeCreateNetworkConfigurationForOrgError> for AdapterError {
    fn from(err: HostedComputeCreateNetworkConfigurationForOrgError) -> Self {
        let (description, status_code) = match err {
            HostedComputeCreateNetworkConfigurationForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Delete a hosted compute network configuration from an organization](HostedCompute::delete_network_configuration_from_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum HostedComputeDeleteNetworkConfigurationFromOrgError {
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<HostedComputeDeleteNetworkConfigurationFromOrgError> for AdapterError {
    fn from(err: HostedComputeDeleteNetworkConfigurationFromOrgError) -> Self {
        let (description, status_code) = match err {
            HostedComputeDeleteNetworkConfigurationFromOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a hosted compute network configuration for an organization](HostedCompute::get_network_configuration_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum HostedComputeGetNetworkConfigurationForOrgError {
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<HostedComputeGetNetworkConfigurationForOrgError> for AdapterError {
    fn from(err: HostedComputeGetNetworkConfigurationForOrgError) -> Self {
        let (description, status_code) = match err {
            HostedComputeGetNetworkConfigurationForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a hosted compute network settings resource for an organization](HostedCompute::get_network_settings_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum HostedComputeGetNetworkSettingsForOrgError {
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<HostedComputeGetNetworkSettingsForOrgError> for AdapterError {
    fn from(err: HostedComputeGetNetworkSettingsForOrgError) -> Self {
        let (description, status_code) = match err {
            HostedComputeGetNetworkSettingsForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List hosted compute network configurations for an organization](HostedCompute::list_network_configurations_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum HostedComputeListNetworkConfigurationsForOrgError {
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<HostedComputeListNetworkConfigurationsForOrgError> for AdapterError {
    fn from(err: HostedComputeListNetworkConfigurationsForOrgError) -> Self {
        let (description, status_code) = match err {
            HostedComputeListNetworkConfigurationsForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Update a hosted compute network configuration for an organization](HostedCompute::update_network_configuration_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum HostedComputeUpdateNetworkConfigurationForOrgError {
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<HostedComputeUpdateNetworkConfigurationForOrgError> for AdapterError {
    fn from(err: HostedComputeUpdateNetworkConfigurationForOrgError) -> Self {
        let (description, status_code) = match err {
            HostedComputeUpdateNetworkConfigurationForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}


/// Query parameters for the [List hosted compute network configurations for an organization](HostedCompute::list_network_configurations_for_org_async()) endpoint.
#[derive(Default, Serialize)]
pub struct HostedComputeListNetworkConfigurationsForOrgParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>
}

impl HostedComputeListNetworkConfigurationsForOrgParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            per_page: Some(per_page),
            page: self.page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            per_page: self.per_page, 
            page: Some(page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for HostedComputeListNetworkConfigurationsForOrgParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}

impl<'api, C: Client> HostedCompute<'api, C> where AdapterError: From<<C as Client>::Err> {
    /// ---
    ///
    /// # Create a hosted compute network configuration for an organization
    ///
    /// Creates a hosted compute network configuration for an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_network_configuration_for_org](https://docs.github.com/rest/orgs/network-configurations#create-a-hosted-compute-network-configuration-for-an-organization)
    ///
    /// ---
    pub async fn create_network_configuration_for_org_async(&self, org: &str, body: PostHostedComputeCreateNetworkConfigurationForOrg) -> Result<NetworkConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-configurations", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostHostedComputeCreateNetworkConfigurationForOrg>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeCreateNetworkConfigurationForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Create a hosted compute network configuration for an organization
    ///
    /// Creates a hosted compute network configuration for an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for create_network_configuration_for_org](https://docs.github.com/rest/orgs/network-configurations#create-a-hosted-compute-network-configuration-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn create_network_configuration_for_org(&self, org: &str, body: PostHostedComputeCreateNetworkConfigurationForOrg) -> Result<NetworkConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-configurations", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostHostedComputeCreateNetworkConfigurationForOrg>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeCreateNetworkConfigurationForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete a hosted compute network configuration from an organization
    ///
    /// Deletes a hosted compute network configuration from an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_network_configuration_from_org](https://docs.github.com/rest/orgs/network-configurations#delete-a-hosted-compute-network-configuration-from-an-organization)
    ///
    /// ---
    pub async fn delete_network_configuration_from_org_async(&self, org: &str, network_configuration_id: &str) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-configurations/{}", super::GITHUB_BASE_API_URL, org, network_configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(())
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeDeleteNetworkConfigurationFromOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Delete a hosted compute network configuration from an organization
    ///
    /// Deletes a hosted compute network configuration from an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for delete_network_configuration_from_org](https://docs.github.com/rest/orgs/network-configurations#delete-a-hosted-compute-network-configuration-from-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn delete_network_configuration_from_org(&self, org: &str, network_configuration_id: &str) -> Result<(), AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-configurations/{}", super::GITHUB_BASE_API_URL, org, network_configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(())
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeDeleteNetworkConfigurationFromOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a hosted compute network configuration for an organization
    ///
    /// Gets a hosted compute network configuration configured in an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_network_configuration_for_org](https://docs.github.com/rest/orgs/network-configurations#get-a-hosted-compute-network-configuration-for-an-organization)
    ///
    /// ---
    pub async fn get_network_configuration_for_org_async(&self, org: &str, network_configuration_id: &str) -> Result<NetworkConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-configurations/{}", super::GITHUB_BASE_API_URL, org, network_configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeGetNetworkConfigurationForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a hosted compute network configuration for an organization
    ///
    /// Gets a hosted compute network configuration configured in an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_network_configuration_for_org](https://docs.github.com/rest/orgs/network-configurations#get-a-hosted-compute-network-configuration-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_network_configuration_for_org(&self, org: &str, network_configuration_id: &str) -> Result<NetworkConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-configurations/{}", super::GITHUB_BASE_API_URL, org, network_configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeGetNetworkConfigurationForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a hosted compute network settings resource for an organization
    ///
    /// Gets a hosted compute network settings resource configured for an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_network_settings_for_org](https://docs.github.com/rest/orgs/network-configurations#get-a-hosted-compute-network-settings-resource-for-an-organization)
    ///
    /// ---
    pub async fn get_network_settings_for_org_async(&self, org: &str, network_settings_id: &str) -> Result<NetworkSettings, AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-settings/{}", super::GITHUB_BASE_API_URL, org, network_settings_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeGetNetworkSettingsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a hosted compute network settings resource for an organization
    ///
    /// Gets a hosted compute network settings resource configured for an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for get_network_settings_for_org](https://docs.github.com/rest/orgs/network-configurations#get-a-hosted-compute-network-settings-resource-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_network_settings_for_org(&self, org: &str, network_settings_id: &str) -> Result<NetworkSettings, AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-settings/{}", super::GITHUB_BASE_API_URL, org, network_settings_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeGetNetworkSettingsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List hosted compute network configurations for an organization
    ///
    /// Lists all hosted compute network configurations configured in an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_network_configurations_for_org](https://docs.github.com/rest/orgs/network-configurations#list-hosted-compute-network-configurations-for-an-organization)
    ///
    /// ---
    pub async fn list_network_configurations_for_org_async(&self, org: &str, query_params: Option<impl Into<HostedComputeListNetworkConfigurationsForOrgParams>>) -> Result<GetHostedComputeListNetworkConfigurationsForOrgResponse200, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/settings/network-configurations", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeListNetworkConfigurationsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List hosted compute network configurations for an organization
    ///
    /// Lists all hosted compute network configurations configured in an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for list_network_configurations_for_org](https://docs.github.com/rest/orgs/network-configurations#list-hosted-compute-network-configurations-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_network_configurations_for_org(&self, org: &str, query_params: Option<impl Into<HostedComputeListNetworkConfigurationsForOrgParams>>) -> Result<GetHostedComputeListNetworkConfigurationsForOrgResponse200, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/settings/network-configurations", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: HostedComputeListNetworkConfigurationsForOrgParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeListNetworkConfigurationsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update a hosted compute network configuration for an organization
    ///
    /// Updates a hosted compute network configuration for an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for update_network_configuration_for_org](https://docs.github.com/rest/orgs/network-configurations#update-a-hosted-compute-network-configuration-for-an-organization)
    ///
    /// ---
    pub async fn update_network_configuration_for_org_async(&self, org: &str, network_configuration_id: &str, body: PatchHostedComputeUpdateNetworkConfigurationForOrg) -> Result<NetworkConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-configurations/{}", super::GITHUB_BASE_API_URL, org, network_configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchHostedComputeUpdateNetworkConfigurationForOrg>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeUpdateNetworkConfigurationForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Update a hosted compute network configuration for an organization
    ///
    /// Updates a hosted compute network configuration for an organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
    ///
    /// [GitHub API docs for update_network_configuration_for_org](https://docs.github.com/rest/orgs/network-configurations#update-a-hosted-compute-network-configuration-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn update_network_configuration_for_org(&self, org: &str, network_configuration_id: &str, body: PatchHostedComputeUpdateNetworkConfigurationForOrg) -> Result<NetworkConfiguration, AdapterError> {

        let request_uri = format!("{}/orgs/{}/settings/network-configurations/{}", super::GITHUB_BASE_API_URL, org, network_configuration_id);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PatchHostedComputeUpdateNetworkConfigurationForOrg>(body)?),
            method: "PATCH",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                code => Err(HostedComputeUpdateNetworkConfigurationForOrgError::Generic { code }.into()),
            }
        }
    }

}
