//! Method, error and parameter types for the Copilot endpoint.
#![allow(
    clippy::all
)]
/* 
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * OpenAPI spec version: 1.1.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use roctokit::adapters::{AdapterError, Client, GitHubRequest, GitHubResponseExt};
use crate::models::*;

use super::PerPage;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct Copilot<'api, C: Client> where AdapterError: From<<C as Client>::Err> {
    client: &'api C
}

pub fn new<C: Client>(client: &C) -> Copilot<C> where AdapterError: From<<C as Client>::Err> {
    Copilot { client }
}

/// Errors for the [Add teams to the Copilot subscription for an organization](Copilot::add_copilot_seats_for_teams_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotAddCopilotSeatsForTeamsError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured.")]
    Status422,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotAddCopilotSeatsForTeamsError> for AdapterError {
    fn from(err: CopilotAddCopilotSeatsForTeamsError) -> Self {
        let (description, status_code) = match err {
            CopilotAddCopilotSeatsForTeamsError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotAddCopilotSeatsForTeamsError::Status401(_) => (String::from("Requires authentication"), 401),
            CopilotAddCopilotSeatsForTeamsError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotAddCopilotSeatsForTeamsError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotAddCopilotSeatsForTeamsError::Status422 => (String::from("Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured."), 422),
            CopilotAddCopilotSeatsForTeamsError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Add users to the Copilot subscription for an organization](Copilot::add_copilot_seats_for_users_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotAddCopilotSeatsForUsersError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured.")]
    Status422,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotAddCopilotSeatsForUsersError> for AdapterError {
    fn from(err: CopilotAddCopilotSeatsForUsersError) -> Self {
        let (description, status_code) = match err {
            CopilotAddCopilotSeatsForUsersError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotAddCopilotSeatsForUsersError::Status401(_) => (String::from("Requires authentication"), 401),
            CopilotAddCopilotSeatsForUsersError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotAddCopilotSeatsForUsersError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotAddCopilotSeatsForUsersError::Status422 => (String::from("Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured."), 422),
            CopilotAddCopilotSeatsForUsersError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Remove teams from the Copilot subscription for an organization](Copilot::cancel_copilot_seat_assignment_for_teams_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotCancelCopilotSeatAssignmentForTeamsError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured.")]
    Status422,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotCancelCopilotSeatAssignmentForTeamsError> for AdapterError {
    fn from(err: CopilotCancelCopilotSeatAssignmentForTeamsError) -> Self {
        let (description, status_code) = match err {
            CopilotCancelCopilotSeatAssignmentForTeamsError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotCancelCopilotSeatAssignmentForTeamsError::Status401(_) => (String::from("Requires authentication"), 401),
            CopilotCancelCopilotSeatAssignmentForTeamsError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotCancelCopilotSeatAssignmentForTeamsError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotCancelCopilotSeatAssignmentForTeamsError::Status422 => (String::from("Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization's Copilot access setting is set to enable Copilot for all users or is unconfigured."), 422),
            CopilotCancelCopilotSeatAssignmentForTeamsError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Remove users from the Copilot subscription for an organization](Copilot::cancel_copilot_seat_assignment_for_users_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotCancelCopilotSeatAssignmentForUsersError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, the seat management setting is set to enable Copilot for all users or is unconfigured, or a user's seat cannot be cancelled because it was assigned to them via a team.")]
    Status422,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotCancelCopilotSeatAssignmentForUsersError> for AdapterError {
    fn from(err: CopilotCancelCopilotSeatAssignmentForUsersError) -> Self {
        let (description, status_code) = match err {
            CopilotCancelCopilotSeatAssignmentForUsersError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotCancelCopilotSeatAssignmentForUsersError::Status401(_) => (String::from("Requires authentication"), 401),
            CopilotCancelCopilotSeatAssignmentForUsersError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotCancelCopilotSeatAssignmentForUsersError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotCancelCopilotSeatAssignmentForUsersError::Status422 => (String::from("Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, the seat management setting is set to enable Copilot for all users or is unconfigured, or a user's seat cannot be cancelled because it was assigned to them via a team."), 422),
            CopilotCancelCopilotSeatAssignmentForUsersError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get Copilot metrics for an organization](Copilot::copilot_metrics_for_organization_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotCopilotMetricsForOrganizationError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Copilot Usage Merics API setting is disabled at the organization or enterprise level.")]
    Status422(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotCopilotMetricsForOrganizationError> for AdapterError {
    fn from(err: CopilotCopilotMetricsForOrganizationError) -> Self {
        let (description, status_code) = match err {
            CopilotCopilotMetricsForOrganizationError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotCopilotMetricsForOrganizationError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotCopilotMetricsForOrganizationError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotCopilotMetricsForOrganizationError::Status422(_) => (String::from("Copilot Usage Merics API setting is disabled at the organization or enterprise level."), 422),
            CopilotCopilotMetricsForOrganizationError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get Copilot metrics for a team](Copilot::copilot_metrics_for_team_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotCopilotMetricsForTeamError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Copilot Usage Merics API setting is disabled at the organization or enterprise level.")]
    Status422(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotCopilotMetricsForTeamError> for AdapterError {
    fn from(err: CopilotCopilotMetricsForTeamError) -> Self {
        let (description, status_code) = match err {
            CopilotCopilotMetricsForTeamError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotCopilotMetricsForTeamError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotCopilotMetricsForTeamError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotCopilotMetricsForTeamError::Status422(_) => (String::from("Copilot Usage Merics API setting is disabled at the organization or enterprise level."), 422),
            CopilotCopilotMetricsForTeamError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get Copilot seat information and settings for an organization](Copilot::get_copilot_organization_details_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotGetCopilotOrganizationDetailsError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("There is a problem with your account's associated payment method.")]
    Status422,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotGetCopilotOrganizationDetailsError> for AdapterError {
    fn from(err: CopilotGetCopilotOrganizationDetailsError) -> Self {
        let (description, status_code) = match err {
            CopilotGetCopilotOrganizationDetailsError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotGetCopilotOrganizationDetailsError::Status401(_) => (String::from("Requires authentication"), 401),
            CopilotGetCopilotOrganizationDetailsError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotGetCopilotOrganizationDetailsError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotGetCopilotOrganizationDetailsError::Status422 => (String::from("There is a problem with your account's associated payment method."), 422),
            CopilotGetCopilotOrganizationDetailsError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get Copilot seat assignment details for a user](Copilot::get_copilot_seat_details_for_user_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotGetCopilotSeatDetailsForUserError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Copilot Business or Enterprise is not enabled for this organization or the user has a pending organization invitation.")]
    Status422,
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotGetCopilotSeatDetailsForUserError> for AdapterError {
    fn from(err: CopilotGetCopilotSeatDetailsForUserError) -> Self {
        let (description, status_code) = match err {
            CopilotGetCopilotSeatDetailsForUserError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotGetCopilotSeatDetailsForUserError::Status401(_) => (String::from("Requires authentication"), 401),
            CopilotGetCopilotSeatDetailsForUserError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotGetCopilotSeatDetailsForUserError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotGetCopilotSeatDetailsForUserError::Status422 => (String::from("Copilot Business or Enterprise is not enabled for this organization or the user has a pending organization invitation."), 422),
            CopilotGetCopilotSeatDetailsForUserError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [List all Copilot seat assignments for an organization](Copilot::list_copilot_seats_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotListCopilotSeatsError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotListCopilotSeatsError> for AdapterError {
    fn from(err: CopilotListCopilotSeatsError) -> Self {
        let (description, status_code) = match err {
            CopilotListCopilotSeatsError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotListCopilotSeatsError::Status401(_) => (String::from("Requires authentication"), 401),
            CopilotListCopilotSeatsError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotListCopilotSeatsError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotListCopilotSeatsError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a summary of Copilot usage for organization members](Copilot::usage_metrics_for_org_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotUsageMetricsForOrgError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotUsageMetricsForOrgError> for AdapterError {
    fn from(err: CopilotUsageMetricsForOrgError) -> Self {
        let (description, status_code) = match err {
            CopilotUsageMetricsForOrgError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotUsageMetricsForOrgError::Status401(_) => (String::from("Requires authentication"), 401),
            CopilotUsageMetricsForOrgError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotUsageMetricsForOrgError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotUsageMetricsForOrgError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}

/// Errors for the [Get a summary of Copilot usage for a team](Copilot::usage_metrics_for_team_async()) endpoint.
#[derive(Debug, thiserror::Error)]
pub enum CopilotUsageMetricsForTeamError {
    #[error("Internal Error")]
    Status500(BasicError),
    #[error("Requires authentication")]
    Status401(BasicError),
    #[error("Forbidden")]
    Status403(BasicError),
    #[error("Resource not found")]
    Status404(BasicError),
    #[error("Status code: {}", code)]
    Generic { code: u16 },
}

impl From<CopilotUsageMetricsForTeamError> for AdapterError {
    fn from(err: CopilotUsageMetricsForTeamError) -> Self {
        let (description, status_code) = match err {
            CopilotUsageMetricsForTeamError::Status500(_) => (String::from("Internal Error"), 500),
            CopilotUsageMetricsForTeamError::Status401(_) => (String::from("Requires authentication"), 401),
            CopilotUsageMetricsForTeamError::Status403(_) => (String::from("Forbidden"), 403),
            CopilotUsageMetricsForTeamError::Status404(_) => (String::from("Resource not found"), 404),
            CopilotUsageMetricsForTeamError::Generic { code } => (String::from("Generic"), code)
        };

        Self::Endpoint {
            description,
            status_code,
            source: Some(Box::new(err))
        }
    }
}


/// Query parameters for the [Get Copilot metrics for an organization](Copilot::copilot_metrics_for_organization_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CopilotCopilotMetricsForOrganizationParams<'req> {
    /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
    since: Option<&'req str>, 
    /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
    until: Option<&'req str>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>
}

impl<'req> CopilotCopilotMetricsForOrganizationParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
    pub fn since(self, since: &'req str) -> Self {
        Self {
            since: Some(since),
            until: self.until, 
            page: self.page, 
            per_page: self.per_page, 
        }
    }

    /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
    pub fn until(self, until: &'req str) -> Self {
        Self {
            since: self.since, 
            until: Some(until),
            page: self.page, 
            per_page: self.per_page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            since: self.since, 
            until: self.until, 
            page: Some(page),
            per_page: self.per_page, 
        }
    }

    /// The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            since: self.since, 
            until: self.until, 
            page: self.page, 
            per_page: Some(per_page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for CopilotCopilotMetricsForOrganizationParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [Get Copilot metrics for a team](Copilot::copilot_metrics_for_team_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CopilotCopilotMetricsForTeamParams<'req> {
    /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
    since: Option<&'req str>, 
    /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
    until: Option<&'req str>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>
}

impl<'req> CopilotCopilotMetricsForTeamParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
    pub fn since(self, since: &'req str) -> Self {
        Self {
            since: Some(since),
            until: self.until, 
            page: self.page, 
            per_page: self.per_page, 
        }
    }

    /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
    pub fn until(self, until: &'req str) -> Self {
        Self {
            since: self.since, 
            until: Some(until),
            page: self.page, 
            per_page: self.per_page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            since: self.since, 
            until: self.until, 
            page: Some(page),
            per_page: self.per_page, 
        }
    }

    /// The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            since: self.since, 
            until: self.until, 
            page: self.page, 
            per_page: Some(per_page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for CopilotCopilotMetricsForTeamParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [List all Copilot seat assignments for an organization](Copilot::list_copilot_seats_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CopilotListCopilotSeatsParams {
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>
}

impl CopilotListCopilotSeatsParams {
    pub fn new() -> Self {
        Self::default()
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            page: Some(page),
            per_page: self.per_page, 
        }
    }

    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            page: self.page, 
            per_page: Some(per_page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for CopilotListCopilotSeatsParams {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [Get a summary of Copilot usage for organization members](Copilot::usage_metrics_for_org_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CopilotUsageMetricsForOrgParams<'req> {
    /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
    since: Option<&'req str>, 
    /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
    until: Option<&'req str>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>
}

impl<'req> CopilotUsageMetricsForOrgParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
    pub fn since(self, since: &'req str) -> Self {
        Self {
            since: Some(since),
            until: self.until, 
            page: self.page, 
            per_page: self.per_page, 
        }
    }

    /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
    pub fn until(self, until: &'req str) -> Self {
        Self {
            since: self.since, 
            until: Some(until),
            page: self.page, 
            per_page: self.per_page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            since: self.since, 
            until: self.until, 
            page: Some(page),
            per_page: self.per_page, 
        }
    }

    /// The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            since: self.since, 
            until: self.until, 
            page: self.page, 
            per_page: Some(per_page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for CopilotUsageMetricsForOrgParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}
/// Query parameters for the [Get a summary of Copilot usage for a team](Copilot::usage_metrics_for_team_async()) endpoint.
#[derive(Default, Serialize)]
pub struct CopilotUsageMetricsForTeamParams<'req> {
    /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
    since: Option<&'req str>, 
    /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
    until: Option<&'req str>, 
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    page: Option<u16>, 
    /// The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    per_page: Option<u16>
}

impl<'req> CopilotUsageMetricsForTeamParams<'req> {
    pub fn new() -> Self {
        Self::default()
    }

    /// Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
    pub fn since(self, since: &'req str) -> Self {
        Self {
            since: Some(since),
            until: self.until, 
            page: self.page, 
            per_page: self.per_page, 
        }
    }

    /// Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
    pub fn until(self, until: &'req str) -> Self {
        Self {
            since: self.since, 
            until: Some(until),
            page: self.page, 
            per_page: self.per_page, 
        }
    }

    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn page(self, page: u16) -> Self {
        Self {
            since: self.since, 
            until: self.until, 
            page: Some(page),
            per_page: self.per_page, 
        }
    }

    /// The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub fn per_page(self, per_page: u16) -> Self {
        Self {
            since: self.since, 
            until: self.until, 
            page: self.page, 
            per_page: Some(per_page),
        }
    }
}

impl<'enc> From<&'enc PerPage> for CopilotUsageMetricsForTeamParams<'enc> {
    fn from(per_page: &'enc PerPage) -> Self {
        Self {
            per_page: Some(per_page.per_page),
            page: Some(per_page.page),
            ..Default::default()
        }
    }
}

impl<'api, C: Client> Copilot<'api, C> where AdapterError: From<<C as Client>::Err> {
    /// ---
    ///
    /// # Add teams to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Purchases a GitHub Copilot seat for all users within each specified team.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    /// 
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    /// 
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for add_copilot_seats_for_teams](https://docs.github.com/rest/copilot/copilot-user-management#add-teams-to-the-copilot-subscription-for-an-organization)
    ///
    /// ---
    pub async fn add_copilot_seats_for_teams_async(&self, org: &str, body: PostCopilotAddCopilotSeatsForTeams) -> Result<PostCopilotAddCopilotSeatsForTeamsResponse201, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing/selected_teams", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCopilotAddCopilotSeatsForTeams>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotAddCopilotSeatsForTeamsError::Status500(github_response.to_json_async().await?).into()),
                401 => Err(CopilotAddCopilotSeatsForTeamsError::Status401(github_response.to_json_async().await?).into()),
                403 => Err(CopilotAddCopilotSeatsForTeamsError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotAddCopilotSeatsForTeamsError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(CopilotAddCopilotSeatsForTeamsError::Status422.into()),
                code => Err(CopilotAddCopilotSeatsForTeamsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Add teams to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Purchases a GitHub Copilot seat for all users within each specified team.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    /// 
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    /// 
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for add_copilot_seats_for_teams](https://docs.github.com/rest/copilot/copilot-user-management#add-teams-to-the-copilot-subscription-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn add_copilot_seats_for_teams(&self, org: &str, body: PostCopilotAddCopilotSeatsForTeams) -> Result<PostCopilotAddCopilotSeatsForTeamsResponse201, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing/selected_teams", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCopilotAddCopilotSeatsForTeams>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotAddCopilotSeatsForTeamsError::Status500(github_response.to_json()?).into()),
                401 => Err(CopilotAddCopilotSeatsForTeamsError::Status401(github_response.to_json()?).into()),
                403 => Err(CopilotAddCopilotSeatsForTeamsError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotAddCopilotSeatsForTeamsError::Status404(github_response.to_json()?).into()),
                422 => Err(CopilotAddCopilotSeatsForTeamsError::Status422.into()),
                code => Err(CopilotAddCopilotSeatsForTeamsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Add users to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Purchases a GitHub Copilot seat for each user specified.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    /// 
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    /// 
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for add_copilot_seats_for_users](https://docs.github.com/rest/copilot/copilot-user-management#add-users-to-the-copilot-subscription-for-an-organization)
    ///
    /// ---
    pub async fn add_copilot_seats_for_users_async(&self, org: &str, body: PostCopilotAddCopilotSeatsForUsers) -> Result<PostCopilotAddCopilotSeatsForUsersResponse201, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing/selected_users", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCopilotAddCopilotSeatsForUsers>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotAddCopilotSeatsForUsersError::Status500(github_response.to_json_async().await?).into()),
                401 => Err(CopilotAddCopilotSeatsForUsersError::Status401(github_response.to_json_async().await?).into()),
                403 => Err(CopilotAddCopilotSeatsForUsersError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotAddCopilotSeatsForUsersError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(CopilotAddCopilotSeatsForUsersError::Status422.into()),
                code => Err(CopilotAddCopilotSeatsForUsersError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Add users to the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Purchases a GitHub Copilot seat for each user specified.
    /// The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
    /// 
    /// Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
    /// For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
    /// For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
    /// 
    /// The response contains the total number of new seats that were created and existing seats that were refreshed.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for add_copilot_seats_for_users](https://docs.github.com/rest/copilot/copilot-user-management#add-users-to-the-copilot-subscription-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn add_copilot_seats_for_users(&self, org: &str, body: PostCopilotAddCopilotSeatsForUsers) -> Result<PostCopilotAddCopilotSeatsForUsersResponse201, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing/selected_users", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<PostCopilotAddCopilotSeatsForUsers>(body)?),
            method: "POST",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotAddCopilotSeatsForUsersError::Status500(github_response.to_json()?).into()),
                401 => Err(CopilotAddCopilotSeatsForUsersError::Status401(github_response.to_json()?).into()),
                403 => Err(CopilotAddCopilotSeatsForUsersError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotAddCopilotSeatsForUsersError::Status404(github_response.to_json()?).into()),
                422 => Err(CopilotAddCopilotSeatsForUsersError::Status422.into()),
                code => Err(CopilotAddCopilotSeatsForUsersError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Remove teams from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Sets seats for all members of each team specified to "pending cancellation".
    /// This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    /// 
    /// Only organization owners can cancel Copilot seats for their organization members.
    /// 
    /// The response contains the total number of seats set to "pending cancellation".
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for cancel_copilot_seat_assignment_for_teams](https://docs.github.com/rest/copilot/copilot-user-management#remove-teams-from-the-copilot-subscription-for-an-organization)
    ///
    /// ---
    pub async fn cancel_copilot_seat_assignment_for_teams_async(&self, org: &str, body: DeleteCopilotCancelCopilotSeatAssignmentForTeams) -> Result<DeleteCopilotCancelCopilotSeatAssignmentForTeamsResponse200, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing/selected_teams", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<DeleteCopilotCancelCopilotSeatAssignmentForTeams>(body)?),
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status500(github_response.to_json_async().await?).into()),
                401 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status401(github_response.to_json_async().await?).into()),
                403 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status422.into()),
                code => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Remove teams from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Sets seats for all members of each team specified to "pending cancellation".
    /// This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    /// 
    /// Only organization owners can cancel Copilot seats for their organization members.
    /// 
    /// The response contains the total number of seats set to "pending cancellation".
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for cancel_copilot_seat_assignment_for_teams](https://docs.github.com/rest/copilot/copilot-user-management#remove-teams-from-the-copilot-subscription-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn cancel_copilot_seat_assignment_for_teams(&self, org: &str, body: DeleteCopilotCancelCopilotSeatAssignmentForTeams) -> Result<DeleteCopilotCancelCopilotSeatAssignmentForTeamsResponse200, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing/selected_teams", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<DeleteCopilotCancelCopilotSeatAssignmentForTeams>(body)?),
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status500(github_response.to_json()?).into()),
                401 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status401(github_response.to_json()?).into()),
                403 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status404(github_response.to_json()?).into()),
                422 => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Status422.into()),
                code => Err(CopilotCancelCopilotSeatAssignmentForTeamsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Remove users from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Sets seats for all users specified to "pending cancellation".
    /// This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    /// 
    /// Only organization owners can cancel Copilot seats for their organization members.
    /// 
    /// The response contains the total number of seats set to "pending cancellation".
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for cancel_copilot_seat_assignment_for_users](https://docs.github.com/rest/copilot/copilot-user-management#remove-users-from-the-copilot-subscription-for-an-organization)
    ///
    /// ---
    pub async fn cancel_copilot_seat_assignment_for_users_async(&self, org: &str, body: DeleteCopilotCancelCopilotSeatAssignmentForUsers) -> Result<DeleteCopilotCancelCopilotSeatAssignmentForUsersResponse200, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing/selected_users", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<DeleteCopilotCancelCopilotSeatAssignmentForUsers>(body)?),
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status500(github_response.to_json_async().await?).into()),
                401 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status401(github_response.to_json_async().await?).into()),
                403 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status422.into()),
                code => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Remove users from the Copilot subscription for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Sets seats for all users specified to "pending cancellation".
    /// This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
    /// For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
    /// 
    /// Only organization owners can cancel Copilot seats for their organization members.
    /// 
    /// The response contains the total number of seats set to "pending cancellation".
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for cancel_copilot_seat_assignment_for_users](https://docs.github.com/rest/copilot/copilot-user-management#remove-users-from-the-copilot-subscription-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn cancel_copilot_seat_assignment_for_users(&self, org: &str, body: DeleteCopilotCancelCopilotSeatAssignmentForUsers) -> Result<DeleteCopilotCancelCopilotSeatAssignmentForUsersResponse200, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing/selected_users", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: Some(C::from_json::<DeleteCopilotCancelCopilotSeatAssignmentForUsers>(body)?),
            method: "DELETE",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status500(github_response.to_json()?).into()),
                401 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status401(github_response.to_json()?).into()),
                403 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status404(github_response.to_json()?).into()),
                422 => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Status422.into()),
                code => Err(CopilotCancelCopilotSeatAssignmentForUsersError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get Copilot metrics for an organization
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    /// 
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    /// 
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    /// 
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
    /// Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// [GitHub API docs for copilot_metrics_for_organization](https://docs.github.com/rest/copilot/copilot-metrics#get-copilot-metrics-for-an-organization)
    ///
    /// ---
    pub async fn copilot_metrics_for_organization_async(&self, org: &str, query_params: Option<impl Into<CopilotCopilotMetricsForOrganizationParams<'api>>>) -> Result<Vec<CopilotUsageMetricsDay>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/copilot/metrics", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotCopilotMetricsForOrganizationError::Status500(github_response.to_json_async().await?).into()),
                403 => Err(CopilotCopilotMetricsForOrganizationError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotCopilotMetricsForOrganizationError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(CopilotCopilotMetricsForOrganizationError::Status422(github_response.to_json_async().await?).into()),
                code => Err(CopilotCopilotMetricsForOrganizationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get Copilot metrics for an organization
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    /// 
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    /// 
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    /// 
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
    /// Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// [GitHub API docs for copilot_metrics_for_organization](https://docs.github.com/rest/copilot/copilot-metrics#get-copilot-metrics-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn copilot_metrics_for_organization(&self, org: &str, query_params: Option<impl Into<CopilotCopilotMetricsForOrganizationParams<'api>>>) -> Result<Vec<CopilotUsageMetricsDay>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/copilot/metrics", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CopilotCopilotMetricsForOrganizationParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotCopilotMetricsForOrganizationError::Status500(github_response.to_json()?).into()),
                403 => Err(CopilotCopilotMetricsForOrganizationError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotCopilotMetricsForOrganizationError::Status404(github_response.to_json()?).into()),
                422 => Err(CopilotCopilotMetricsForOrganizationError::Status422(github_response.to_json()?).into()),
                code => Err(CopilotCopilotMetricsForOrganizationError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get Copilot metrics for a team
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    /// 
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    /// 
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    /// 
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
    /// Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// [GitHub API docs for copilot_metrics_for_team](https://docs.github.com/rest/copilot/copilot-metrics#get-copilot-metrics-for-a-team)
    ///
    /// ---
    pub async fn copilot_metrics_for_team_async(&self, org: &str, team_slug: &str, query_params: Option<impl Into<CopilotCopilotMetricsForTeamParams<'api>>>) -> Result<Vec<CopilotUsageMetricsDay>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/team/{}/copilot/metrics", super::GITHUB_BASE_API_URL, org, team_slug);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotCopilotMetricsForTeamError::Status500(github_response.to_json_async().await?).into()),
                403 => Err(CopilotCopilotMetricsForTeamError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotCopilotMetricsForTeamError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(CopilotCopilotMetricsForTeamError::Status422(github_response.to_json_async().await?).into()),
                code => Err(CopilotCopilotMetricsForTeamError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get Copilot metrics for a team
    ///
    /// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
    /// 
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
    /// 
    /// The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    /// 
    /// To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
    /// Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// [GitHub API docs for copilot_metrics_for_team](https://docs.github.com/rest/copilot/copilot-metrics#get-copilot-metrics-for-a-team)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn copilot_metrics_for_team(&self, org: &str, team_slug: &str, query_params: Option<impl Into<CopilotCopilotMetricsForTeamParams<'api>>>) -> Result<Vec<CopilotUsageMetricsDay>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/team/{}/copilot/metrics", super::GITHUB_BASE_API_URL, org, team_slug);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CopilotCopilotMetricsForTeamParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotCopilotMetricsForTeamError::Status500(github_response.to_json()?).into()),
                403 => Err(CopilotCopilotMetricsForTeamError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotCopilotMetricsForTeamError::Status404(github_response.to_json()?).into()),
                422 => Err(CopilotCopilotMetricsForTeamError::Status422(github_response.to_json()?).into()),
                code => Err(CopilotCopilotMetricsForTeamError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get Copilot seat information and settings for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Gets information about an organization's Copilot subscription, including seat breakdown
    /// and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
    /// For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."
    /// 
    /// Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for get_copilot_organization_details](https://docs.github.com/rest/copilot/copilot-user-management#get-copilot-seat-information-and-settings-for-an-organization)
    ///
    /// ---
    pub async fn get_copilot_organization_details_async(&self, org: &str) -> Result<CopilotOrganizationDetails, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotGetCopilotOrganizationDetailsError::Status500(github_response.to_json_async().await?).into()),
                401 => Err(CopilotGetCopilotOrganizationDetailsError::Status401(github_response.to_json_async().await?).into()),
                403 => Err(CopilotGetCopilotOrganizationDetailsError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotGetCopilotOrganizationDetailsError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(CopilotGetCopilotOrganizationDetailsError::Status422.into()),
                code => Err(CopilotGetCopilotOrganizationDetailsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get Copilot seat information and settings for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Gets information about an organization's Copilot subscription, including seat breakdown
    /// and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
    /// For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."
    /// 
    /// Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for get_copilot_organization_details](https://docs.github.com/rest/copilot/copilot-user-management#get-copilot-seat-information-and-settings-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_copilot_organization_details(&self, org: &str) -> Result<CopilotOrganizationDetails, AdapterError> {

        let request_uri = format!("{}/orgs/{}/copilot/billing", super::GITHUB_BASE_API_URL, org);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotGetCopilotOrganizationDetailsError::Status500(github_response.to_json()?).into()),
                401 => Err(CopilotGetCopilotOrganizationDetailsError::Status401(github_response.to_json()?).into()),
                403 => Err(CopilotGetCopilotOrganizationDetailsError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotGetCopilotOrganizationDetailsError::Status404(github_response.to_json()?).into()),
                422 => Err(CopilotGetCopilotOrganizationDetailsError::Status422.into()),
                code => Err(CopilotGetCopilotOrganizationDetailsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get Copilot seat assignment details for a user
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.
    /// 
    /// The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    /// 
    /// Only organization owners can view Copilot seat assignment details for members of their organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for get_copilot_seat_details_for_user](https://docs.github.com/rest/copilot/copilot-user-management#get-copilot-seat-assignment-details-for-a-user)
    ///
    /// ---
    pub async fn get_copilot_seat_details_for_user_async(&self, org: &str, username: &str) -> Result<CopilotSeatDetails, AdapterError> {

        let request_uri = format!("{}/orgs/{}/members/{}/copilot", super::GITHUB_BASE_API_URL, org, username);


        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotGetCopilotSeatDetailsForUserError::Status500(github_response.to_json_async().await?).into()),
                401 => Err(CopilotGetCopilotSeatDetailsForUserError::Status401(github_response.to_json_async().await?).into()),
                403 => Err(CopilotGetCopilotSeatDetailsForUserError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotGetCopilotSeatDetailsForUserError::Status404(github_response.to_json_async().await?).into()),
                422 => Err(CopilotGetCopilotSeatDetailsForUserError::Status422.into()),
                code => Err(CopilotGetCopilotSeatDetailsForUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get Copilot seat assignment details for a user
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.
    /// 
    /// The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    /// 
    /// Only organization owners can view Copilot seat assignment details for members of their organization.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for get_copilot_seat_details_for_user](https://docs.github.com/rest/copilot/copilot-user-management#get-copilot-seat-assignment-details-for-a-user)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn get_copilot_seat_details_for_user(&self, org: &str, username: &str) -> Result<CopilotSeatDetails, AdapterError> {

        let request_uri = format!("{}/orgs/{}/members/{}/copilot", super::GITHUB_BASE_API_URL, org, username);


        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotGetCopilotSeatDetailsForUserError::Status500(github_response.to_json()?).into()),
                401 => Err(CopilotGetCopilotSeatDetailsForUserError::Status401(github_response.to_json()?).into()),
                403 => Err(CopilotGetCopilotSeatDetailsForUserError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotGetCopilotSeatDetailsForUserError::Status404(github_response.to_json()?).into()),
                422 => Err(CopilotGetCopilotSeatDetailsForUserError::Status422.into()),
                code => Err(CopilotGetCopilotSeatDetailsForUserError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List all Copilot seat assignments for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
    /// Only organization owners can view assigned seats.
    /// 
    /// Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for list_copilot_seats](https://docs.github.com/rest/copilot/copilot-user-management#list-all-copilot-seat-assignments-for-an-organization)
    ///
    /// ---
    pub async fn list_copilot_seats_async(&self, org: &str, query_params: Option<impl Into<CopilotListCopilotSeatsParams>>) -> Result<GetCopilotListCopilotSeatsResponse200, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/copilot/billing/seats", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotListCopilotSeatsError::Status500(github_response.to_json_async().await?).into()),
                401 => Err(CopilotListCopilotSeatsError::Status401(github_response.to_json_async().await?).into()),
                403 => Err(CopilotListCopilotSeatsError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotListCopilotSeatsError::Status404(github_response.to_json_async().await?).into()),
                code => Err(CopilotListCopilotSeatsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # List all Copilot seat assignments for an organization
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
    /// Only organization owners can view assigned seats.
    /// 
    /// Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
    /// For more information about activity data, see "[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization)."
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
    ///
    /// [GitHub API docs for list_copilot_seats](https://docs.github.com/rest/copilot/copilot-user-management#list-all-copilot-seat-assignments-for-an-organization)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn list_copilot_seats(&self, org: &str, query_params: Option<impl Into<CopilotListCopilotSeatsParams>>) -> Result<GetCopilotListCopilotSeatsResponse200, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/copilot/billing/seats", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CopilotListCopilotSeatsParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotListCopilotSeatsError::Status500(github_response.to_json()?).into()),
                401 => Err(CopilotListCopilotSeatsError::Status401(github_response.to_json()?).into()),
                403 => Err(CopilotListCopilotSeatsError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotListCopilotSeatsError::Status404(github_response.to_json()?).into()),
                code => Err(CopilotListCopilotSeatsError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a summary of Copilot usage for organization members
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// across an organization, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day.
    /// See the response schema tab for detailed metrics definitions.
    /// 
    /// The response contains metrics for up to 28 days prior. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    /// 
    /// Organization owners, and owners and billing managers of the parent enterprise, can view Copilot usage metrics.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// [GitHub API docs for usage_metrics_for_org](https://docs.github.com/rest/copilot/copilot-usage#get-a-summary-of-copilot-usage-for-organization-members)
    ///
    /// ---
    pub async fn usage_metrics_for_org_async(&self, org: &str, query_params: Option<impl Into<CopilotUsageMetricsForOrgParams<'api>>>) -> Result<Vec<CopilotUsageMetrics>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/copilot/usage", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotUsageMetricsForOrgError::Status500(github_response.to_json_async().await?).into()),
                401 => Err(CopilotUsageMetricsForOrgError::Status401(github_response.to_json_async().await?).into()),
                403 => Err(CopilotUsageMetricsForOrgError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotUsageMetricsForOrgError::Status404(github_response.to_json_async().await?).into()),
                code => Err(CopilotUsageMetricsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a summary of Copilot usage for organization members
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// across an organization, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day.
    /// See the response schema tab for detailed metrics definitions.
    /// 
    /// The response contains metrics for up to 28 days prior. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    /// 
    /// Organization owners, and owners and billing managers of the parent enterprise, can view Copilot usage metrics.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// [GitHub API docs for usage_metrics_for_org](https://docs.github.com/rest/copilot/copilot-usage#get-a-summary-of-copilot-usage-for-organization-members)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn usage_metrics_for_org(&self, org: &str, query_params: Option<impl Into<CopilotUsageMetricsForOrgParams<'api>>>) -> Result<Vec<CopilotUsageMetrics>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/copilot/usage", super::GITHUB_BASE_API_URL, org);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CopilotUsageMetricsForOrgParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotUsageMetricsForOrgError::Status500(github_response.to_json()?).into()),
                401 => Err(CopilotUsageMetricsForOrgError::Status401(github_response.to_json()?).into()),
                403 => Err(CopilotUsageMetricsForOrgError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotUsageMetricsForOrgError::Status404(github_response.to_json()?).into()),
                code => Err(CopilotUsageMetricsForOrgError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a summary of Copilot usage for a team
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// for users within a team, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day.
    /// See the response schema tab for detailed metrics definitions.
    /// 
    /// The response contains metrics for up to 28 days prior. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    /// 
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the team had five or more members with active Copilot licenses, as evaluated at the end of that day.
    /// 
    /// Organization owners for the organization that contains this team, and owners and billing managers of the parent enterprise can view Copilot usage metrics for a team.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// [GitHub API docs for usage_metrics_for_team](https://docs.github.com/rest/copilot/copilot-usage#get-a-summary-of-copilot-usage-for-a-team)
    ///
    /// ---
    pub async fn usage_metrics_for_team_async(&self, org: &str, team_slug: &str, query_params: Option<impl Into<CopilotUsageMetricsForTeamParams<'api>>>) -> Result<Vec<CopilotUsageMetrics>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/team/{}/copilot/usage", super::GITHUB_BASE_API_URL, org, team_slug);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            request_uri.push_str(&serde_urlencoded::to_string(params.into())?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None::<C::Body>,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch_async(request).await?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json_async().await?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotUsageMetricsForTeamError::Status500(github_response.to_json_async().await?).into()),
                401 => Err(CopilotUsageMetricsForTeamError::Status401(github_response.to_json_async().await?).into()),
                403 => Err(CopilotUsageMetricsForTeamError::Status403(github_response.to_json_async().await?).into()),
                404 => Err(CopilotUsageMetricsForTeamError::Status404(github_response.to_json_async().await?).into()),
                code => Err(CopilotUsageMetricsForTeamError::Generic { code }.into()),
            }
        }
    }

    /// ---
    ///
    /// # Get a summary of Copilot usage for a team
    ///
    /// > [!NOTE]
    /// > This endpoint is in public preview and is subject to change.
    /// 
    /// You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE
    /// for users within a team, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day.
    /// See the response schema tab for detailed metrics definitions.
    /// 
    /// The response contains metrics for up to 28 days prior. Usage metrics are processed once per day for the previous day,
    /// and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
    /// they must have telemetry enabled in their IDE.
    /// 
    /// > [!NOTE]
    /// > This endpoint will only return results for a given day if the team had five or more members with active Copilot licenses, as evaluated at the end of that day.
    /// 
    /// Organization owners for the organization that contains this team, and owners and billing managers of the parent enterprise can view Copilot usage metrics for a team.
    /// 
    /// OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
    ///
    /// [GitHub API docs for usage_metrics_for_team](https://docs.github.com/rest/copilot/copilot-usage#get-a-summary-of-copilot-usage-for-a-team)
    ///
    /// ---
    #[cfg(not(target_arch = "wasm32"))]
    pub fn usage_metrics_for_team(&self, org: &str, team_slug: &str, query_params: Option<impl Into<CopilotUsageMetricsForTeamParams<'api>>>) -> Result<Vec<CopilotUsageMetrics>, AdapterError> {

        let mut request_uri = format!("{}/orgs/{}/team/{}/copilot/usage", super::GITHUB_BASE_API_URL, org, team_slug);

        if let Some(params) = query_params {
            request_uri.push_str("?");
            let qp: CopilotUsageMetricsForTeamParams = params.into();
            request_uri.push_str(&serde_urlencoded::to_string(qp)?);
        }

        let req = GitHubRequest {
            uri: request_uri,
            body: None,
            method: "GET",
            headers: vec![]
        };

        let request = self.client.build(req)?;

        // --

        let github_response = self.client.fetch(request)?;

        // --

        if github_response.is_success() {
            Ok(github_response.to_json()?)
        } else {
            match github_response.status_code() {
                500 => Err(CopilotUsageMetricsForTeamError::Status500(github_response.to_json()?).into()),
                401 => Err(CopilotUsageMetricsForTeamError::Status401(github_response.to_json()?).into()),
                403 => Err(CopilotUsageMetricsForTeamError::Status403(github_response.to_json()?).into()),
                404 => Err(CopilotUsageMetricsForTeamError::Status404(github_response.to_json()?).into()),
                code => Err(CopilotUsageMetricsForTeamError::Generic { code }.into()),
            }
        }
    }

}
